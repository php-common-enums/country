<?php

namespace PhpCommonEnums\Country\Tests\Enumeration;

use PhpCommonEnums\Country\Enumeration\CountryEnum;
use PHPUnit\Framework\TestCase;

class CountryEnumTest extends TestCase
{
    public function testExpectedCurrencyCode(): void
    {
        self::assertEquals(
            'AFN',
            CountryEnum::Afghanistan->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::AlandIslands->getCurrencyCode()
        );
        self::assertEquals(
            'ALL',
            CountryEnum::Albania->getCurrencyCode()
        );
        self::assertEquals(
            'DZD',
            CountryEnum::Algeria->getCurrencyCode()
        );
        self::assertEquals(
            'USD',
            CountryEnum::AmericanSamoa->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Andorra->getCurrencyCode()
        );
        self::assertEquals(
            'AOA',
            CountryEnum::Angola->getCurrencyCode()
        );
        self::assertEquals(
            'XCD',
            CountryEnum::Anguilla->getCurrencyCode()
        );
        self::assertEquals(
            '',
            CountryEnum::Antarctica->getCurrencyCode()
        );
        self::assertEquals(
            'XCD',
            CountryEnum::AntiguaandBarbuda->getCurrencyCode()
        );
        self::assertEquals(
            'ARS',
            CountryEnum::Argentina->getCurrencyCode()
        );
        self::assertEquals(
            'AMD',
            CountryEnum::Armenia->getCurrencyCode()
        );
        self::assertEquals(
            'AWG',
            CountryEnum::Aruba->getCurrencyCode()
        );
        self::assertEquals(
            'AUD',
            CountryEnum::Australia->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Austria->getCurrencyCode()
        );
        self::assertEquals(
            'AZN',
            CountryEnum::Azerbaijan->getCurrencyCode()
        );
        self::assertEquals(
            'BSD',
            CountryEnum::Bahamas->getCurrencyCode()
        );
        self::assertEquals(
            'BHD',
            CountryEnum::Bahrain->getCurrencyCode()
        );
        self::assertEquals(
            'BDT',
            CountryEnum::Bangladesh->getCurrencyCode()
        );
        self::assertEquals(
            'BBD',
            CountryEnum::Barbados->getCurrencyCode()
        );
        self::assertEquals(
            'BYR',
            CountryEnum::Belarus->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Belgium->getCurrencyCode()
        );
        self::assertEquals(
            'BZD',
            CountryEnum::Belize->getCurrencyCode()
        );
        self::assertEquals(
            'XOF',
            CountryEnum::Benin->getCurrencyCode()
        );
        self::assertEquals(
            'BMD',
            CountryEnum::Bermuda->getCurrencyCode()
        );
        self::assertEquals(
            'BTN',
            CountryEnum::Bhutan->getCurrencyCode()
        );
        self::assertEquals(
            'BOB',
            CountryEnum::Bolivia->getCurrencyCode()
        );
        self::assertEquals(
            'USD',
            CountryEnum::Bonaire->getCurrencyCode()
        );
        self::assertEquals(
            'BAM',
            CountryEnum::BosniaandHerzegovina->getCurrencyCode()
        );
        self::assertEquals(
            'BWP',
            CountryEnum::Botswana->getCurrencyCode()
        );
        self::assertEquals(
            '',
            CountryEnum::BouvetIsland->getCurrencyCode()
        );
        self::assertEquals(
            'BRL',
            CountryEnum::Brazil->getCurrencyCode()
        );
        self::assertEquals(
            'USD',
            CountryEnum::BritishIndianOceanTerritory->getCurrencyCode()
        );
        self::assertEquals(
            'USD',
            CountryEnum::BritishVirginIslands->getCurrencyCode()
        );
        self::assertEquals(
            'BND',
            CountryEnum::BruneiDarussalam->getCurrencyCode()
        );
        self::assertEquals(
            'BGN',
            CountryEnum::Bulgaria->getCurrencyCode()
        );
        self::assertEquals(
            'XOF',
            CountryEnum::BurkinaFaso->getCurrencyCode()
        );
        self::assertEquals(
            'BIF',
            CountryEnum::Burundi->getCurrencyCode()
        );
        self::assertEquals(
            'KHR',
            CountryEnum::Cambodia->getCurrencyCode()
        );
        self::assertEquals(
            'XAF',
            CountryEnum::Cameroon->getCurrencyCode()
        );
        self::assertEquals(
            'CAD',
            CountryEnum::Canada->getCurrencyCode()
        );
        self::assertEquals(
            'CVE',
            CountryEnum::CapeVerde->getCurrencyCode()
        );
        self::assertEquals(
            'KYD',
            CountryEnum::CaymanIslands->getCurrencyCode()
        );
        self::assertEquals(
            'XAF',
            CountryEnum::CentralAfricanRepublic->getCurrencyCode()
        );
        self::assertEquals(
            'XAF',
            CountryEnum::Chad->getCurrencyCode()
        );
        self::assertEquals(
            'CLP',
            CountryEnum::Chile->getCurrencyCode()
        );
        self::assertEquals(
            'CNY',
            CountryEnum::China->getCurrencyCode()
        );
        self::assertEquals(
            'AUD',
            CountryEnum::ChristmasIsland->getCurrencyCode()
        );
        self::assertEquals(
            'AUD',
            CountryEnum::CocosIslands->getCurrencyCode()
        );
        self::assertEquals(
            'COP',
            CountryEnum::Colombia->getCurrencyCode()
        );
        self::assertEquals(
            'KMF',
            CountryEnum::Comoros->getCurrencyCode()
        );
        self::assertEquals(
            'XAF',
            CountryEnum::Congo->getCurrencyCode()
        );
        self::assertEquals(
            'CDF',
            CountryEnum::CongoDR->getCurrencyCode()
        );
        self::assertEquals(
            'NZD',
            CountryEnum::CookIslands->getCurrencyCode()
        );
        self::assertEquals(
            'CRC',
            CountryEnum::CostaRica->getCurrencyCode()
        );
        self::assertEquals(
            'XOF',
            CountryEnum::CotedIvoire->getCurrencyCode()
        );
        self::assertEquals(
            'HRK',
            CountryEnum::Croatia->getCurrencyCode()
        );
        self::assertEquals(
            'CUP',
            CountryEnum::Cuba->getCurrencyCode()
        );
        self::assertEquals(
            'ANG',
            CountryEnum::Curacao->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Cyprus->getCurrencyCode()
        );
        self::assertEquals(
            'CZK',
            CountryEnum::Czechia->getCurrencyCode()
        );
        self::assertEquals(
            'DKK',
            CountryEnum::Denmark->getCurrencyCode()
        );
        self::assertEquals(
            'DJF',
            CountryEnum::Djibouti->getCurrencyCode()
        );
        self::assertEquals(
            'XCD',
            CountryEnum::Dominica->getCurrencyCode()
        );
        self::assertEquals(
            'DOP',
            CountryEnum::DominicanRepublic->getCurrencyCode()
        );
        self::assertEquals(
            'USD',
            CountryEnum::Ecuador->getCurrencyCode()
        );
        self::assertEquals(
            'EGP',
            CountryEnum::Egypt->getCurrencyCode()
        );
        self::assertEquals(
            'SVC',
            CountryEnum::ElSalvador->getCurrencyCode()
        );
        self::assertEquals(
            'XAF',
            CountryEnum::EquatorialGuinea->getCurrencyCode()
        );
        self::assertEquals(
            'ERN',
            CountryEnum::Eritrea->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Estonia->getCurrencyCode()
        );
        self::assertEquals(
            'ETB',
            CountryEnum::Ethiopia->getCurrencyCode()
        );
        self::assertEquals(
            'FKP',
            CountryEnum::FalklandIslands->getCurrencyCode()
        );
        self::assertEquals(
            'DKK',
            CountryEnum::FaroeIslands->getCurrencyCode()
        );
        self::assertEquals(
            'FJD',
            CountryEnum::Fiji->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Finland->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::France->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::FrenchGuiana->getCurrencyCode()
        );
        self::assertEquals(
            'XPF',
            CountryEnum::FrenchPolynesia->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::FrenchSouthernTerritories->getCurrencyCode()
        );
        self::assertEquals(
            'XAF',
            CountryEnum::Gabon->getCurrencyCode()
        );
        self::assertEquals(
            'GMD',
            CountryEnum::Gambia->getCurrencyCode()
        );
        self::assertEquals(
            'GEL',
            CountryEnum::Georgia->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Germany->getCurrencyCode()
        );
        self::assertEquals(
            'GHS',
            CountryEnum::Ghana->getCurrencyCode()
        );
        self::assertEquals(
            'GIP',
            CountryEnum::Gibraltar->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Greece->getCurrencyCode()
        );
        self::assertEquals(
            'DKK',
            CountryEnum::Greenland->getCurrencyCode()
        );
        self::assertEquals(
            'XCD',
            CountryEnum::Grenada->getCurrencyCode()
        );
        self::assertEquals(
            'EUR ',
            CountryEnum::Guadeloupe->getCurrencyCode()
        );
        self::assertEquals(
            'USD',
            CountryEnum::Guam->getCurrencyCode()
        );
        self::assertEquals(
            'GTQ',
            CountryEnum::Guatemala->getCurrencyCode()
        );
        self::assertEquals(
            'GGP (GG2)',
            CountryEnum::Guernsey->getCurrencyCode()
        );
        self::assertEquals(
            'GNF',
            CountryEnum::Guinea->getCurrencyCode()
        );
        self::assertEquals(
            'XOF',
            CountryEnum::GuineaBissau->getCurrencyCode()
        );
        self::assertEquals(
            'GYD',
            CountryEnum::Guyana->getCurrencyCode()
        );
        self::assertEquals(
            'HTG',
            CountryEnum::Haiti->getCurrencyCode()
        );
        self::assertEquals(
            '',
            CountryEnum::HeardIslandandMcDonaldIslands->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::HolySee->getCurrencyCode()
        );
        self::assertEquals(
            'HNL',
            CountryEnum::Honduras->getCurrencyCode()
        );
        self::assertEquals(
            'HKD',
            CountryEnum::HongKong->getCurrencyCode()
        );
        self::assertEquals(
            'HUF',
            CountryEnum::Hungary->getCurrencyCode()
        );
        self::assertEquals(
            'ISK',
            CountryEnum::Iceland->getCurrencyCode()
        );
        self::assertEquals(
            'INR',
            CountryEnum::India->getCurrencyCode()
        );
        self::assertEquals(
            'IDR',
            CountryEnum::Indonesia->getCurrencyCode()
        );
        self::assertEquals(
            'IRR',
            CountryEnum::Iran->getCurrencyCode()
        );
        self::assertEquals(
            'IQD',
            CountryEnum::Iraq->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Ireland->getCurrencyCode()
        );
        self::assertEquals(
            'IMP (IM2)',
            CountryEnum::IsleofMan->getCurrencyCode()
        );
        self::assertEquals(
            'ILS',
            CountryEnum::Israel->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Italy->getCurrencyCode()
        );
        self::assertEquals(
            'JMD',
            CountryEnum::Jamaica->getCurrencyCode()
        );
        self::assertEquals(
            'JPY',
            CountryEnum::Japan->getCurrencyCode()
        );
        self::assertEquals(
            'JEP (JE2)',
            CountryEnum::Jersey->getCurrencyCode()
        );
        self::assertEquals(
            'JOD',
            CountryEnum::Jordan->getCurrencyCode()
        );
        self::assertEquals(
            'KZT',
            CountryEnum::Kazakhstan->getCurrencyCode()
        );
        self::assertEquals(
            'KES',
            CountryEnum::Kenya->getCurrencyCode()
        );
        self::assertEquals(
            'AUD',
            CountryEnum::Kiribati->getCurrencyCode()
        );
        self::assertEquals(
            'KRW',
            CountryEnum::Korea->getCurrencyCode()
        );
        self::assertEquals(
            'KPW',
            CountryEnum::KoreaDR->getCurrencyCode()
        );
        self::assertEquals(
            'KWD',
            CountryEnum::Kuwait->getCurrencyCode()
        );
        self::assertEquals(
            'KGS',
            CountryEnum::Kyrgyzstan->getCurrencyCode()
        );
        self::assertEquals(
            'LAK',
            CountryEnum::LaoPeoplesDemocraticRepublic->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Latvia->getCurrencyCode()
        );
        self::assertEquals(
            'LBP',
            CountryEnum::Lebanon->getCurrencyCode()
        );
        self::assertEquals(
            'LSL',
            CountryEnum::Lesotho->getCurrencyCode()
        );
        self::assertEquals(
            'LRD',
            CountryEnum::Liberia->getCurrencyCode()
        );
        self::assertEquals(
            'LYD',
            CountryEnum::Libya->getCurrencyCode()
        );
        self::assertEquals(
            'CHF',
            CountryEnum::Liechtenstein->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Lithuania->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Luxembourg->getCurrencyCode()
        );
        self::assertEquals(
            'MOP',
            CountryEnum::Macao->getCurrencyCode()
        );
        self::assertEquals(
            'MKD',
            CountryEnum::Macedonia->getCurrencyCode()
        );
        self::assertEquals(
            'MGA',
            CountryEnum::Madagascar->getCurrencyCode()
        );
        self::assertEquals(
            'MWK',
            CountryEnum::Malawi->getCurrencyCode()
        );
        self::assertEquals(
            'MYR',
            CountryEnum::Malaysia->getCurrencyCode()
        );
        self::assertEquals(
            'MVR',
            CountryEnum::Maldives->getCurrencyCode()
        );
        self::assertEquals(
            'XOF',
            CountryEnum::Mali->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Malta->getCurrencyCode()
        );
        self::assertEquals(
            'USD',
            CountryEnum::MarshallIslands->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Martinique->getCurrencyCode()
        );
        self::assertEquals(
            'MRO',
            CountryEnum::Mauritania->getCurrencyCode()
        );
        self::assertEquals(
            'MUR',
            CountryEnum::Mauritius->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Mayotte->getCurrencyCode()
        );
        self::assertEquals(
            'MXN',
            CountryEnum::Mexico->getCurrencyCode()
        );
        self::assertEquals(
            'USD',
            CountryEnum::Micronesia->getCurrencyCode()
        );
        self::assertEquals(
            'MDL',
            CountryEnum::Moldova->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Monaco->getCurrencyCode()
        );
        self::assertEquals(
            'MNT',
            CountryEnum::Mongolia->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Montenegro->getCurrencyCode()
        );
        self::assertEquals(
            'XCD',
            CountryEnum::Montserrat->getCurrencyCode()
        );
        self::assertEquals(
            'MAD',
            CountryEnum::Morocco->getCurrencyCode()
        );
        self::assertEquals(
            'MZN',
            CountryEnum::Mozambique->getCurrencyCode()
        );
        self::assertEquals(
            'MMK',
            CountryEnum::Myanmar->getCurrencyCode()
        );
        self::assertEquals(
            'NAD',
            CountryEnum::Namibia->getCurrencyCode()
        );
        self::assertEquals(
            'AUD',
            CountryEnum::Nauru->getCurrencyCode()
        );
        self::assertEquals(
            'NPR',
            CountryEnum::Nepal->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Netherlands->getCurrencyCode()
        );
        self::assertEquals(
            'XPF',
            CountryEnum::NewCaledonia->getCurrencyCode()
        );
        self::assertEquals(
            'NZD',
            CountryEnum::NewZealand->getCurrencyCode()
        );
        self::assertEquals(
            'NIO',
            CountryEnum::Nicaragua->getCurrencyCode()
        );
        self::assertEquals(
            'XOF',
            CountryEnum::Niger->getCurrencyCode()
        );
        self::assertEquals(
            'NGN',
            CountryEnum::Nigeria->getCurrencyCode()
        );
        self::assertEquals(
            'NZD',
            CountryEnum::Niue->getCurrencyCode()
        );
        self::assertEquals(
            'AUD',
            CountryEnum::NorfolkIsland->getCurrencyCode()
        );
        self::assertEquals(
            'USD',
            CountryEnum::NorthernMarianaIslands->getCurrencyCode()
        );
        self::assertEquals(
            'NOK',
            CountryEnum::Norway->getCurrencyCode()
        );
        self::assertEquals(
            'OMR',
            CountryEnum::Oman->getCurrencyCode()
        );
        self::assertEquals(
            'PKR',
            CountryEnum::Pakistan->getCurrencyCode()
        );
        self::assertEquals(
            'USD',
            CountryEnum::Palau->getCurrencyCode()
        );
        self::assertEquals(
            'ILS',
            CountryEnum::Palestine->getCurrencyCode()
        );
        self::assertEquals(
            'PAB',
            CountryEnum::Panama->getCurrencyCode()
        );
        self::assertEquals(
            'PGK',
            CountryEnum::PapuaNewGuinea->getCurrencyCode()
        );
        self::assertEquals(
            'PYG',
            CountryEnum::Paraguay->getCurrencyCode()
        );
        self::assertEquals(
            'PEN',
            CountryEnum::Peru->getCurrencyCode()
        );
        self::assertEquals(
            'PHP',
            CountryEnum::Philippines->getCurrencyCode()
        );
        self::assertEquals(
            'NZD',
            CountryEnum::Pitcairn->getCurrencyCode()
        );
        self::assertEquals(
            'PLN',
            CountryEnum::Poland->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Portugal->getCurrencyCode()
        );
        self::assertEquals(
            'USD',
            CountryEnum::PuertoRico->getCurrencyCode()
        );
        self::assertEquals(
            'QAR',
            CountryEnum::Qatar->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Reunion->getCurrencyCode()
        );
        self::assertEquals(
            'RON',
            CountryEnum::Romania->getCurrencyCode()
        );
        self::assertEquals(
            'RUB',
            CountryEnum::RussianFederation->getCurrencyCode()
        );
        self::assertEquals(
            'RWF',
            CountryEnum::Rwanda->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::SaintBarthelemy->getCurrencyCode()
        );
        self::assertEquals(
            'SHP',
            CountryEnum::SaintHelena->getCurrencyCode()
        );
        self::assertEquals(
            'XCD',
            CountryEnum::SaintKittsandNevis->getCurrencyCode()
        );
        self::assertEquals(
            'XCD',
            CountryEnum::SaintLucia->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::SaintMartinFrench->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::SaintPierreandMiquelon->getCurrencyCode()
        );
        self::assertEquals(
            'XCD',
            CountryEnum::SaintVincentandtheGrenadines->getCurrencyCode()
        );
        self::assertEquals(
            'WST',
            CountryEnum::Samoa->getCurrencyCode()
        );
        self::assertEquals(
            'EUR ',
            CountryEnum::SanMarino->getCurrencyCode()
        );
        self::assertEquals(
            'STD',
            CountryEnum::SaoTomeandPrincipe->getCurrencyCode()
        );
        self::assertEquals(
            'SAR',
            CountryEnum::SaudiArabia->getCurrencyCode()
        );
        self::assertEquals(
            'XOF',
            CountryEnum::Senegal->getCurrencyCode()
        );
        self::assertEquals(
            'RSD',
            CountryEnum::Serbia->getCurrencyCode()
        );
        self::assertEquals(
            'SCR',
            CountryEnum::Seychelles->getCurrencyCode()
        );
        self::assertEquals(
            'SLL',
            CountryEnum::SierraLeone->getCurrencyCode()
        );
        self::assertEquals(
            'SGD',
            CountryEnum::Singapore->getCurrencyCode()
        );
        self::assertEquals(
            'ANG',
            CountryEnum::SintMaartenDutch->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Slovakia->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Slovenia->getCurrencyCode()
        );
        self::assertEquals(
            'SBD',
            CountryEnum::SolomonIslands->getCurrencyCode()
        );
        self::assertEquals(
            'SOS',
            CountryEnum::Somalia->getCurrencyCode()
        );
        self::assertEquals(
            'ZAR',
            CountryEnum::SouthAfrica->getCurrencyCode()
        );
        self::assertEquals(
            '',
            CountryEnum::SouthGeorgiaandtheSouthSandwichIslands->getCurrencyCode()
        );
        self::assertEquals(
            'SSP',
            CountryEnum::SouthSudan->getCurrencyCode()
        );
        self::assertEquals(
            'EUR',
            CountryEnum::Spain->getCurrencyCode()
        );
        self::assertEquals(
            'LKR',
            CountryEnum::SriLanka->getCurrencyCode()
        );
        self::assertEquals(
            'SDG',
            CountryEnum::Sudan->getCurrencyCode()
        );
        self::assertEquals(
            'SRD',
            CountryEnum::Suriname->getCurrencyCode()
        );
        self::assertEquals(
            'NOK',
            CountryEnum::SvalbardandJanMayen->getCurrencyCode()
        );
        self::assertEquals(
            'SZL',
            CountryEnum::Swaziland->getCurrencyCode()
        );
        self::assertEquals(
            'SEK',
            CountryEnum::Sweden->getCurrencyCode()
        );
        self::assertEquals(
            'CHF',
            CountryEnum::Switzerland->getCurrencyCode()
        );
        self::assertEquals(
            'SYP',
            CountryEnum::SyrianArabRepublic->getCurrencyCode()
        );
        self::assertEquals(
            'TWD',
            CountryEnum::Taiwan->getCurrencyCode()
        );
        self::assertEquals(
            'TJS',
            CountryEnum::Tajikistan->getCurrencyCode()
        );
        self::assertEquals(
            'TZS',
            CountryEnum::Tanzania->getCurrencyCode()
        );
        self::assertEquals(
            'THB',
            CountryEnum::Thailand->getCurrencyCode()
        );
        self::assertEquals(
            'USD',
            CountryEnum::TimorLeste->getCurrencyCode()
        );
        self::assertEquals(
            'XOF',
            CountryEnum::Togo->getCurrencyCode()
        );
        self::assertEquals(
            'NZD',
            CountryEnum::Tokelau->getCurrencyCode()
        );
        self::assertEquals(
            'TOP',
            CountryEnum::Tonga->getCurrencyCode()
        );
        self::assertEquals(
            'TTD',
            CountryEnum::TrinidadandTobago->getCurrencyCode()
        );
        self::assertEquals(
            'TND',
            CountryEnum::Tunisia->getCurrencyCode()
        );
        self::assertEquals(
            'TRY',
            CountryEnum::Turkey->getCurrencyCode()
        );
        self::assertEquals(
            'TMT',
            CountryEnum::Turkmenistan->getCurrencyCode()
        );
        self::assertEquals(
            'USD',
            CountryEnum::TurksandCaicosIslands->getCurrencyCode()
        );
        self::assertEquals(
            'AUD',
            CountryEnum::Tuvalu->getCurrencyCode()
        );
        self::assertEquals(
            'UGX',
            CountryEnum::Uganda->getCurrencyCode()
        );
        self::assertEquals(
            'UAH',
            CountryEnum::Ukraine->getCurrencyCode()
        );
        self::assertEquals(
            'AED',
            CountryEnum::UnitedArabEmirates->getCurrencyCode()
        );
        self::assertEquals(
            'GBP',
            CountryEnum::UnitedKingdom->getCurrencyCode()
        );
        self::assertEquals(
            'USD',
            CountryEnum::UnitedStates->getCurrencyCode()
        );
        self::assertEquals(
            'USD',
            CountryEnum::UnitedStatesMinorOutlyingIslands->getCurrencyCode()
        );
        self::assertEquals(
            'UYU',
            CountryEnum::Uruguay->getCurrencyCode()
        );
        self::assertEquals(
            'UZS',
            CountryEnum::Uzbekistan->getCurrencyCode()
        );
        self::assertEquals(
            'VUV',
            CountryEnum::Vanuatu->getCurrencyCode()
        );
        self::assertEquals(
            'VEF',
            CountryEnum::Venezuela->getCurrencyCode()
        );
        self::assertEquals(
            'VND',
            CountryEnum::VietNam->getCurrencyCode()
        );
        self::assertEquals(
            'USD',
            CountryEnum::VirginIslands->getCurrencyCode()
        );
        self::assertEquals(
            'XPF',
            CountryEnum::WallisandFutuna->getCurrencyCode()
        );
        self::assertEquals(
            'MAD',
            CountryEnum::WesternSahara->getCurrencyCode()
        );
        self::assertEquals(
            'YER',
            CountryEnum::Yemen->getCurrencyCode()
        );
        self::assertEquals(
            'ZMW',
            CountryEnum::Zambia->getCurrencyCode()
        );
        self::assertEquals(
            'ZWL',
            CountryEnum::Zimbabwe->getCurrencyCode()
        );
    }

    public function testExpectedCurrencySubUnit(): void
    {
        self::assertEquals(
            'pul',
            CountryEnum::Afghanistan->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::AlandIslands->getCurrencySubUnit()
        );
        self::assertEquals(
            '(qindar (pl. qindarka))',
            CountryEnum::Albania->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::Algeria->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::AmericanSamoa->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Andorra->getCurrencySubUnit()
        );
        self::assertEquals(
            'cêntimo',
            CountryEnum::Angola->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Anguilla->getCurrencySubUnit()
        );
        self::assertEquals(
            '',
            CountryEnum::Antarctica->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::AntiguaandBarbuda->getCurrencySubUnit()
        );
        self::assertEquals(
            'centavo',
            CountryEnum::Argentina->getCurrencySubUnit()
        );
        self::assertEquals(
            'luma',
            CountryEnum::Armenia->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Aruba->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Australia->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Austria->getCurrencySubUnit()
        );
        self::assertEquals(
            'kepik (inv.)',
            CountryEnum::Azerbaijan->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Bahamas->getCurrencySubUnit()
        );
        self::assertEquals(
            'fils (inv.)',
            CountryEnum::Bahrain->getCurrencySubUnit()
        );
        self::assertEquals(
            'poisha (inv.)',
            CountryEnum::Bangladesh->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Barbados->getCurrencySubUnit()
        );
        self::assertEquals(
            'kopek',
            CountryEnum::Belarus->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Belgium->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Belize->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::Benin->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Bermuda->getCurrencySubUnit()
        );
        self::assertEquals(
            'chhetrum (inv.)',
            CountryEnum::Bhutan->getCurrencySubUnit()
        );
        self::assertEquals(
            'centavo',
            CountryEnum::Bolivia->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Bonaire->getCurrencySubUnit()
        );
        self::assertEquals(
            'fening',
            CountryEnum::BosniaandHerzegovina->getCurrencySubUnit()
        );
        self::assertEquals(
            'thebe (inv.)',
            CountryEnum::Botswana->getCurrencySubUnit()
        );
        self::assertEquals(
            '',
            CountryEnum::BouvetIsland->getCurrencySubUnit()
        );
        self::assertEquals(
            'centavo',
            CountryEnum::Brazil->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::BritishIndianOceanTerritory->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::BritishVirginIslands->getCurrencySubUnit()
        );
        self::assertEquals(
            'sen (inv.)',
            CountryEnum::BruneiDarussalam->getCurrencySubUnit()
        );
        self::assertEquals(
            'stotinka',
            CountryEnum::Bulgaria->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::BurkinaFaso->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::Burundi->getCurrencySubUnit()
        );
        self::assertEquals(
            'sen (inv.)',
            CountryEnum::Cambodia->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::Cameroon->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Canada->getCurrencySubUnit()
        );
        self::assertEquals(
            'centavo',
            CountryEnum::CapeVerde->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::CaymanIslands->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::CentralAfricanRepublic->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::Chad->getCurrencySubUnit()
        );
        self::assertEquals(
            'centavo',
            CountryEnum::Chile->getCurrencySubUnit()
        );
        self::assertEquals(
            'jiao (10)',
            CountryEnum::China->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::ChristmasIsland->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::CocosIslands->getCurrencySubUnit()
        );
        self::assertEquals(
            'centavo',
            CountryEnum::Colombia->getCurrencySubUnit()
        );
        self::assertEquals(
            '',
            CountryEnum::Comoros->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::Congo->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::CongoDR->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::CookIslands->getCurrencySubUnit()
        );
        self::assertEquals(
            'céntimo',
            CountryEnum::CostaRica->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::CotedIvoire->getCurrencySubUnit()
        );
        self::assertEquals(
            'lipa (inv.)',
            CountryEnum::Croatia->getCurrencySubUnit()
        );
        self::assertEquals(
            'centavo',
            CountryEnum::Cuba->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Curacao->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Cyprus->getCurrencySubUnit()
        );
        self::assertEquals(
            'halér',
            CountryEnum::Czechia->getCurrencySubUnit()
        );
        self::assertEquals(
            'øre (inv.)',
            CountryEnum::Denmark->getCurrencySubUnit()
        );
        self::assertEquals(
            '',
            CountryEnum::Djibouti->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Dominica->getCurrencySubUnit()
        );
        self::assertEquals(
            'centavo',
            CountryEnum::DominicanRepublic->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Ecuador->getCurrencySubUnit()
        );
        self::assertEquals(
            'piastre',
            CountryEnum::Egypt->getCurrencySubUnit()
        );
        self::assertEquals(
            'centavo',
            CountryEnum::ElSalvador->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::EquatorialGuinea->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Eritrea->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Estonia->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Ethiopia->getCurrencySubUnit()
        );
        self::assertEquals(
            'new penny',
            CountryEnum::FalklandIslands->getCurrencySubUnit()
        );
        self::assertEquals(
            'øre (inv.)',
            CountryEnum::FaroeIslands->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Fiji->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Finland->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::France->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::FrenchGuiana->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::FrenchPolynesia->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::FrenchSouthernTerritories->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::Gabon->getCurrencySubUnit()
        );
        self::assertEquals(
            'butut',
            CountryEnum::Gambia->getCurrencySubUnit()
        );
        self::assertEquals(
            'tetri (inv.)',
            CountryEnum::Georgia->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Germany->getCurrencySubUnit()
        );
        self::assertEquals(
            'pesewa',
            CountryEnum::Ghana->getCurrencySubUnit()
        );
        self::assertEquals(
            'penny',
            CountryEnum::Gibraltar->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Greece->getCurrencySubUnit()
        );
        self::assertEquals(
            'øre (inv.)',
            CountryEnum::Greenland->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Grenada->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Guadeloupe->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Guam->getCurrencySubUnit()
        );
        self::assertEquals(
            'centavo',
            CountryEnum::Guatemala->getCurrencySubUnit()
        );
        self::assertEquals(
            'penny (pl. pence)',
            CountryEnum::Guernsey->getCurrencySubUnit()
        );
        self::assertEquals(
            '',
            CountryEnum::Guinea->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::GuineaBissau->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Guyana->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::Haiti->getCurrencySubUnit()
        );
        self::assertEquals(
            '',
            CountryEnum::HeardIslandandMcDonaldIslands->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::HolySee->getCurrencySubUnit()
        );
        self::assertEquals(
            'centavo',
            CountryEnum::Honduras->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::HongKong->getCurrencySubUnit()
        );
        self::assertEquals(
            '(fillér (inv.))',
            CountryEnum::Hungary->getCurrencySubUnit()
        );
        self::assertEquals(
            '',
            CountryEnum::Iceland->getCurrencySubUnit()
        );
        self::assertEquals(
            'paisa',
            CountryEnum::India->getCurrencySubUnit()
        );
        self::assertEquals(
            'sen (inv.)',
            CountryEnum::Indonesia->getCurrencySubUnit()
        );
        self::assertEquals(
            '(dinar) (IR1)',
            CountryEnum::Iran->getCurrencySubUnit()
        );
        self::assertEquals(
            'fils (inv.)',
            CountryEnum::Iraq->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Ireland->getCurrencySubUnit()
        );
        self::assertEquals(
            'penny (pl. pence)',
            CountryEnum::IsleofMan->getCurrencySubUnit()
        );
        self::assertEquals(
            'agora',
            CountryEnum::Israel->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Italy->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Jamaica->getCurrencySubUnit()
        );
        self::assertEquals(
            '(sen (inv.)) (JP1)',
            CountryEnum::Japan->getCurrencySubUnit()
        );
        self::assertEquals(
            'penny (pl. pence)',
            CountryEnum::Jersey->getCurrencySubUnit()
        );
        self::assertEquals(
            '100 qirsh',
            CountryEnum::Jordan->getCurrencySubUnit()
        );
        self::assertEquals(
            'tiyn',
            CountryEnum::Kazakhstan->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Kenya->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Kiribati->getCurrencySubUnit()
        );
        self::assertEquals(
            '(chun (inv.))',
            CountryEnum::Korea->getCurrencySubUnit()
        );
        self::assertEquals(
            'chun (inv.)',
            CountryEnum::KoreaDR->getCurrencySubUnit()
        );
        self::assertEquals(
            'fils (inv.)',
            CountryEnum::Kuwait->getCurrencySubUnit()
        );
        self::assertEquals(
            'tyiyn',
            CountryEnum::Kyrgyzstan->getCurrencySubUnit()
        );
        self::assertEquals(
            '(at (inv.))',
            CountryEnum::LaoPeoplesDemocraticRepublic->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Latvia->getCurrencySubUnit()
        );
        self::assertEquals(
            '(piastre)',
            CountryEnum::Lebanon->getCurrencySubUnit()
        );
        self::assertEquals(
            'sente',
            CountryEnum::Lesotho->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Liberia->getCurrencySubUnit()
        );
        self::assertEquals(
            'dirham',
            CountryEnum::Libya->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::Liechtenstein->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Lithuania->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Luxembourg->getCurrencySubUnit()
        );
        self::assertEquals(
            'avo',
            CountryEnum::Macao->getCurrencySubUnit()
        );
        self::assertEquals(
            'deni (inv.)',
            CountryEnum::Macedonia->getCurrencySubUnit()
        );
        self::assertEquals(
            'iraimbilanja (inv.)',
            CountryEnum::Madagascar->getCurrencySubUnit()
        );
        self::assertEquals(
            'tambala (inv.)',
            CountryEnum::Malawi->getCurrencySubUnit()
        );
        self::assertEquals(
            'sen (inv.)',
            CountryEnum::Malaysia->getCurrencySubUnit()
        );
        self::assertEquals(
            'laari (inv.)',
            CountryEnum::Maldives->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::Mali->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Malta->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::MarshallIslands->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Martinique->getCurrencySubUnit()
        );
        self::assertEquals(
            'khoum',
            CountryEnum::Mauritania->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Mauritius->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Mayotte->getCurrencySubUnit()
        );
        self::assertEquals(
            'centavo',
            CountryEnum::Mexico->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Micronesia->getCurrencySubUnit()
        );
        self::assertEquals(
            'ban',
            CountryEnum::Moldova->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Monaco->getCurrencySubUnit()
        );
        self::assertEquals(
            'möngö (inv.)',
            CountryEnum::Mongolia->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Montenegro->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Montserrat->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::Morocco->getCurrencySubUnit()
        );
        self::assertEquals(
            'centavo',
            CountryEnum::Mozambique->getCurrencySubUnit()
        );
        self::assertEquals(
            'pya',
            CountryEnum::Myanmar->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Namibia->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Nauru->getCurrencySubUnit()
        );
        self::assertEquals(
            'paisa (inv.)',
            CountryEnum::Nepal->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Netherlands->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::NewCaledonia->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::NewZealand->getCurrencySubUnit()
        );
        self::assertEquals(
            'centavo',
            CountryEnum::Nicaragua->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::Niger->getCurrencySubUnit()
        );
        self::assertEquals(
            'kobo (inv.)',
            CountryEnum::Nigeria->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Niue->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::NorfolkIsland->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::NorthernMarianaIslands->getCurrencySubUnit()
        );
        self::assertEquals(
            'øre (inv.)',
            CountryEnum::Norway->getCurrencySubUnit()
        );
        self::assertEquals(
            'baiza',
            CountryEnum::Oman->getCurrencySubUnit()
        );
        self::assertEquals(
            'paisa',
            CountryEnum::Pakistan->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Palau->getCurrencySubUnit()
        );
        self::assertEquals(
            'agora',
            CountryEnum::Palestine->getCurrencySubUnit()
        );
        self::assertEquals(
            'centésimo',
            CountryEnum::Panama->getCurrencySubUnit()
        );
        self::assertEquals(
            'toea (inv.)',
            CountryEnum::PapuaNewGuinea->getCurrencySubUnit()
        );
        self::assertEquals(
            'céntimo',
            CountryEnum::Paraguay->getCurrencySubUnit()
        );
        self::assertEquals(
            'céntimo',
            CountryEnum::Peru->getCurrencySubUnit()
        );
        self::assertEquals(
            'centavo',
            CountryEnum::Philippines->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Pitcairn->getCurrencySubUnit()
        );
        self::assertEquals(
            'grosz (pl. groszy)',
            CountryEnum::Poland->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Portugal->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::PuertoRico->getCurrencySubUnit()
        );
        self::assertEquals(
            'dirham',
            CountryEnum::Qatar->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Reunion->getCurrencySubUnit()
        );
        self::assertEquals(
            'ban (pl. bani)',
            CountryEnum::Romania->getCurrencySubUnit()
        );
        self::assertEquals(
            'kopek',
            CountryEnum::RussianFederation->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::Rwanda->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::SaintBarthelemy->getCurrencySubUnit()
        );
        self::assertEquals(
            'penny',
            CountryEnum::SaintHelena->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::SaintKittsandNevis->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::SaintLucia->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::SaintMartinFrench->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::SaintPierreandMiquelon->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::SaintVincentandtheGrenadines->getCurrencySubUnit()
        );
        self::assertEquals(
            'sene (inv.)',
            CountryEnum::Samoa->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::SanMarino->getCurrencySubUnit()
        );
        self::assertEquals(
            'centavo',
            CountryEnum::SaoTomeandPrincipe->getCurrencySubUnit()
        );
        self::assertEquals(
            'halala',
            CountryEnum::SaudiArabia->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::Senegal->getCurrencySubUnit()
        );
        self::assertEquals(
            'para (inv.)',
            CountryEnum::Serbia->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Seychelles->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::SierraLeone->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Singapore->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::SintMaartenDutch->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Slovakia->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Slovenia->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::SolomonIslands->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Somalia->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::SouthAfrica->getCurrencySubUnit()
        );
        self::assertEquals(
            '',
            CountryEnum::SouthGeorgiaandtheSouthSandwichIslands->getCurrencySubUnit()
        );
        self::assertEquals(
            'piaster',
            CountryEnum::SouthSudan->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Spain->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::SriLanka->getCurrencySubUnit()
        );
        self::assertEquals(
            'piastre',
            CountryEnum::Sudan->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Suriname->getCurrencySubUnit()
        );
        self::assertEquals(
            'øre (inv.)',
            CountryEnum::SvalbardandJanMayen->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Swaziland->getCurrencySubUnit()
        );
        self::assertEquals(
            'öre (inv.)',
            CountryEnum::Sweden->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::Switzerland->getCurrencySubUnit()
        );
        self::assertEquals(
            'piastre',
            CountryEnum::SyrianArabRepublic->getCurrencySubUnit()
        );
        self::assertEquals(
            'fen (inv.)',
            CountryEnum::Taiwan->getCurrencySubUnit()
        );
        self::assertEquals(
            'diram',
            CountryEnum::Tajikistan->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Tanzania->getCurrencySubUnit()
        );
        self::assertEquals(
            'satang (inv.)',
            CountryEnum::Thailand->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::TimorLeste->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::Togo->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Tokelau->getCurrencySubUnit()
        );
        self::assertEquals(
            'seniti (inv.)',
            CountryEnum::Tonga->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::TrinidadandTobago->getCurrencySubUnit()
        );
        self::assertEquals(
            'millime',
            CountryEnum::Tunisia->getCurrencySubUnit()
        );
        self::assertEquals(
            'kurus (inv.)',
            CountryEnum::Turkey->getCurrencySubUnit()
        );
        self::assertEquals(
            'tenge (inv.)',
            CountryEnum::Turkmenistan->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::TurksandCaicosIslands->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Tuvalu->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Uganda->getCurrencySubUnit()
        );
        self::assertEquals(
            'kopiyka',
            CountryEnum::Ukraine->getCurrencySubUnit()
        );
        self::assertEquals(
            'fils (inv.)',
            CountryEnum::UnitedArabEmirates->getCurrencySubUnit()
        );
        self::assertEquals(
            'penny (pl. pence)',
            CountryEnum::UnitedKingdom->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::UnitedStates->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::UnitedStatesMinorOutlyingIslands->getCurrencySubUnit()
        );
        self::assertEquals(
            'centésimo',
            CountryEnum::Uruguay->getCurrencySubUnit()
        );
        self::assertEquals(
            'tiyin (inv.)',
            CountryEnum::Uzbekistan->getCurrencySubUnit()
        );
        self::assertEquals(
            '',
            CountryEnum::Vanuatu->getCurrencySubUnit()
        );
        self::assertEquals(
            'céntimo',
            CountryEnum::Venezuela->getCurrencySubUnit()
        );
        self::assertEquals(
            '(10 hào',
            CountryEnum::VietNam->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::VirginIslands->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::WallisandFutuna->getCurrencySubUnit()
        );
        self::assertEquals(
            'centime',
            CountryEnum::WesternSahara->getCurrencySubUnit()
        );
        self::assertEquals(
            'fils (inv.)',
            CountryEnum::Yemen->getCurrencySubUnit()
        );
        self::assertEquals(
            'ngwee (inv.)',
            CountryEnum::Zambia->getCurrencySubUnit()
        );
        self::assertEquals(
            'cent',
            CountryEnum::Zimbabwe->getCurrencySubUnit()
        );
    }

    public function testExpectedCurrencySymbol(): void
    {
        self::assertEquals(
            '؋',
            CountryEnum::Afghanistan->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::AlandIslands->getCurrencySymbol()
        );
        self::assertEquals(
            'Lek',
            CountryEnum::Albania->getCurrencySymbol()
        );
        self::assertEquals(
            'DZD',
            CountryEnum::Algeria->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::AmericanSamoa->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Andorra->getCurrencySymbol()
        );
        self::assertEquals(
            'Kz',
            CountryEnum::Angola->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Anguilla->getCurrencySymbol()
        );
        self::assertEquals(
            '',
            CountryEnum::Antarctica->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::AntiguaandBarbuda->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Argentina->getCurrencySymbol()
        );
        self::assertEquals(
            'AMD',
            CountryEnum::Armenia->getCurrencySymbol()
        );
        self::assertEquals(
            'ƒ',
            CountryEnum::Aruba->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Australia->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Austria->getCurrencySymbol()
        );
        self::assertEquals(
            'ман',
            CountryEnum::Azerbaijan->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Bahamas->getCurrencySymbol()
        );
        self::assertEquals(
            'BHD',
            CountryEnum::Bahrain->getCurrencySymbol()
        );
        self::assertEquals(
            'BDT',
            CountryEnum::Bangladesh->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Barbados->getCurrencySymbol()
        );
        self::assertEquals(
            'p.',
            CountryEnum::Belarus->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Belgium->getCurrencySymbol()
        );
        self::assertEquals(
            'BZ$',
            CountryEnum::Belize->getCurrencySymbol()
        );
        self::assertEquals(
            'XOF',
            CountryEnum::Benin->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Bermuda->getCurrencySymbol()
        );
        self::assertEquals(
            'BTN',
            CountryEnum::Bhutan->getCurrencySymbol()
        );
        self::assertEquals(
            '$b',
            CountryEnum::Bolivia->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Bonaire->getCurrencySymbol()
        );
        self::assertEquals(
            'KM',
            CountryEnum::BosniaandHerzegovina->getCurrencySymbol()
        );
        self::assertEquals(
            'P',
            CountryEnum::Botswana->getCurrencySymbol()
        );
        self::assertEquals(
            'kr',
            CountryEnum::BouvetIsland->getCurrencySymbol()
        );
        self::assertEquals(
            'R$',
            CountryEnum::Brazil->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::BritishIndianOceanTerritory->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::BritishVirginIslands->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::BruneiDarussalam->getCurrencySymbol()
        );
        self::assertEquals(
            'лв',
            CountryEnum::Bulgaria->getCurrencySymbol()
        );
        self::assertEquals(
            'XOF',
            CountryEnum::BurkinaFaso->getCurrencySymbol()
        );
        self::assertEquals(
            'BIF',
            CountryEnum::Burundi->getCurrencySymbol()
        );
        self::assertEquals(
            '៛',
            CountryEnum::Cambodia->getCurrencySymbol()
        );
        self::assertEquals(
            'FCF',
            CountryEnum::Cameroon->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Canada->getCurrencySymbol()
        );
        self::assertEquals(
            'CVE',
            CountryEnum::CapeVerde->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::CaymanIslands->getCurrencySymbol()
        );
        self::assertEquals(
            'CFA',
            CountryEnum::CentralAfricanRepublic->getCurrencySymbol()
        );
        self::assertEquals(
            'XAF',
            CountryEnum::Chad->getCurrencySymbol()
        );
        self::assertEquals(
            'CLP',
            CountryEnum::Chile->getCurrencySymbol()
        );
        self::assertEquals(
            '¥',
            CountryEnum::China->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::ChristmasIsland->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::CocosIslands->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Colombia->getCurrencySymbol()
        );
        self::assertEquals(
            'KMF',
            CountryEnum::Comoros->getCurrencySymbol()
        );
        self::assertEquals(
            'FCF',
            CountryEnum::Congo->getCurrencySymbol()
        );
        self::assertEquals(
            'CDF',
            CountryEnum::CongoDR->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::CookIslands->getCurrencySymbol()
        );
        self::assertEquals(
            '₡',
            CountryEnum::CostaRica->getCurrencySymbol()
        );
        self::assertEquals(
            'XOF',
            CountryEnum::CotedIvoire->getCurrencySymbol()
        );
        self::assertEquals(
            'kn',
            CountryEnum::Croatia->getCurrencySymbol()
        );
        self::assertEquals(
            '₱',
            CountryEnum::Cuba->getCurrencySymbol()
        );
        self::assertEquals(
            'ANG',
            CountryEnum::Curacao->getCurrencySymbol()
        );
        self::assertEquals(
            'CYP',
            CountryEnum::Cyprus->getCurrencySymbol()
        );
        self::assertEquals(
            'Kč',
            CountryEnum::Czechia->getCurrencySymbol()
        );
        self::assertEquals(
            'kr',
            CountryEnum::Denmark->getCurrencySymbol()
        );
        self::assertEquals(
            'DJF',
            CountryEnum::Djibouti->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Dominica->getCurrencySymbol()
        );
        self::assertEquals(
            'RD$',
            CountryEnum::DominicanRepublic->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Ecuador->getCurrencySymbol()
        );
        self::assertEquals(
            '£',
            CountryEnum::Egypt->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::ElSalvador->getCurrencySymbol()
        );
        self::assertEquals(
            'FCF',
            CountryEnum::EquatorialGuinea->getCurrencySymbol()
        );
        self::assertEquals(
            'Nfk',
            CountryEnum::Eritrea->getCurrencySymbol()
        );
        self::assertEquals(
            'kr',
            CountryEnum::Estonia->getCurrencySymbol()
        );
        self::assertEquals(
            'ETB',
            CountryEnum::Ethiopia->getCurrencySymbol()
        );
        self::assertEquals(
            '£',
            CountryEnum::FalklandIslands->getCurrencySymbol()
        );
        self::assertEquals(
            'kr',
            CountryEnum::FaroeIslands->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Fiji->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Finland->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::France->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::FrenchGuiana->getCurrencySymbol()
        );
        self::assertEquals(
            'XPF',
            CountryEnum::FrenchPolynesia->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::FrenchSouthernTerritories->getCurrencySymbol()
        );
        self::assertEquals(
            'FCF',
            CountryEnum::Gabon->getCurrencySymbol()
        );
        self::assertEquals(
            'D',
            CountryEnum::Gambia->getCurrencySymbol()
        );
        self::assertEquals(
            'GEL',
            CountryEnum::Georgia->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Germany->getCurrencySymbol()
        );
        self::assertEquals(
            '¢',
            CountryEnum::Ghana->getCurrencySymbol()
        );
        self::assertEquals(
            '£',
            CountryEnum::Gibraltar->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Greece->getCurrencySymbol()
        );
        self::assertEquals(
            'kr',
            CountryEnum::Greenland->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Grenada->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Guadeloupe->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Guam->getCurrencySymbol()
        );
        self::assertEquals(
            'Q',
            CountryEnum::Guatemala->getCurrencySymbol()
        );
        self::assertEquals(
            '£',
            CountryEnum::Guernsey->getCurrencySymbol()
        );
        self::assertEquals(
            'GNF',
            CountryEnum::Guinea->getCurrencySymbol()
        );
        self::assertEquals(
            'XOF',
            CountryEnum::GuineaBissau->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Guyana->getCurrencySymbol()
        );
        self::assertEquals(
            'G',
            CountryEnum::Haiti->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::HeardIslandandMcDonaldIslands->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::HolySee->getCurrencySymbol()
        );
        self::assertEquals(
            'L',
            CountryEnum::Honduras->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::HongKong->getCurrencySymbol()
        );
        self::assertEquals(
            'Ft',
            CountryEnum::Hungary->getCurrencySymbol()
        );
        self::assertEquals(
            'kr',
            CountryEnum::Iceland->getCurrencySymbol()
        );
        self::assertEquals(
            '₹',
            CountryEnum::India->getCurrencySymbol()
        );
        self::assertEquals(
            'Rp',
            CountryEnum::Indonesia->getCurrencySymbol()
        );
        self::assertEquals(
            '﷼',
            CountryEnum::Iran->getCurrencySymbol()
        );
        self::assertEquals(
            'IQD',
            CountryEnum::Iraq->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Ireland->getCurrencySymbol()
        );
        self::assertEquals(
            '£',
            CountryEnum::IsleofMan->getCurrencySymbol()
        );
        self::assertEquals(
            '₪',
            CountryEnum::Israel->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Italy->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Jamaica->getCurrencySymbol()
        );
        self::assertEquals(
            '¥',
            CountryEnum::Japan->getCurrencySymbol()
        );
        self::assertEquals(
            '£',
            CountryEnum::Jersey->getCurrencySymbol()
        );
        self::assertEquals(
            'JOD',
            CountryEnum::Jordan->getCurrencySymbol()
        );
        self::assertEquals(
            'лв',
            CountryEnum::Kazakhstan->getCurrencySymbol()
        );
        self::assertEquals(
            'KES',
            CountryEnum::Kenya->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Kiribati->getCurrencySymbol()
        );
        self::assertEquals(
            '₩',
            CountryEnum::Korea->getCurrencySymbol()
        );
        self::assertEquals(
            '₩',
            CountryEnum::KoreaDR->getCurrencySymbol()
        );
        self::assertEquals(
            'KWD',
            CountryEnum::Kuwait->getCurrencySymbol()
        );
        self::assertEquals(
            'лв',
            CountryEnum::Kyrgyzstan->getCurrencySymbol()
        );
        self::assertEquals(
            '₭',
            CountryEnum::LaoPeoplesDemocraticRepublic->getCurrencySymbol()
        );
        self::assertEquals(
            'Ls',
            CountryEnum::Latvia->getCurrencySymbol()
        );
        self::assertEquals(
            '£',
            CountryEnum::Lebanon->getCurrencySymbol()
        );
        self::assertEquals(
            'L',
            CountryEnum::Lesotho->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Liberia->getCurrencySymbol()
        );
        self::assertEquals(
            'LYD',
            CountryEnum::Libya->getCurrencySymbol()
        );
        self::assertEquals(
            'CHF',
            CountryEnum::Liechtenstein->getCurrencySymbol()
        );
        self::assertEquals(
            'Lt',
            CountryEnum::Lithuania->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Luxembourg->getCurrencySymbol()
        );
        self::assertEquals(
            'MOP',
            CountryEnum::Macao->getCurrencySymbol()
        );
        self::assertEquals(
            'ден',
            CountryEnum::Macedonia->getCurrencySymbol()
        );
        self::assertEquals(
            'MGA',
            CountryEnum::Madagascar->getCurrencySymbol()
        );
        self::assertEquals(
            'MK',
            CountryEnum::Malawi->getCurrencySymbol()
        );
        self::assertEquals(
            'RM',
            CountryEnum::Malaysia->getCurrencySymbol()
        );
        self::assertEquals(
            'Rf',
            CountryEnum::Maldives->getCurrencySymbol()
        );
        self::assertEquals(
            'XOF',
            CountryEnum::Mali->getCurrencySymbol()
        );
        self::assertEquals(
            'MTL',
            CountryEnum::Malta->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::MarshallIslands->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Martinique->getCurrencySymbol()
        );
        self::assertEquals(
            'UM',
            CountryEnum::Mauritania->getCurrencySymbol()
        );
        self::assertEquals(
            '₨',
            CountryEnum::Mauritius->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Mayotte->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Mexico->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Micronesia->getCurrencySymbol()
        );
        self::assertEquals(
            'MDL',
            CountryEnum::Moldova->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Monaco->getCurrencySymbol()
        );
        self::assertEquals(
            '₮',
            CountryEnum::Mongolia->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Montenegro->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Montserrat->getCurrencySymbol()
        );
        self::assertEquals(
            'MAD',
            CountryEnum::Morocco->getCurrencySymbol()
        );
        self::assertEquals(
            'MT',
            CountryEnum::Mozambique->getCurrencySymbol()
        );
        self::assertEquals(
            'K',
            CountryEnum::Myanmar->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Namibia->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Nauru->getCurrencySymbol()
        );
        self::assertEquals(
            '₨',
            CountryEnum::Nepal->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Netherlands->getCurrencySymbol()
        );
        self::assertEquals(
            'XPF',
            CountryEnum::NewCaledonia->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::NewZealand->getCurrencySymbol()
        );
        self::assertEquals(
            'C$',
            CountryEnum::Nicaragua->getCurrencySymbol()
        );
        self::assertEquals(
            'XOF',
            CountryEnum::Niger->getCurrencySymbol()
        );
        self::assertEquals(
            '₦',
            CountryEnum::Nigeria->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Niue->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::NorfolkIsland->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::NorthernMarianaIslands->getCurrencySymbol()
        );
        self::assertEquals(
            'kr',
            CountryEnum::Norway->getCurrencySymbol()
        );
        self::assertEquals(
            '﷼',
            CountryEnum::Oman->getCurrencySymbol()
        );
        self::assertEquals(
            '₨',
            CountryEnum::Pakistan->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Palau->getCurrencySymbol()
        );
        self::assertEquals(
            '₪',
            CountryEnum::Palestine->getCurrencySymbol()
        );
        self::assertEquals(
            'B/.',
            CountryEnum::Panama->getCurrencySymbol()
        );
        self::assertEquals(
            'PGK',
            CountryEnum::PapuaNewGuinea->getCurrencySymbol()
        );
        self::assertEquals(
            'Gs',
            CountryEnum::Paraguay->getCurrencySymbol()
        );
        self::assertEquals(
            'S/.',
            CountryEnum::Peru->getCurrencySymbol()
        );
        self::assertEquals(
            'Php',
            CountryEnum::Philippines->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Pitcairn->getCurrencySymbol()
        );
        self::assertEquals(
            'zł',
            CountryEnum::Poland->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Portugal->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::PuertoRico->getCurrencySymbol()
        );
        self::assertEquals(
            '﷼',
            CountryEnum::Qatar->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Reunion->getCurrencySymbol()
        );
        self::assertEquals(
            'lei',
            CountryEnum::Romania->getCurrencySymbol()
        );
        self::assertEquals(
            'руб',
            CountryEnum::RussianFederation->getCurrencySymbol()
        );
        self::assertEquals(
            'RWF',
            CountryEnum::Rwanda->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::SaintBarthelemy->getCurrencySymbol()
        );
        self::assertEquals(
            '£',
            CountryEnum::SaintHelena->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::SaintKittsandNevis->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::SaintLucia->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::SaintMartinFrench->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::SaintPierreandMiquelon->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::SaintVincentandtheGrenadines->getCurrencySymbol()
        );
        self::assertEquals(
            'WS$',
            CountryEnum::Samoa->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::SanMarino->getCurrencySymbol()
        );
        self::assertEquals(
            'Db',
            CountryEnum::SaoTomeandPrincipe->getCurrencySymbol()
        );
        self::assertEquals(
            '﷼',
            CountryEnum::SaudiArabia->getCurrencySymbol()
        );
        self::assertEquals(
            'XOF',
            CountryEnum::Senegal->getCurrencySymbol()
        );
        self::assertEquals(
            'РСД',
            CountryEnum::Serbia->getCurrencySymbol()
        );
        self::assertEquals(
            '₨',
            CountryEnum::Seychelles->getCurrencySymbol()
        );
        self::assertEquals(
            'Le',
            CountryEnum::SierraLeone->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Singapore->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::SintMaartenDutch->getCurrencySymbol()
        );
        self::assertEquals(
            'Sk',
            CountryEnum::Slovakia->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Slovenia->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::SolomonIslands->getCurrencySymbol()
        );
        self::assertEquals(
            'S',
            CountryEnum::Somalia->getCurrencySymbol()
        );
        self::assertEquals(
            'R',
            CountryEnum::SouthAfrica->getCurrencySymbol()
        );
        self::assertEquals(
            '£',
            CountryEnum::SouthGeorgiaandtheSouthSandwichIslands->getCurrencySymbol()
        );
        self::assertEquals(
            'ج.س.',
            CountryEnum::SouthSudan->getCurrencySymbol()
        );
        self::assertEquals(
            '€',
            CountryEnum::Spain->getCurrencySymbol()
        );
        self::assertEquals(
            '₨',
            CountryEnum::SriLanka->getCurrencySymbol()
        );
        self::assertEquals(
            'ج.س.',
            CountryEnum::Sudan->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Suriname->getCurrencySymbol()
        );
        self::assertEquals(
            'kr',
            CountryEnum::SvalbardandJanMayen->getCurrencySymbol()
        );
        self::assertEquals(
            'SZL',
            CountryEnum::Swaziland->getCurrencySymbol()
        );
        self::assertEquals(
            'kr',
            CountryEnum::Sweden->getCurrencySymbol()
        );
        self::assertEquals(
            'CHF',
            CountryEnum::Switzerland->getCurrencySymbol()
        );
        self::assertEquals(
            '£',
            CountryEnum::SyrianArabRepublic->getCurrencySymbol()
        );
        self::assertEquals(
            'NT$',
            CountryEnum::Taiwan->getCurrencySymbol()
        );
        self::assertEquals(
            'TJS',
            CountryEnum::Tajikistan->getCurrencySymbol()
        );
        self::assertEquals(
            'TZS',
            CountryEnum::Tanzania->getCurrencySymbol()
        );
        self::assertEquals(
            '฿',
            CountryEnum::Thailand->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::TimorLeste->getCurrencySymbol()
        );
        self::assertEquals(
            'XOF',
            CountryEnum::Togo->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Tokelau->getCurrencySymbol()
        );
        self::assertEquals(
            'T$',
            CountryEnum::Tonga->getCurrencySymbol()
        );
        self::assertEquals(
            'TT$',
            CountryEnum::TrinidadandTobago->getCurrencySymbol()
        );
        self::assertEquals(
            'TND',
            CountryEnum::Tunisia->getCurrencySymbol()
        );
        self::assertEquals(
            '₺',
            CountryEnum::Turkey->getCurrencySymbol()
        );
        self::assertEquals(
            'm',
            CountryEnum::Turkmenistan->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::TurksandCaicosIslands->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::Tuvalu->getCurrencySymbol()
        );
        self::assertEquals(
            'UGX',
            CountryEnum::Uganda->getCurrencySymbol()
        );
        self::assertEquals(
            '₴',
            CountryEnum::Ukraine->getCurrencySymbol()
        );
        self::assertEquals(
            'AED',
            CountryEnum::UnitedArabEmirates->getCurrencySymbol()
        );
        self::assertEquals(
            '£',
            CountryEnum::UnitedKingdom->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::UnitedStates->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::UnitedStatesMinorOutlyingIslands->getCurrencySymbol()
        );
        self::assertEquals(
            '$U',
            CountryEnum::Uruguay->getCurrencySymbol()
        );
        self::assertEquals(
            'лв',
            CountryEnum::Uzbekistan->getCurrencySymbol()
        );
        self::assertEquals(
            'Vt',
            CountryEnum::Vanuatu->getCurrencySymbol()
        );
        self::assertEquals(
            'Bs',
            CountryEnum::Venezuela->getCurrencySymbol()
        );
        self::assertEquals(
            '₫',
            CountryEnum::VietNam->getCurrencySymbol()
        );
        self::assertEquals(
            '$',
            CountryEnum::VirginIslands->getCurrencySymbol()
        );
        self::assertEquals(
            'XPF',
            CountryEnum::WallisandFutuna->getCurrencySymbol()
        );
        self::assertEquals(
            'MAD',
            CountryEnum::WesternSahara->getCurrencySymbol()
        );
        self::assertEquals(
            '﷼',
            CountryEnum::Yemen->getCurrencySymbol()
        );
        self::assertEquals(
            'ZK',
            CountryEnum::Zambia->getCurrencySymbol()
        );
        self::assertEquals(
            'Z$',
            CountryEnum::Zimbabwe->getCurrencySymbol()
        );
    }

    public function testExpectedFullName(): void
    {
        self::assertEquals(
            'Islamic Republic of Afghanistan',
            CountryEnum::Afghanistan->getFullName()
        );
        self::assertEquals(
            'Åland Islands',
            CountryEnum::AlandIslands->getFullName()
        );
        self::assertEquals(
            'Republic of Albania',
            CountryEnum::Albania->getFullName()
        );
        self::assertEquals(
            'People’s Democratic Republic of Algeria',
            CountryEnum::Algeria->getFullName()
        );
        self::assertEquals(
            'Territory of American',
            CountryEnum::AmericanSamoa->getFullName()
        );
        self::assertEquals(
            'Principality of Andorra',
            CountryEnum::Andorra->getFullName()
        );
        self::assertEquals(
            'Republic of Angola',
            CountryEnum::Angola->getFullName()
        );
        self::assertEquals(
            'Anguilla',
            CountryEnum::Anguilla->getFullName()
        );
        self::assertEquals(
            'Antarctica',
            CountryEnum::Antarctica->getFullName()
        );
        self::assertEquals(
            'Antigua and Barbuda',
            CountryEnum::AntiguaandBarbuda->getFullName()
        );
        self::assertEquals(
            'Argentine Republic',
            CountryEnum::Argentina->getFullName()
        );
        self::assertEquals(
            'Republic of Armenia',
            CountryEnum::Armenia->getFullName()
        );
        self::assertEquals(
            'Aruba',
            CountryEnum::Aruba->getFullName()
        );
        self::assertEquals(
            'Commonwealth of Australia',
            CountryEnum::Australia->getFullName()
        );
        self::assertEquals(
            'Republic of Austria',
            CountryEnum::Austria->getFullName()
        );
        self::assertEquals(
            'Republic of Azerbaijan',
            CountryEnum::Azerbaijan->getFullName()
        );
        self::assertEquals(
            'Commonwealth of the Bahamas',
            CountryEnum::Bahamas->getFullName()
        );
        self::assertEquals(
            'Kingdom of Bahrain',
            CountryEnum::Bahrain->getFullName()
        );
        self::assertEquals(
            'People’s Republic of Bangladesh',
            CountryEnum::Bangladesh->getFullName()
        );
        self::assertEquals(
            'Barbados',
            CountryEnum::Barbados->getFullName()
        );
        self::assertEquals(
            'Republic of Belarus',
            CountryEnum::Belarus->getFullName()
        );
        self::assertEquals(
            'Kingdom of Belgium',
            CountryEnum::Belgium->getFullName()
        );
        self::assertEquals(
            'Belize',
            CountryEnum::Belize->getFullName()
        );
        self::assertEquals(
            'Republic of Benin',
            CountryEnum::Benin->getFullName()
        );
        self::assertEquals(
            'Bermuda',
            CountryEnum::Bermuda->getFullName()
        );
        self::assertEquals(
            'Kingdom of Bhutan',
            CountryEnum::Bhutan->getFullName()
        );
        self::assertEquals(
            'Plurinational State of Bolivia',
            CountryEnum::Bolivia->getFullName()
        );
        self::assertEquals(
            'Bonaire',
            CountryEnum::Bonaire->getFullName()
        );
        self::assertEquals(
            'Bosnia and Herzegovina',
            CountryEnum::BosniaandHerzegovina->getFullName()
        );
        self::assertEquals(
            'Republic of Botswana',
            CountryEnum::Botswana->getFullName()
        );
        self::assertEquals(
            'Bouvet Island',
            CountryEnum::BouvetIsland->getFullName()
        );
        self::assertEquals(
            'Federative Republic of Brazil',
            CountryEnum::Brazil->getFullName()
        );
        self::assertEquals(
            'British Indian Ocean Territory',
            CountryEnum::BritishIndianOceanTerritory->getFullName()
        );
        self::assertEquals(
            'British Virgin Islands',
            CountryEnum::BritishVirginIslands->getFullName()
        );
        self::assertEquals(
            'Brunei Darussalam',
            CountryEnum::BruneiDarussalam->getFullName()
        );
        self::assertEquals(
            'Republic of Bulgaria',
            CountryEnum::Bulgaria->getFullName()
        );
        self::assertEquals(
            'Burkina Faso',
            CountryEnum::BurkinaFaso->getFullName()
        );
        self::assertEquals(
            'Republic of Burundi',
            CountryEnum::Burundi->getFullName()
        );
        self::assertEquals(
            'Kingdom of Cambodia',
            CountryEnum::Cambodia->getFullName()
        );
        self::assertEquals(
            'Republic of Cameroon',
            CountryEnum::Cameroon->getFullName()
        );
        self::assertEquals(
            'Canada',
            CountryEnum::Canada->getFullName()
        );
        self::assertEquals(
            'Republic of Cape Verde',
            CountryEnum::CapeVerde->getFullName()
        );
        self::assertEquals(
            'Cayman Islands',
            CountryEnum::CaymanIslands->getFullName()
        );
        self::assertEquals(
            'Central African Republic',
            CountryEnum::CentralAfricanRepublic->getFullName()
        );
        self::assertEquals(
            'Republic of Chad',
            CountryEnum::Chad->getFullName()
        );
        self::assertEquals(
            'Republic of Chile',
            CountryEnum::Chile->getFullName()
        );
        self::assertEquals(
            'People’s Republic of China',
            CountryEnum::China->getFullName()
        );
        self::assertEquals(
            'Christmas Island Territory',
            CountryEnum::ChristmasIsland->getFullName()
        );
        self::assertEquals(
            'Territory of Cocos (Keeling) Islands',
            CountryEnum::CocosIslands->getFullName()
        );
        self::assertEquals(
            'Republic of Colombia',
            CountryEnum::Colombia->getFullName()
        );
        self::assertEquals(
            'Union of the Comoros',
            CountryEnum::Comoros->getFullName()
        );
        self::assertEquals(
            'Republic of the Congo',
            CountryEnum::Congo->getFullName()
        );
        self::assertEquals(
            'Democratic Republic of the Congo',
            CountryEnum::CongoDR->getFullName()
        );
        self::assertEquals(
            'Cook Islands',
            CountryEnum::CookIslands->getFullName()
        );
        self::assertEquals(
            'Republic of Costa Rica',
            CountryEnum::CostaRica->getFullName()
        );
        self::assertEquals(
            'Republic of Côte d’Ivoire',
            CountryEnum::CotedIvoire->getFullName()
        );
        self::assertEquals(
            'Republic of Croatia',
            CountryEnum::Croatia->getFullName()
        );
        self::assertEquals(
            'Republic of Cuba',
            CountryEnum::Cuba->getFullName()
        );
        self::assertEquals(
            'Curaçao',
            CountryEnum::Curacao->getFullName()
        );
        self::assertEquals(
            'Republic of Cyprus',
            CountryEnum::Cyprus->getFullName()
        );
        self::assertEquals(
            'Czech Republic',
            CountryEnum::Czechia->getFullName()
        );
        self::assertEquals(
            'Kingdom of Denmark',
            CountryEnum::Denmark->getFullName()
        );
        self::assertEquals(
            'Republic of Djibouti',
            CountryEnum::Djibouti->getFullName()
        );
        self::assertEquals(
            'Commonwealth of Dominica',
            CountryEnum::Dominica->getFullName()
        );
        self::assertEquals(
            'Dominican Republic',
            CountryEnum::DominicanRepublic->getFullName()
        );
        self::assertEquals(
            'Republic of Ecuador',
            CountryEnum::Ecuador->getFullName()
        );
        self::assertEquals(
            'Arab Republic of Egypt',
            CountryEnum::Egypt->getFullName()
        );
        self::assertEquals(
            'Republic of El Salvador',
            CountryEnum::ElSalvador->getFullName()
        );
        self::assertEquals(
            'Republic of Equatorial Guinea',
            CountryEnum::EquatorialGuinea->getFullName()
        );
        self::assertEquals(
            'State of Eritrea',
            CountryEnum::Eritrea->getFullName()
        );
        self::assertEquals(
            'Republic of Estonia',
            CountryEnum::Estonia->getFullName()
        );
        self::assertEquals(
            'Federal Democratic Republic of Ethiopia',
            CountryEnum::Ethiopia->getFullName()
        );
        self::assertEquals(
            'Falkland Islands',
            CountryEnum::FalklandIslands->getFullName()
        );
        self::assertEquals(
            'Faeroe Islands',
            CountryEnum::FaroeIslands->getFullName()
        );
        self::assertEquals(
            'Republic of Fiji',
            CountryEnum::Fiji->getFullName()
        );
        self::assertEquals(
            'Republic of Finland',
            CountryEnum::Finland->getFullName()
        );
        self::assertEquals(
            'French Republic',
            CountryEnum::France->getFullName()
        );
        self::assertEquals(
            'French Guiana',
            CountryEnum::FrenchGuiana->getFullName()
        );
        self::assertEquals(
            'French Polynesia',
            CountryEnum::FrenchPolynesia->getFullName()
        );
        self::assertEquals(
            'French Southern and Antarctic Lands',
            CountryEnum::FrenchSouthernTerritories->getFullName()
        );
        self::assertEquals(
            'Gabonese Republic',
            CountryEnum::Gabon->getFullName()
        );
        self::assertEquals(
            'Republic of the Gambia',
            CountryEnum::Gambia->getFullName()
        );
        self::assertEquals(
            'Georgia',
            CountryEnum::Georgia->getFullName()
        );
        self::assertEquals(
            'Federal Republic of Germany',
            CountryEnum::Germany->getFullName()
        );
        self::assertEquals(
            'Republic of Ghana',
            CountryEnum::Ghana->getFullName()
        );
        self::assertEquals(
            'Gibraltar',
            CountryEnum::Gibraltar->getFullName()
        );
        self::assertEquals(
            'Hellenic Republic',
            CountryEnum::Greece->getFullName()
        );
        self::assertEquals(
            'Greenland',
            CountryEnum::Greenland->getFullName()
        );
        self::assertEquals(
            'Grenada',
            CountryEnum::Grenada->getFullName()
        );
        self::assertEquals(
            'Guadeloupe',
            CountryEnum::Guadeloupe->getFullName()
        );
        self::assertEquals(
            'Territory of Guam',
            CountryEnum::Guam->getFullName()
        );
        self::assertEquals(
            'Republic of Guatemala',
            CountryEnum::Guatemala->getFullName()
        );
        self::assertEquals(
            'Bailiwick of Guernsey',
            CountryEnum::Guernsey->getFullName()
        );
        self::assertEquals(
            'Republic of Guinea',
            CountryEnum::Guinea->getFullName()
        );
        self::assertEquals(
            'Republic of Guinea-Bissau',
            CountryEnum::GuineaBissau->getFullName()
        );
        self::assertEquals(
            'Cooperative Republic of Guyana',
            CountryEnum::Guyana->getFullName()
        );
        self::assertEquals(
            'Republic of Haiti',
            CountryEnum::Haiti->getFullName()
        );
        self::assertEquals(
            'Territory of Heard Island and McDonald Islands',
            CountryEnum::HeardIslandandMcDonaldIslands->getFullName()
        );
        self::assertEquals(
            'the Holy See/ Vatican City State',
            CountryEnum::HolySee->getFullName()
        );
        self::assertEquals(
            'Republic of Honduras',
            CountryEnum::Honduras->getFullName()
        );
        self::assertEquals(
            'Hong Kong Special Administrative Region of the People’s Republic of China (HK2)',
            CountryEnum::HongKong->getFullName()
        );
        self::assertEquals(
            'Republic of Hungary',
            CountryEnum::Hungary->getFullName()
        );
        self::assertEquals(
            'Republic of Iceland',
            CountryEnum::Iceland->getFullName()
        );
        self::assertEquals(
            'Republic of India',
            CountryEnum::India->getFullName()
        );
        self::assertEquals(
            'Republic of Indonesia',
            CountryEnum::Indonesia->getFullName()
        );
        self::assertEquals(
            'Islamic Republic of Iran',
            CountryEnum::Iran->getFullName()
        );
        self::assertEquals(
            'Republic of Iraq',
            CountryEnum::Iraq->getFullName()
        );
        self::assertEquals(
            'Ireland (IE1)',
            CountryEnum::Ireland->getFullName()
        );
        self::assertEquals(
            'Isle of Man',
            CountryEnum::IsleofMan->getFullName()
        );
        self::assertEquals(
            'State of Israel',
            CountryEnum::Israel->getFullName()
        );
        self::assertEquals(
            'Italian Republic',
            CountryEnum::Italy->getFullName()
        );
        self::assertEquals(
            'Jamaica',
            CountryEnum::Jamaica->getFullName()
        );
        self::assertEquals(
            'Japan',
            CountryEnum::Japan->getFullName()
        );
        self::assertEquals(
            'Bailiwick of Jersey',
            CountryEnum::Jersey->getFullName()
        );
        self::assertEquals(
            'Hashemite Kingdom of Jordan',
            CountryEnum::Jordan->getFullName()
        );
        self::assertEquals(
            'Republic of Kazakhstan',
            CountryEnum::Kazakhstan->getFullName()
        );
        self::assertEquals(
            'Republic of Kenya',
            CountryEnum::Kenya->getFullName()
        );
        self::assertEquals(
            'Republic of Kiribati',
            CountryEnum::Kiribati->getFullName()
        );
        self::assertEquals(
            'Republic of Korea',
            CountryEnum::Korea->getFullName()
        );
        self::assertEquals(
            'Democratic People’s Republic of Korea',
            CountryEnum::KoreaDR->getFullName()
        );
        self::assertEquals(
            'State of Kuwait',
            CountryEnum::Kuwait->getFullName()
        );
        self::assertEquals(
            'Kyrgyz Republic',
            CountryEnum::Kyrgyzstan->getFullName()
        );
        self::assertEquals(
            'Lao People’s Democratic Republic',
            CountryEnum::LaoPeoplesDemocraticRepublic->getFullName()
        );
        self::assertEquals(
            'Republic of Latvia',
            CountryEnum::Latvia->getFullName()
        );
        self::assertEquals(
            'Lebanese Republic',
            CountryEnum::Lebanon->getFullName()
        );
        self::assertEquals(
            'Kingdom of Lesotho',
            CountryEnum::Lesotho->getFullName()
        );
        self::assertEquals(
            'Republic of Liberia',
            CountryEnum::Liberia->getFullName()
        );
        self::assertEquals(
            'Socialist People’s Libyan Arab Jamahiriya',
            CountryEnum::Libya->getFullName()
        );
        self::assertEquals(
            'Principality of Liechtenstein',
            CountryEnum::Liechtenstein->getFullName()
        );
        self::assertEquals(
            'Republic of Lithuania',
            CountryEnum::Lithuania->getFullName()
        );
        self::assertEquals(
            'Grand Duchy of Luxembourg',
            CountryEnum::Luxembourg->getFullName()
        );
        self::assertEquals(
            'Macao Special Administrative Region of the People’s Republic of China (MO2)',
            CountryEnum::Macao->getFullName()
        );
        self::assertEquals(
            'the former Yugoslav Republic of Macedonia',
            CountryEnum::Macedonia->getFullName()
        );
        self::assertEquals(
            'Republic of Madagascar',
            CountryEnum::Madagascar->getFullName()
        );
        self::assertEquals(
            'Republic of Malawi',
            CountryEnum::Malawi->getFullName()
        );
        self::assertEquals(
            'Malaysia',
            CountryEnum::Malaysia->getFullName()
        );
        self::assertEquals(
            'Republic of Maldives',
            CountryEnum::Maldives->getFullName()
        );
        self::assertEquals(
            'Republic of Mali',
            CountryEnum::Mali->getFullName()
        );
        self::assertEquals(
            'Republic of Malta',
            CountryEnum::Malta->getFullName()
        );
        self::assertEquals(
            'Republic of the Marshall Islands',
            CountryEnum::MarshallIslands->getFullName()
        );
        self::assertEquals(
            'Martinique',
            CountryEnum::Martinique->getFullName()
        );
        self::assertEquals(
            'Islamic Republic of Mauritania',
            CountryEnum::Mauritania->getFullName()
        );
        self::assertEquals(
            'Republic of Mauritius',
            CountryEnum::Mauritius->getFullName()
        );
        self::assertEquals(
            'Departmental Collectivity of Mayotte',
            CountryEnum::Mayotte->getFullName()
        );
        self::assertEquals(
            'United Mexican States',
            CountryEnum::Mexico->getFullName()
        );
        self::assertEquals(
            'Federated States of Micronesia',
            CountryEnum::Micronesia->getFullName()
        );
        self::assertEquals(
            'Republic of Moldova',
            CountryEnum::Moldova->getFullName()
        );
        self::assertEquals(
            'Principality of Monaco',
            CountryEnum::Monaco->getFullName()
        );
        self::assertEquals(
            'Mongolia',
            CountryEnum::Mongolia->getFullName()
        );
        self::assertEquals(
            'Montenegro',
            CountryEnum::Montenegro->getFullName()
        );
        self::assertEquals(
            'Montserrat',
            CountryEnum::Montserrat->getFullName()
        );
        self::assertEquals(
            'Kingdom of Morocco',
            CountryEnum::Morocco->getFullName()
        );
        self::assertEquals(
            'Republic of Mozambique',
            CountryEnum::Mozambique->getFullName()
        );
        self::assertEquals(
            'Union of Myanmar/',
            CountryEnum::Myanmar->getFullName()
        );
        self::assertEquals(
            'Republic of Namibia',
            CountryEnum::Namibia->getFullName()
        );
        self::assertEquals(
            'Republic of Nauru',
            CountryEnum::Nauru->getFullName()
        );
        self::assertEquals(
            'Nepal',
            CountryEnum::Nepal->getFullName()
        );
        self::assertEquals(
            'Kingdom of the Netherlands',
            CountryEnum::Netherlands->getFullName()
        );
        self::assertEquals(
            'New Caledonia',
            CountryEnum::NewCaledonia->getFullName()
        );
        self::assertEquals(
            'New Zealand',
            CountryEnum::NewZealand->getFullName()
        );
        self::assertEquals(
            'Republic of Nicaragua',
            CountryEnum::Nicaragua->getFullName()
        );
        self::assertEquals(
            'Republic of Niger',
            CountryEnum::Niger->getFullName()
        );
        self::assertEquals(
            'Federal Republic of Nigeria',
            CountryEnum::Nigeria->getFullName()
        );
        self::assertEquals(
            'Niue',
            CountryEnum::Niue->getFullName()
        );
        self::assertEquals(
            'Territory of Norfolk Island',
            CountryEnum::NorfolkIsland->getFullName()
        );
        self::assertEquals(
            'Commonwealth of the Northern Mariana Islands',
            CountryEnum::NorthernMarianaIslands->getFullName()
        );
        self::assertEquals(
            'Kingdom of Norway',
            CountryEnum::Norway->getFullName()
        );
        self::assertEquals(
            'Sultanate of Oman',
            CountryEnum::Oman->getFullName()
        );
        self::assertEquals(
            'Islamic Republic of Pakistan',
            CountryEnum::Pakistan->getFullName()
        );
        self::assertEquals(
            'Republic of Palau',
            CountryEnum::Palau->getFullName()
        );
        self::assertEquals(
            'State of Palestine',
            CountryEnum::Palestine->getFullName()
        );
        self::assertEquals(
            'Republic of Panama',
            CountryEnum::Panama->getFullName()
        );
        self::assertEquals(
            'Independent State of Papua New Guinea',
            CountryEnum::PapuaNewGuinea->getFullName()
        );
        self::assertEquals(
            'Republic of Paraguay',
            CountryEnum::Paraguay->getFullName()
        );
        self::assertEquals(
            'Republic of Peru',
            CountryEnum::Peru->getFullName()
        );
        self::assertEquals(
            'Republic of the Philippines',
            CountryEnum::Philippines->getFullName()
        );
        self::assertEquals(
            'Pitcairn Islands',
            CountryEnum::Pitcairn->getFullName()
        );
        self::assertEquals(
            'Republic of Poland',
            CountryEnum::Poland->getFullName()
        );
        self::assertEquals(
            'Portuguese Republic',
            CountryEnum::Portugal->getFullName()
        );
        self::assertEquals(
            'Commonwealth of Puerto Rico',
            CountryEnum::PuertoRico->getFullName()
        );
        self::assertEquals(
            'State of Qatar',
            CountryEnum::Qatar->getFullName()
        );
        self::assertEquals(
            'Réunion',
            CountryEnum::Reunion->getFullName()
        );
        self::assertEquals(
            'Romania',
            CountryEnum::Romania->getFullName()
        );
        self::assertEquals(
            'Russian Federation',
            CountryEnum::RussianFederation->getFullName()
        );
        self::assertEquals(
            'Republic of Rwanda',
            CountryEnum::Rwanda->getFullName()
        );
        self::assertEquals(
            'Collectivity of Saint Barthélemy',
            CountryEnum::SaintBarthelemy->getFullName()
        );
        self::assertEquals(
            'Saint Helena, Ascension and Tristan da Cunha',
            CountryEnum::SaintHelena->getFullName()
        );
        self::assertEquals(
            'Federation of Saint Kitts and Nevis',
            CountryEnum::SaintKittsandNevis->getFullName()
        );
        self::assertEquals(
            'Saint Lucia',
            CountryEnum::SaintLucia->getFullName()
        );
        self::assertEquals(
            'Collectivity of Saint Martin',
            CountryEnum::SaintMartinFrench->getFullName()
        );
        self::assertEquals(
            'Territorial Collectivity of Saint Pierre and Miquelon',
            CountryEnum::SaintPierreandMiquelon->getFullName()
        );
        self::assertEquals(
            'Saint Vincent and the Grenadines',
            CountryEnum::SaintVincentandtheGrenadines->getFullName()
        );
        self::assertEquals(
            'Independent State of Samoa',
            CountryEnum::Samoa->getFullName()
        );
        self::assertEquals(
            'Republic of San Marino',
            CountryEnum::SanMarino->getFullName()
        );
        self::assertEquals(
            'Democratic Republic of São Tomé and Príncipe',
            CountryEnum::SaoTomeandPrincipe->getFullName()
        );
        self::assertEquals(
            'Kingdom of Saudi Arabia',
            CountryEnum::SaudiArabia->getFullName()
        );
        self::assertEquals(
            'Republic of Senegal',
            CountryEnum::Senegal->getFullName()
        );
        self::assertEquals(
            'Republic of Serbia',
            CountryEnum::Serbia->getFullName()
        );
        self::assertEquals(
            'Republic of Seychelles',
            CountryEnum::Seychelles->getFullName()
        );
        self::assertEquals(
            'Republic of Sierra Leone',
            CountryEnum::SierraLeone->getFullName()
        );
        self::assertEquals(
            'Republic of Singapore',
            CountryEnum::Singapore->getFullName()
        );
        self::assertEquals(
            'Sint Maarten',
            CountryEnum::SintMaartenDutch->getFullName()
        );
        self::assertEquals(
            'Slovak Republic',
            CountryEnum::Slovakia->getFullName()
        );
        self::assertEquals(
            'Republic of Slovenia',
            CountryEnum::Slovenia->getFullName()
        );
        self::assertEquals(
            'Solomon Islands',
            CountryEnum::SolomonIslands->getFullName()
        );
        self::assertEquals(
            'Somali Republic',
            CountryEnum::Somalia->getFullName()
        );
        self::assertEquals(
            'Republic of South Africa',
            CountryEnum::SouthAfrica->getFullName()
        );
        self::assertEquals(
            'South Georgia and the South Sandwich Islands',
            CountryEnum::SouthGeorgiaandtheSouthSandwichIslands->getFullName()
        );
        self::assertEquals(
            'Republic of South Sudan',
            CountryEnum::SouthSudan->getFullName()
        );
        self::assertEquals(
            'Kingdom of Spain',
            CountryEnum::Spain->getFullName()
        );
        self::assertEquals(
            'Democratic Socialist Republic of Sri Lanka',
            CountryEnum::SriLanka->getFullName()
        );
        self::assertEquals(
            'Republic of the Sudan',
            CountryEnum::Sudan->getFullName()
        );
        self::assertEquals(
            'Republic of Suriname',
            CountryEnum::Suriname->getFullName()
        );
        self::assertEquals(
            'Svalbard and Jan Mayen',
            CountryEnum::SvalbardandJanMayen->getFullName()
        );
        self::assertEquals(
            'Kingdom of Swaziland',
            CountryEnum::Swaziland->getFullName()
        );
        self::assertEquals(
            'Kingdom of Sweden',
            CountryEnum::Sweden->getFullName()
        );
        self::assertEquals(
            'Swiss Confederation',
            CountryEnum::Switzerland->getFullName()
        );
        self::assertEquals(
            'Syrian Arab Republic',
            CountryEnum::SyrianArabRepublic->getFullName()
        );
        self::assertEquals(
            'Republic of China, Taiwan (TW1)',
            CountryEnum::Taiwan->getFullName()
        );
        self::assertEquals(
            'Republic of Tajikistan',
            CountryEnum::Tajikistan->getFullName()
        );
        self::assertEquals(
            'United Republic of Tanzania',
            CountryEnum::Tanzania->getFullName()
        );
        self::assertEquals(
            'Kingdom of Thailand',
            CountryEnum::Thailand->getFullName()
        );
        self::assertEquals(
            'Democratic Republic of East Timor',
            CountryEnum::TimorLeste->getFullName()
        );
        self::assertEquals(
            'Togolese Republic',
            CountryEnum::Togo->getFullName()
        );
        self::assertEquals(
            'Tokelau',
            CountryEnum::Tokelau->getFullName()
        );
        self::assertEquals(
            'Kingdom of Tonga',
            CountryEnum::Tonga->getFullName()
        );
        self::assertEquals(
            'Republic of Trinidad and Tobago',
            CountryEnum::TrinidadandTobago->getFullName()
        );
        self::assertEquals(
            'Republic of Tunisia',
            CountryEnum::Tunisia->getFullName()
        );
        self::assertEquals(
            'Republic of Turkey',
            CountryEnum::Turkey->getFullName()
        );
        self::assertEquals(
            'Turkmenistan',
            CountryEnum::Turkmenistan->getFullName()
        );
        self::assertEquals(
            'Turks and Caicos Islands',
            CountryEnum::TurksandCaicosIslands->getFullName()
        );
        self::assertEquals(
            'Tuvalu',
            CountryEnum::Tuvalu->getFullName()
        );
        self::assertEquals(
            'Republic of Uganda',
            CountryEnum::Uganda->getFullName()
        );
        self::assertEquals(
            'Ukraine',
            CountryEnum::Ukraine->getFullName()
        );
        self::assertEquals(
            'United Arab Emirates',
            CountryEnum::UnitedArabEmirates->getFullName()
        );
        self::assertEquals(
            'United Kingdom of Great Britain and Northern Ireland',
            CountryEnum::UnitedKingdom->getFullName()
        );
        self::assertEquals(
            'United States of America',
            CountryEnum::UnitedStates->getFullName()
        );
        self::assertEquals(
            'United States Minor Outlying Islands',
            CountryEnum::UnitedStatesMinorOutlyingIslands->getFullName()
        );
        self::assertEquals(
            'Eastern Republic of Uruguay',
            CountryEnum::Uruguay->getFullName()
        );
        self::assertEquals(
            'Republic of Uzbekistan',
            CountryEnum::Uzbekistan->getFullName()
        );
        self::assertEquals(
            'Republic of Vanuatu',
            CountryEnum::Vanuatu->getFullName()
        );
        self::assertEquals(
            'Bolivarian Republic of Venezuela',
            CountryEnum::Venezuela->getFullName()
        );
        self::assertEquals(
            'Socialist Republic of Vietnam',
            CountryEnum::VietNam->getFullName()
        );
        self::assertEquals(
            'United States Virgin Islands',
            CountryEnum::VirginIslands->getFullName()
        );
        self::assertEquals(
            'Wallis and Futuna',
            CountryEnum::WallisandFutuna->getFullName()
        );
        self::assertEquals(
            'Western Sahara',
            CountryEnum::WesternSahara->getFullName()
        );
        self::assertEquals(
            'Republic of Yemen',
            CountryEnum::Yemen->getFullName()
        );
        self::assertEquals(
            'Republic of Zambia',
            CountryEnum::Zambia->getFullName()
        );
        self::assertEquals(
            'Republic of Zimbabwe',
            CountryEnum::Zimbabwe->getFullName()
        );
    }

    public function testExpectedIso31662(): void
    {
        self::assertEquals(
            'AF',
            CountryEnum::Afghanistan->getIso31662()
        );
        self::assertEquals(
            'AX',
            CountryEnum::AlandIslands->getIso31662()
        );
        self::assertEquals(
            'AL',
            CountryEnum::Albania->getIso31662()
        );
        self::assertEquals(
            'DZ',
            CountryEnum::Algeria->getIso31662()
        );
        self::assertEquals(
            'AS',
            CountryEnum::AmericanSamoa->getIso31662()
        );
        self::assertEquals(
            'AD',
            CountryEnum::Andorra->getIso31662()
        );
        self::assertEquals(
            'AO',
            CountryEnum::Angola->getIso31662()
        );
        self::assertEquals(
            'AI',
            CountryEnum::Anguilla->getIso31662()
        );
        self::assertEquals(
            'AQ',
            CountryEnum::Antarctica->getIso31662()
        );
        self::assertEquals(
            'AG',
            CountryEnum::AntiguaandBarbuda->getIso31662()
        );
        self::assertEquals(
            'AR',
            CountryEnum::Argentina->getIso31662()
        );
        self::assertEquals(
            'AM',
            CountryEnum::Armenia->getIso31662()
        );
        self::assertEquals(
            'AW',
            CountryEnum::Aruba->getIso31662()
        );
        self::assertEquals(
            'AU',
            CountryEnum::Australia->getIso31662()
        );
        self::assertEquals(
            'AT',
            CountryEnum::Austria->getIso31662()
        );
        self::assertEquals(
            'AZ',
            CountryEnum::Azerbaijan->getIso31662()
        );
        self::assertEquals(
            'BS',
            CountryEnum::Bahamas->getIso31662()
        );
        self::assertEquals(
            'BH',
            CountryEnum::Bahrain->getIso31662()
        );
        self::assertEquals(
            'BD',
            CountryEnum::Bangladesh->getIso31662()
        );
        self::assertEquals(
            'BB',
            CountryEnum::Barbados->getIso31662()
        );
        self::assertEquals(
            'BY',
            CountryEnum::Belarus->getIso31662()
        );
        self::assertEquals(
            'BE',
            CountryEnum::Belgium->getIso31662()
        );
        self::assertEquals(
            'BZ',
            CountryEnum::Belize->getIso31662()
        );
        self::assertEquals(
            'BJ',
            CountryEnum::Benin->getIso31662()
        );
        self::assertEquals(
            'BM',
            CountryEnum::Bermuda->getIso31662()
        );
        self::assertEquals(
            'BT',
            CountryEnum::Bhutan->getIso31662()
        );
        self::assertEquals(
            'BO',
            CountryEnum::Bolivia->getIso31662()
        );
        self::assertEquals(
            'BQ',
            CountryEnum::Bonaire->getIso31662()
        );
        self::assertEquals(
            'BA',
            CountryEnum::BosniaandHerzegovina->getIso31662()
        );
        self::assertEquals(
            'BW',
            CountryEnum::Botswana->getIso31662()
        );
        self::assertEquals(
            'BV',
            CountryEnum::BouvetIsland->getIso31662()
        );
        self::assertEquals(
            'BR',
            CountryEnum::Brazil->getIso31662()
        );
        self::assertEquals(
            'IO',
            CountryEnum::BritishIndianOceanTerritory->getIso31662()
        );
        self::assertEquals(
            'VG',
            CountryEnum::BritishVirginIslands->getIso31662()
        );
        self::assertEquals(
            'BN',
            CountryEnum::BruneiDarussalam->getIso31662()
        );
        self::assertEquals(
            'BG',
            CountryEnum::Bulgaria->getIso31662()
        );
        self::assertEquals(
            'BF',
            CountryEnum::BurkinaFaso->getIso31662()
        );
        self::assertEquals(
            'BI',
            CountryEnum::Burundi->getIso31662()
        );
        self::assertEquals(
            'KH',
            CountryEnum::Cambodia->getIso31662()
        );
        self::assertEquals(
            'CM',
            CountryEnum::Cameroon->getIso31662()
        );
        self::assertEquals(
            'CA',
            CountryEnum::Canada->getIso31662()
        );
        self::assertEquals(
            'CV',
            CountryEnum::CapeVerde->getIso31662()
        );
        self::assertEquals(
            'KY',
            CountryEnum::CaymanIslands->getIso31662()
        );
        self::assertEquals(
            'CF',
            CountryEnum::CentralAfricanRepublic->getIso31662()
        );
        self::assertEquals(
            'TD',
            CountryEnum::Chad->getIso31662()
        );
        self::assertEquals(
            'CL',
            CountryEnum::Chile->getIso31662()
        );
        self::assertEquals(
            'CN',
            CountryEnum::China->getIso31662()
        );
        self::assertEquals(
            'CX',
            CountryEnum::ChristmasIsland->getIso31662()
        );
        self::assertEquals(
            'CC',
            CountryEnum::CocosIslands->getIso31662()
        );
        self::assertEquals(
            'CO',
            CountryEnum::Colombia->getIso31662()
        );
        self::assertEquals(
            'KM',
            CountryEnum::Comoros->getIso31662()
        );
        self::assertEquals(
            'CG',
            CountryEnum::Congo->getIso31662()
        );
        self::assertEquals(
            'CD',
            CountryEnum::CongoDR->getIso31662()
        );
        self::assertEquals(
            'CK',
            CountryEnum::CookIslands->getIso31662()
        );
        self::assertEquals(
            'CR',
            CountryEnum::CostaRica->getIso31662()
        );
        self::assertEquals(
            'CI',
            CountryEnum::CotedIvoire->getIso31662()
        );
        self::assertEquals(
            'HR',
            CountryEnum::Croatia->getIso31662()
        );
        self::assertEquals(
            'CU',
            CountryEnum::Cuba->getIso31662()
        );
        self::assertEquals(
            'CW',
            CountryEnum::Curacao->getIso31662()
        );
        self::assertEquals(
            'CY',
            CountryEnum::Cyprus->getIso31662()
        );
        self::assertEquals(
            'CZ',
            CountryEnum::Czechia->getIso31662()
        );
        self::assertEquals(
            'DK',
            CountryEnum::Denmark->getIso31662()
        );
        self::assertEquals(
            'DJ',
            CountryEnum::Djibouti->getIso31662()
        );
        self::assertEquals(
            'DM',
            CountryEnum::Dominica->getIso31662()
        );
        self::assertEquals(
            'DO',
            CountryEnum::DominicanRepublic->getIso31662()
        );
        self::assertEquals(
            'EC',
            CountryEnum::Ecuador->getIso31662()
        );
        self::assertEquals(
            'EG',
            CountryEnum::Egypt->getIso31662()
        );
        self::assertEquals(
            'SV',
            CountryEnum::ElSalvador->getIso31662()
        );
        self::assertEquals(
            'GQ',
            CountryEnum::EquatorialGuinea->getIso31662()
        );
        self::assertEquals(
            'ER',
            CountryEnum::Eritrea->getIso31662()
        );
        self::assertEquals(
            'EE',
            CountryEnum::Estonia->getIso31662()
        );
        self::assertEquals(
            'ET',
            CountryEnum::Ethiopia->getIso31662()
        );
        self::assertEquals(
            'FK',
            CountryEnum::FalklandIslands->getIso31662()
        );
        self::assertEquals(
            'FO',
            CountryEnum::FaroeIslands->getIso31662()
        );
        self::assertEquals(
            'FJ',
            CountryEnum::Fiji->getIso31662()
        );
        self::assertEquals(
            'FI',
            CountryEnum::Finland->getIso31662()
        );
        self::assertEquals(
            'FR',
            CountryEnum::France->getIso31662()
        );
        self::assertEquals(
            'GF',
            CountryEnum::FrenchGuiana->getIso31662()
        );
        self::assertEquals(
            'PF',
            CountryEnum::FrenchPolynesia->getIso31662()
        );
        self::assertEquals(
            'TF',
            CountryEnum::FrenchSouthernTerritories->getIso31662()
        );
        self::assertEquals(
            'GA',
            CountryEnum::Gabon->getIso31662()
        );
        self::assertEquals(
            'GM',
            CountryEnum::Gambia->getIso31662()
        );
        self::assertEquals(
            'GE',
            CountryEnum::Georgia->getIso31662()
        );
        self::assertEquals(
            'DE',
            CountryEnum::Germany->getIso31662()
        );
        self::assertEquals(
            'GH',
            CountryEnum::Ghana->getIso31662()
        );
        self::assertEquals(
            'GI',
            CountryEnum::Gibraltar->getIso31662()
        );
        self::assertEquals(
            'GR',
            CountryEnum::Greece->getIso31662()
        );
        self::assertEquals(
            'GL',
            CountryEnum::Greenland->getIso31662()
        );
        self::assertEquals(
            'GD',
            CountryEnum::Grenada->getIso31662()
        );
        self::assertEquals(
            'GP',
            CountryEnum::Guadeloupe->getIso31662()
        );
        self::assertEquals(
            'GU',
            CountryEnum::Guam->getIso31662()
        );
        self::assertEquals(
            'GT',
            CountryEnum::Guatemala->getIso31662()
        );
        self::assertEquals(
            'GG',
            CountryEnum::Guernsey->getIso31662()
        );
        self::assertEquals(
            'GN',
            CountryEnum::Guinea->getIso31662()
        );
        self::assertEquals(
            'GW',
            CountryEnum::GuineaBissau->getIso31662()
        );
        self::assertEquals(
            'GY',
            CountryEnum::Guyana->getIso31662()
        );
        self::assertEquals(
            'HT',
            CountryEnum::Haiti->getIso31662()
        );
        self::assertEquals(
            'HM',
            CountryEnum::HeardIslandandMcDonaldIslands->getIso31662()
        );
        self::assertEquals(
            'VA',
            CountryEnum::HolySee->getIso31662()
        );
        self::assertEquals(
            'HN',
            CountryEnum::Honduras->getIso31662()
        );
        self::assertEquals(
            'HK',
            CountryEnum::HongKong->getIso31662()
        );
        self::assertEquals(
            'HU',
            CountryEnum::Hungary->getIso31662()
        );
        self::assertEquals(
            'IS',
            CountryEnum::Iceland->getIso31662()
        );
        self::assertEquals(
            'IN',
            CountryEnum::India->getIso31662()
        );
        self::assertEquals(
            'ID',
            CountryEnum::Indonesia->getIso31662()
        );
        self::assertEquals(
            'IR',
            CountryEnum::Iran->getIso31662()
        );
        self::assertEquals(
            'IQ',
            CountryEnum::Iraq->getIso31662()
        );
        self::assertEquals(
            'IE',
            CountryEnum::Ireland->getIso31662()
        );
        self::assertEquals(
            'IM',
            CountryEnum::IsleofMan->getIso31662()
        );
        self::assertEquals(
            'IL',
            CountryEnum::Israel->getIso31662()
        );
        self::assertEquals(
            'IT',
            CountryEnum::Italy->getIso31662()
        );
        self::assertEquals(
            'JM',
            CountryEnum::Jamaica->getIso31662()
        );
        self::assertEquals(
            'JP',
            CountryEnum::Japan->getIso31662()
        );
        self::assertEquals(
            'JE',
            CountryEnum::Jersey->getIso31662()
        );
        self::assertEquals(
            'JO',
            CountryEnum::Jordan->getIso31662()
        );
        self::assertEquals(
            'KZ',
            CountryEnum::Kazakhstan->getIso31662()
        );
        self::assertEquals(
            'KE',
            CountryEnum::Kenya->getIso31662()
        );
        self::assertEquals(
            'KI',
            CountryEnum::Kiribati->getIso31662()
        );
        self::assertEquals(
            'KR',
            CountryEnum::Korea->getIso31662()
        );
        self::assertEquals(
            'KP',
            CountryEnum::KoreaDR->getIso31662()
        );
        self::assertEquals(
            'KW',
            CountryEnum::Kuwait->getIso31662()
        );
        self::assertEquals(
            'KG',
            CountryEnum::Kyrgyzstan->getIso31662()
        );
        self::assertEquals(
            'LA',
            CountryEnum::LaoPeoplesDemocraticRepublic->getIso31662()
        );
        self::assertEquals(
            'LV',
            CountryEnum::Latvia->getIso31662()
        );
        self::assertEquals(
            'LB',
            CountryEnum::Lebanon->getIso31662()
        );
        self::assertEquals(
            'LS',
            CountryEnum::Lesotho->getIso31662()
        );
        self::assertEquals(
            'LR',
            CountryEnum::Liberia->getIso31662()
        );
        self::assertEquals(
            'LY',
            CountryEnum::Libya->getIso31662()
        );
        self::assertEquals(
            'LI',
            CountryEnum::Liechtenstein->getIso31662()
        );
        self::assertEquals(
            'LT',
            CountryEnum::Lithuania->getIso31662()
        );
        self::assertEquals(
            'LU',
            CountryEnum::Luxembourg->getIso31662()
        );
        self::assertEquals(
            'MO',
            CountryEnum::Macao->getIso31662()
        );
        self::assertEquals(
            'MK',
            CountryEnum::Macedonia->getIso31662()
        );
        self::assertEquals(
            'MG',
            CountryEnum::Madagascar->getIso31662()
        );
        self::assertEquals(
            'MW',
            CountryEnum::Malawi->getIso31662()
        );
        self::assertEquals(
            'MY',
            CountryEnum::Malaysia->getIso31662()
        );
        self::assertEquals(
            'MV',
            CountryEnum::Maldives->getIso31662()
        );
        self::assertEquals(
            'ML',
            CountryEnum::Mali->getIso31662()
        );
        self::assertEquals(
            'MT',
            CountryEnum::Malta->getIso31662()
        );
        self::assertEquals(
            'MH',
            CountryEnum::MarshallIslands->getIso31662()
        );
        self::assertEquals(
            'MQ',
            CountryEnum::Martinique->getIso31662()
        );
        self::assertEquals(
            'MR',
            CountryEnum::Mauritania->getIso31662()
        );
        self::assertEquals(
            'MU',
            CountryEnum::Mauritius->getIso31662()
        );
        self::assertEquals(
            'YT',
            CountryEnum::Mayotte->getIso31662()
        );
        self::assertEquals(
            'MX',
            CountryEnum::Mexico->getIso31662()
        );
        self::assertEquals(
            'FM',
            CountryEnum::Micronesia->getIso31662()
        );
        self::assertEquals(
            'MD',
            CountryEnum::Moldova->getIso31662()
        );
        self::assertEquals(
            'MC',
            CountryEnum::Monaco->getIso31662()
        );
        self::assertEquals(
            'MN',
            CountryEnum::Mongolia->getIso31662()
        );
        self::assertEquals(
            'ME',
            CountryEnum::Montenegro->getIso31662()
        );
        self::assertEquals(
            'MS',
            CountryEnum::Montserrat->getIso31662()
        );
        self::assertEquals(
            'MA',
            CountryEnum::Morocco->getIso31662()
        );
        self::assertEquals(
            'MZ',
            CountryEnum::Mozambique->getIso31662()
        );
        self::assertEquals(
            'MM',
            CountryEnum::Myanmar->getIso31662()
        );
        self::assertEquals(
            'NA',
            CountryEnum::Namibia->getIso31662()
        );
        self::assertEquals(
            'NR',
            CountryEnum::Nauru->getIso31662()
        );
        self::assertEquals(
            'NP',
            CountryEnum::Nepal->getIso31662()
        );
        self::assertEquals(
            'NL',
            CountryEnum::Netherlands->getIso31662()
        );
        self::assertEquals(
            'NC',
            CountryEnum::NewCaledonia->getIso31662()
        );
        self::assertEquals(
            'NZ',
            CountryEnum::NewZealand->getIso31662()
        );
        self::assertEquals(
            'NI',
            CountryEnum::Nicaragua->getIso31662()
        );
        self::assertEquals(
            'NE',
            CountryEnum::Niger->getIso31662()
        );
        self::assertEquals(
            'NG',
            CountryEnum::Nigeria->getIso31662()
        );
        self::assertEquals(
            'NU',
            CountryEnum::Niue->getIso31662()
        );
        self::assertEquals(
            'NF',
            CountryEnum::NorfolkIsland->getIso31662()
        );
        self::assertEquals(
            'MP',
            CountryEnum::NorthernMarianaIslands->getIso31662()
        );
        self::assertEquals(
            'NO',
            CountryEnum::Norway->getIso31662()
        );
        self::assertEquals(
            'OM',
            CountryEnum::Oman->getIso31662()
        );
        self::assertEquals(
            'PK',
            CountryEnum::Pakistan->getIso31662()
        );
        self::assertEquals(
            'PW',
            CountryEnum::Palau->getIso31662()
        );
        self::assertEquals(
            'PS',
            CountryEnum::Palestine->getIso31662()
        );
        self::assertEquals(
            'PA',
            CountryEnum::Panama->getIso31662()
        );
        self::assertEquals(
            'PG',
            CountryEnum::PapuaNewGuinea->getIso31662()
        );
        self::assertEquals(
            'PY',
            CountryEnum::Paraguay->getIso31662()
        );
        self::assertEquals(
            'PE',
            CountryEnum::Peru->getIso31662()
        );
        self::assertEquals(
            'PH',
            CountryEnum::Philippines->getIso31662()
        );
        self::assertEquals(
            'PN',
            CountryEnum::Pitcairn->getIso31662()
        );
        self::assertEquals(
            'PL',
            CountryEnum::Poland->getIso31662()
        );
        self::assertEquals(
            'PT',
            CountryEnum::Portugal->getIso31662()
        );
        self::assertEquals(
            'PR',
            CountryEnum::PuertoRico->getIso31662()
        );
        self::assertEquals(
            'QA',
            CountryEnum::Qatar->getIso31662()
        );
        self::assertEquals(
            'RE',
            CountryEnum::Reunion->getIso31662()
        );
        self::assertEquals(
            'RO',
            CountryEnum::Romania->getIso31662()
        );
        self::assertEquals(
            'RU',
            CountryEnum::RussianFederation->getIso31662()
        );
        self::assertEquals(
            'RW',
            CountryEnum::Rwanda->getIso31662()
        );
        self::assertEquals(
            'BL',
            CountryEnum::SaintBarthelemy->getIso31662()
        );
        self::assertEquals(
            'SH',
            CountryEnum::SaintHelena->getIso31662()
        );
        self::assertEquals(
            'KN',
            CountryEnum::SaintKittsandNevis->getIso31662()
        );
        self::assertEquals(
            'LC',
            CountryEnum::SaintLucia->getIso31662()
        );
        self::assertEquals(
            'MF',
            CountryEnum::SaintMartinFrench->getIso31662()
        );
        self::assertEquals(
            'PM',
            CountryEnum::SaintPierreandMiquelon->getIso31662()
        );
        self::assertEquals(
            'VC',
            CountryEnum::SaintVincentandtheGrenadines->getIso31662()
        );
        self::assertEquals(
            'WS',
            CountryEnum::Samoa->getIso31662()
        );
        self::assertEquals(
            'SM',
            CountryEnum::SanMarino->getIso31662()
        );
        self::assertEquals(
            'ST',
            CountryEnum::SaoTomeandPrincipe->getIso31662()
        );
        self::assertEquals(
            'SA',
            CountryEnum::SaudiArabia->getIso31662()
        );
        self::assertEquals(
            'SN',
            CountryEnum::Senegal->getIso31662()
        );
        self::assertEquals(
            'RS',
            CountryEnum::Serbia->getIso31662()
        );
        self::assertEquals(
            'SC',
            CountryEnum::Seychelles->getIso31662()
        );
        self::assertEquals(
            'SL',
            CountryEnum::SierraLeone->getIso31662()
        );
        self::assertEquals(
            'SG',
            CountryEnum::Singapore->getIso31662()
        );
        self::assertEquals(
            'SX',
            CountryEnum::SintMaartenDutch->getIso31662()
        );
        self::assertEquals(
            'SK',
            CountryEnum::Slovakia->getIso31662()
        );
        self::assertEquals(
            'SI',
            CountryEnum::Slovenia->getIso31662()
        );
        self::assertEquals(
            'SB',
            CountryEnum::SolomonIslands->getIso31662()
        );
        self::assertEquals(
            'SO',
            CountryEnum::Somalia->getIso31662()
        );
        self::assertEquals(
            'ZA',
            CountryEnum::SouthAfrica->getIso31662()
        );
        self::assertEquals(
            'GS',
            CountryEnum::SouthGeorgiaandtheSouthSandwichIslands->getIso31662()
        );
        self::assertEquals(
            'SS',
            CountryEnum::SouthSudan->getIso31662()
        );
        self::assertEquals(
            'ES',
            CountryEnum::Spain->getIso31662()
        );
        self::assertEquals(
            'LK',
            CountryEnum::SriLanka->getIso31662()
        );
        self::assertEquals(
            'SD',
            CountryEnum::Sudan->getIso31662()
        );
        self::assertEquals(
            'SR',
            CountryEnum::Suriname->getIso31662()
        );
        self::assertEquals(
            'SJ',
            CountryEnum::SvalbardandJanMayen->getIso31662()
        );
        self::assertEquals(
            'SZ',
            CountryEnum::Swaziland->getIso31662()
        );
        self::assertEquals(
            'SE',
            CountryEnum::Sweden->getIso31662()
        );
        self::assertEquals(
            'CH',
            CountryEnum::Switzerland->getIso31662()
        );
        self::assertEquals(
            'SY',
            CountryEnum::SyrianArabRepublic->getIso31662()
        );
        self::assertEquals(
            'TW',
            CountryEnum::Taiwan->getIso31662()
        );
        self::assertEquals(
            'TJ',
            CountryEnum::Tajikistan->getIso31662()
        );
        self::assertEquals(
            'TZ',
            CountryEnum::Tanzania->getIso31662()
        );
        self::assertEquals(
            'TH',
            CountryEnum::Thailand->getIso31662()
        );
        self::assertEquals(
            'TL',
            CountryEnum::TimorLeste->getIso31662()
        );
        self::assertEquals(
            'TG',
            CountryEnum::Togo->getIso31662()
        );
        self::assertEquals(
            'TK',
            CountryEnum::Tokelau->getIso31662()
        );
        self::assertEquals(
            'TO',
            CountryEnum::Tonga->getIso31662()
        );
        self::assertEquals(
            'TT',
            CountryEnum::TrinidadandTobago->getIso31662()
        );
        self::assertEquals(
            'TN',
            CountryEnum::Tunisia->getIso31662()
        );
        self::assertEquals(
            'TR',
            CountryEnum::Turkey->getIso31662()
        );
        self::assertEquals(
            'TM',
            CountryEnum::Turkmenistan->getIso31662()
        );
        self::assertEquals(
            'TC',
            CountryEnum::TurksandCaicosIslands->getIso31662()
        );
        self::assertEquals(
            'TV',
            CountryEnum::Tuvalu->getIso31662()
        );
        self::assertEquals(
            'UG',
            CountryEnum::Uganda->getIso31662()
        );
        self::assertEquals(
            'UA',
            CountryEnum::Ukraine->getIso31662()
        );
        self::assertEquals(
            'AE',
            CountryEnum::UnitedArabEmirates->getIso31662()
        );
        self::assertEquals(
            'GB',
            CountryEnum::UnitedKingdom->getIso31662()
        );
        self::assertEquals(
            'US',
            CountryEnum::UnitedStates->getIso31662()
        );
        self::assertEquals(
            'UM',
            CountryEnum::UnitedStatesMinorOutlyingIslands->getIso31662()
        );
        self::assertEquals(
            'UY',
            CountryEnum::Uruguay->getIso31662()
        );
        self::assertEquals(
            'UZ',
            CountryEnum::Uzbekistan->getIso31662()
        );
        self::assertEquals(
            'VU',
            CountryEnum::Vanuatu->getIso31662()
        );
        self::assertEquals(
            'VE',
            CountryEnum::Venezuela->getIso31662()
        );
        self::assertEquals(
            'VN',
            CountryEnum::VietNam->getIso31662()
        );
        self::assertEquals(
            'VI',
            CountryEnum::VirginIslands->getIso31662()
        );
        self::assertEquals(
            'WF',
            CountryEnum::WallisandFutuna->getIso31662()
        );
        self::assertEquals(
            'EH',
            CountryEnum::WesternSahara->getIso31662()
        );
        self::assertEquals(
            'YE',
            CountryEnum::Yemen->getIso31662()
        );
        self::assertEquals(
            'ZM',
            CountryEnum::Zambia->getIso31662()
        );
        self::assertEquals(
            'ZW',
            CountryEnum::Zimbabwe->getIso31662()
        );
    }

    public function testExpectedIso31663(): void
    {
        self::assertEquals(
            'AFG',
            CountryEnum::Afghanistan->getIso31663()
        );
        self::assertEquals(
            'ALA',
            CountryEnum::AlandIslands->getIso31663()
        );
        self::assertEquals(
            'ALB',
            CountryEnum::Albania->getIso31663()
        );
        self::assertEquals(
            'DZA',
            CountryEnum::Algeria->getIso31663()
        );
        self::assertEquals(
            'ASM',
            CountryEnum::AmericanSamoa->getIso31663()
        );
        self::assertEquals(
            'AND',
            CountryEnum::Andorra->getIso31663()
        );
        self::assertEquals(
            'AGO',
            CountryEnum::Angola->getIso31663()
        );
        self::assertEquals(
            'AIA',
            CountryEnum::Anguilla->getIso31663()
        );
        self::assertEquals(
            'ATA',
            CountryEnum::Antarctica->getIso31663()
        );
        self::assertEquals(
            'ATG',
            CountryEnum::AntiguaandBarbuda->getIso31663()
        );
        self::assertEquals(
            'ARG',
            CountryEnum::Argentina->getIso31663()
        );
        self::assertEquals(
            'ARM',
            CountryEnum::Armenia->getIso31663()
        );
        self::assertEquals(
            'ABW',
            CountryEnum::Aruba->getIso31663()
        );
        self::assertEquals(
            'AUS',
            CountryEnum::Australia->getIso31663()
        );
        self::assertEquals(
            'AUT',
            CountryEnum::Austria->getIso31663()
        );
        self::assertEquals(
            'AZE',
            CountryEnum::Azerbaijan->getIso31663()
        );
        self::assertEquals(
            'BHS',
            CountryEnum::Bahamas->getIso31663()
        );
        self::assertEquals(
            'BHR',
            CountryEnum::Bahrain->getIso31663()
        );
        self::assertEquals(
            'BGD',
            CountryEnum::Bangladesh->getIso31663()
        );
        self::assertEquals(
            'BRB',
            CountryEnum::Barbados->getIso31663()
        );
        self::assertEquals(
            'BLR',
            CountryEnum::Belarus->getIso31663()
        );
        self::assertEquals(
            'BEL',
            CountryEnum::Belgium->getIso31663()
        );
        self::assertEquals(
            'BLZ',
            CountryEnum::Belize->getIso31663()
        );
        self::assertEquals(
            'BEN',
            CountryEnum::Benin->getIso31663()
        );
        self::assertEquals(
            'BMU',
            CountryEnum::Bermuda->getIso31663()
        );
        self::assertEquals(
            'BTN',
            CountryEnum::Bhutan->getIso31663()
        );
        self::assertEquals(
            'BOL',
            CountryEnum::Bolivia->getIso31663()
        );
        self::assertEquals(
            'BES',
            CountryEnum::Bonaire->getIso31663()
        );
        self::assertEquals(
            'BIH',
            CountryEnum::BosniaandHerzegovina->getIso31663()
        );
        self::assertEquals(
            'BWA',
            CountryEnum::Botswana->getIso31663()
        );
        self::assertEquals(
            'BVT',
            CountryEnum::BouvetIsland->getIso31663()
        );
        self::assertEquals(
            'BRA',
            CountryEnum::Brazil->getIso31663()
        );
        self::assertEquals(
            'IOT',
            CountryEnum::BritishIndianOceanTerritory->getIso31663()
        );
        self::assertEquals(
            'VGB',
            CountryEnum::BritishVirginIslands->getIso31663()
        );
        self::assertEquals(
            'BRN',
            CountryEnum::BruneiDarussalam->getIso31663()
        );
        self::assertEquals(
            'BGR',
            CountryEnum::Bulgaria->getIso31663()
        );
        self::assertEquals(
            'BFA',
            CountryEnum::BurkinaFaso->getIso31663()
        );
        self::assertEquals(
            'BDI',
            CountryEnum::Burundi->getIso31663()
        );
        self::assertEquals(
            'KHM',
            CountryEnum::Cambodia->getIso31663()
        );
        self::assertEquals(
            'CMR',
            CountryEnum::Cameroon->getIso31663()
        );
        self::assertEquals(
            'CAN',
            CountryEnum::Canada->getIso31663()
        );
        self::assertEquals(
            'CPV',
            CountryEnum::CapeVerde->getIso31663()
        );
        self::assertEquals(
            'CYM',
            CountryEnum::CaymanIslands->getIso31663()
        );
        self::assertEquals(
            'CAF',
            CountryEnum::CentralAfricanRepublic->getIso31663()
        );
        self::assertEquals(
            'TCD',
            CountryEnum::Chad->getIso31663()
        );
        self::assertEquals(
            'CHL',
            CountryEnum::Chile->getIso31663()
        );
        self::assertEquals(
            'CHN',
            CountryEnum::China->getIso31663()
        );
        self::assertEquals(
            'CXR',
            CountryEnum::ChristmasIsland->getIso31663()
        );
        self::assertEquals(
            'CCK',
            CountryEnum::CocosIslands->getIso31663()
        );
        self::assertEquals(
            'COL',
            CountryEnum::Colombia->getIso31663()
        );
        self::assertEquals(
            'COM',
            CountryEnum::Comoros->getIso31663()
        );
        self::assertEquals(
            'COG',
            CountryEnum::Congo->getIso31663()
        );
        self::assertEquals(
            'COD',
            CountryEnum::CongoDR->getIso31663()
        );
        self::assertEquals(
            'COK',
            CountryEnum::CookIslands->getIso31663()
        );
        self::assertEquals(
            'CRI',
            CountryEnum::CostaRica->getIso31663()
        );
        self::assertEquals(
            'CIV',
            CountryEnum::CotedIvoire->getIso31663()
        );
        self::assertEquals(
            'HRV',
            CountryEnum::Croatia->getIso31663()
        );
        self::assertEquals(
            'CUB',
            CountryEnum::Cuba->getIso31663()
        );
        self::assertEquals(
            'CUW',
            CountryEnum::Curacao->getIso31663()
        );
        self::assertEquals(
            'CYP',
            CountryEnum::Cyprus->getIso31663()
        );
        self::assertEquals(
            'CZE',
            CountryEnum::Czechia->getIso31663()
        );
        self::assertEquals(
            'DNK',
            CountryEnum::Denmark->getIso31663()
        );
        self::assertEquals(
            'DJI',
            CountryEnum::Djibouti->getIso31663()
        );
        self::assertEquals(
            'DMA',
            CountryEnum::Dominica->getIso31663()
        );
        self::assertEquals(
            'DOM',
            CountryEnum::DominicanRepublic->getIso31663()
        );
        self::assertEquals(
            'ECU',
            CountryEnum::Ecuador->getIso31663()
        );
        self::assertEquals(
            'EGY',
            CountryEnum::Egypt->getIso31663()
        );
        self::assertEquals(
            'SLV',
            CountryEnum::ElSalvador->getIso31663()
        );
        self::assertEquals(
            'GNQ',
            CountryEnum::EquatorialGuinea->getIso31663()
        );
        self::assertEquals(
            'ERI',
            CountryEnum::Eritrea->getIso31663()
        );
        self::assertEquals(
            'EST',
            CountryEnum::Estonia->getIso31663()
        );
        self::assertEquals(
            'ETH',
            CountryEnum::Ethiopia->getIso31663()
        );
        self::assertEquals(
            'FLK',
            CountryEnum::FalklandIslands->getIso31663()
        );
        self::assertEquals(
            'FRO',
            CountryEnum::FaroeIslands->getIso31663()
        );
        self::assertEquals(
            'FJI',
            CountryEnum::Fiji->getIso31663()
        );
        self::assertEquals(
            'FIN',
            CountryEnum::Finland->getIso31663()
        );
        self::assertEquals(
            'FRA',
            CountryEnum::France->getIso31663()
        );
        self::assertEquals(
            'GUF',
            CountryEnum::FrenchGuiana->getIso31663()
        );
        self::assertEquals(
            'PYF',
            CountryEnum::FrenchPolynesia->getIso31663()
        );
        self::assertEquals(
            'ATF',
            CountryEnum::FrenchSouthernTerritories->getIso31663()
        );
        self::assertEquals(
            'GAB',
            CountryEnum::Gabon->getIso31663()
        );
        self::assertEquals(
            'GMB',
            CountryEnum::Gambia->getIso31663()
        );
        self::assertEquals(
            'GEO',
            CountryEnum::Georgia->getIso31663()
        );
        self::assertEquals(
            'DEU',
            CountryEnum::Germany->getIso31663()
        );
        self::assertEquals(
            'GHA',
            CountryEnum::Ghana->getIso31663()
        );
        self::assertEquals(
            'GIB',
            CountryEnum::Gibraltar->getIso31663()
        );
        self::assertEquals(
            'GRC',
            CountryEnum::Greece->getIso31663()
        );
        self::assertEquals(
            'GRL',
            CountryEnum::Greenland->getIso31663()
        );
        self::assertEquals(
            'GRD',
            CountryEnum::Grenada->getIso31663()
        );
        self::assertEquals(
            'GLP',
            CountryEnum::Guadeloupe->getIso31663()
        );
        self::assertEquals(
            'GUM',
            CountryEnum::Guam->getIso31663()
        );
        self::assertEquals(
            'GTM',
            CountryEnum::Guatemala->getIso31663()
        );
        self::assertEquals(
            'GGY',
            CountryEnum::Guernsey->getIso31663()
        );
        self::assertEquals(
            'GIN',
            CountryEnum::Guinea->getIso31663()
        );
        self::assertEquals(
            'GNB',
            CountryEnum::GuineaBissau->getIso31663()
        );
        self::assertEquals(
            'GUY',
            CountryEnum::Guyana->getIso31663()
        );
        self::assertEquals(
            'HTI',
            CountryEnum::Haiti->getIso31663()
        );
        self::assertEquals(
            'HMD',
            CountryEnum::HeardIslandandMcDonaldIslands->getIso31663()
        );
        self::assertEquals(
            'VAT',
            CountryEnum::HolySee->getIso31663()
        );
        self::assertEquals(
            'HND',
            CountryEnum::Honduras->getIso31663()
        );
        self::assertEquals(
            'HKG',
            CountryEnum::HongKong->getIso31663()
        );
        self::assertEquals(
            'HUN',
            CountryEnum::Hungary->getIso31663()
        );
        self::assertEquals(
            'ISL',
            CountryEnum::Iceland->getIso31663()
        );
        self::assertEquals(
            'IND',
            CountryEnum::India->getIso31663()
        );
        self::assertEquals(
            'IDN',
            CountryEnum::Indonesia->getIso31663()
        );
        self::assertEquals(
            'IRN',
            CountryEnum::Iran->getIso31663()
        );
        self::assertEquals(
            'IRQ',
            CountryEnum::Iraq->getIso31663()
        );
        self::assertEquals(
            'IRL',
            CountryEnum::Ireland->getIso31663()
        );
        self::assertEquals(
            'IMN',
            CountryEnum::IsleofMan->getIso31663()
        );
        self::assertEquals(
            'ISR',
            CountryEnum::Israel->getIso31663()
        );
        self::assertEquals(
            'ITA',
            CountryEnum::Italy->getIso31663()
        );
        self::assertEquals(
            'JAM',
            CountryEnum::Jamaica->getIso31663()
        );
        self::assertEquals(
            'JPN',
            CountryEnum::Japan->getIso31663()
        );
        self::assertEquals(
            'JEY',
            CountryEnum::Jersey->getIso31663()
        );
        self::assertEquals(
            'JOR',
            CountryEnum::Jordan->getIso31663()
        );
        self::assertEquals(
            'KAZ',
            CountryEnum::Kazakhstan->getIso31663()
        );
        self::assertEquals(
            'KEN',
            CountryEnum::Kenya->getIso31663()
        );
        self::assertEquals(
            'KIR',
            CountryEnum::Kiribati->getIso31663()
        );
        self::assertEquals(
            'KOR',
            CountryEnum::Korea->getIso31663()
        );
        self::assertEquals(
            'PRK',
            CountryEnum::KoreaDR->getIso31663()
        );
        self::assertEquals(
            'KWT',
            CountryEnum::Kuwait->getIso31663()
        );
        self::assertEquals(
            'KGZ',
            CountryEnum::Kyrgyzstan->getIso31663()
        );
        self::assertEquals(
            'LAO',
            CountryEnum::LaoPeoplesDemocraticRepublic->getIso31663()
        );
        self::assertEquals(
            'LVA',
            CountryEnum::Latvia->getIso31663()
        );
        self::assertEquals(
            'LBN',
            CountryEnum::Lebanon->getIso31663()
        );
        self::assertEquals(
            'LSO',
            CountryEnum::Lesotho->getIso31663()
        );
        self::assertEquals(
            'LBR',
            CountryEnum::Liberia->getIso31663()
        );
        self::assertEquals(
            'LBY',
            CountryEnum::Libya->getIso31663()
        );
        self::assertEquals(
            'LIE',
            CountryEnum::Liechtenstein->getIso31663()
        );
        self::assertEquals(
            'LTU',
            CountryEnum::Lithuania->getIso31663()
        );
        self::assertEquals(
            'LUX',
            CountryEnum::Luxembourg->getIso31663()
        );
        self::assertEquals(
            'MAC',
            CountryEnum::Macao->getIso31663()
        );
        self::assertEquals(
            'MKD',
            CountryEnum::Macedonia->getIso31663()
        );
        self::assertEquals(
            'MDG',
            CountryEnum::Madagascar->getIso31663()
        );
        self::assertEquals(
            'MWI',
            CountryEnum::Malawi->getIso31663()
        );
        self::assertEquals(
            'MYS',
            CountryEnum::Malaysia->getIso31663()
        );
        self::assertEquals(
            'MDV',
            CountryEnum::Maldives->getIso31663()
        );
        self::assertEquals(
            'MLI',
            CountryEnum::Mali->getIso31663()
        );
        self::assertEquals(
            'MLT',
            CountryEnum::Malta->getIso31663()
        );
        self::assertEquals(
            'MHL',
            CountryEnum::MarshallIslands->getIso31663()
        );
        self::assertEquals(
            'MTQ',
            CountryEnum::Martinique->getIso31663()
        );
        self::assertEquals(
            'MRT',
            CountryEnum::Mauritania->getIso31663()
        );
        self::assertEquals(
            'MUS',
            CountryEnum::Mauritius->getIso31663()
        );
        self::assertEquals(
            'MYT',
            CountryEnum::Mayotte->getIso31663()
        );
        self::assertEquals(
            'MEX',
            CountryEnum::Mexico->getIso31663()
        );
        self::assertEquals(
            'FSM',
            CountryEnum::Micronesia->getIso31663()
        );
        self::assertEquals(
            'MDA',
            CountryEnum::Moldova->getIso31663()
        );
        self::assertEquals(
            'MCO',
            CountryEnum::Monaco->getIso31663()
        );
        self::assertEquals(
            'MNG',
            CountryEnum::Mongolia->getIso31663()
        );
        self::assertEquals(
            'MNE',
            CountryEnum::Montenegro->getIso31663()
        );
        self::assertEquals(
            'MSR',
            CountryEnum::Montserrat->getIso31663()
        );
        self::assertEquals(
            'MAR',
            CountryEnum::Morocco->getIso31663()
        );
        self::assertEquals(
            'MOZ',
            CountryEnum::Mozambique->getIso31663()
        );
        self::assertEquals(
            'MMR',
            CountryEnum::Myanmar->getIso31663()
        );
        self::assertEquals(
            'NAM',
            CountryEnum::Namibia->getIso31663()
        );
        self::assertEquals(
            'NRU',
            CountryEnum::Nauru->getIso31663()
        );
        self::assertEquals(
            'NPL',
            CountryEnum::Nepal->getIso31663()
        );
        self::assertEquals(
            'NLD',
            CountryEnum::Netherlands->getIso31663()
        );
        self::assertEquals(
            'NCL',
            CountryEnum::NewCaledonia->getIso31663()
        );
        self::assertEquals(
            'NZL',
            CountryEnum::NewZealand->getIso31663()
        );
        self::assertEquals(
            'NIC',
            CountryEnum::Nicaragua->getIso31663()
        );
        self::assertEquals(
            'NER',
            CountryEnum::Niger->getIso31663()
        );
        self::assertEquals(
            'NGA',
            CountryEnum::Nigeria->getIso31663()
        );
        self::assertEquals(
            'NIU',
            CountryEnum::Niue->getIso31663()
        );
        self::assertEquals(
            'NFK',
            CountryEnum::NorfolkIsland->getIso31663()
        );
        self::assertEquals(
            'MNP',
            CountryEnum::NorthernMarianaIslands->getIso31663()
        );
        self::assertEquals(
            'NOR',
            CountryEnum::Norway->getIso31663()
        );
        self::assertEquals(
            'OMN',
            CountryEnum::Oman->getIso31663()
        );
        self::assertEquals(
            'PAK',
            CountryEnum::Pakistan->getIso31663()
        );
        self::assertEquals(
            'PLW',
            CountryEnum::Palau->getIso31663()
        );
        self::assertEquals(
            'PSE',
            CountryEnum::Palestine->getIso31663()
        );
        self::assertEquals(
            'PAN',
            CountryEnum::Panama->getIso31663()
        );
        self::assertEquals(
            'PNG',
            CountryEnum::PapuaNewGuinea->getIso31663()
        );
        self::assertEquals(
            'PRY',
            CountryEnum::Paraguay->getIso31663()
        );
        self::assertEquals(
            'PER',
            CountryEnum::Peru->getIso31663()
        );
        self::assertEquals(
            'PHL',
            CountryEnum::Philippines->getIso31663()
        );
        self::assertEquals(
            'PCN',
            CountryEnum::Pitcairn->getIso31663()
        );
        self::assertEquals(
            'POL',
            CountryEnum::Poland->getIso31663()
        );
        self::assertEquals(
            'PRT',
            CountryEnum::Portugal->getIso31663()
        );
        self::assertEquals(
            'PRI',
            CountryEnum::PuertoRico->getIso31663()
        );
        self::assertEquals(
            'QAT',
            CountryEnum::Qatar->getIso31663()
        );
        self::assertEquals(
            'REU',
            CountryEnum::Reunion->getIso31663()
        );
        self::assertEquals(
            'ROU',
            CountryEnum::Romania->getIso31663()
        );
        self::assertEquals(
            'RUS',
            CountryEnum::RussianFederation->getIso31663()
        );
        self::assertEquals(
            'RWA',
            CountryEnum::Rwanda->getIso31663()
        );
        self::assertEquals(
            'BLM',
            CountryEnum::SaintBarthelemy->getIso31663()
        );
        self::assertEquals(
            'SHN',
            CountryEnum::SaintHelena->getIso31663()
        );
        self::assertEquals(
            'KNA',
            CountryEnum::SaintKittsandNevis->getIso31663()
        );
        self::assertEquals(
            'LCA',
            CountryEnum::SaintLucia->getIso31663()
        );
        self::assertEquals(
            'MAF',
            CountryEnum::SaintMartinFrench->getIso31663()
        );
        self::assertEquals(
            'SPM',
            CountryEnum::SaintPierreandMiquelon->getIso31663()
        );
        self::assertEquals(
            'VCT',
            CountryEnum::SaintVincentandtheGrenadines->getIso31663()
        );
        self::assertEquals(
            'WSM',
            CountryEnum::Samoa->getIso31663()
        );
        self::assertEquals(
            'SMR',
            CountryEnum::SanMarino->getIso31663()
        );
        self::assertEquals(
            'STP',
            CountryEnum::SaoTomeandPrincipe->getIso31663()
        );
        self::assertEquals(
            'SAU',
            CountryEnum::SaudiArabia->getIso31663()
        );
        self::assertEquals(
            'SEN',
            CountryEnum::Senegal->getIso31663()
        );
        self::assertEquals(
            'SRB',
            CountryEnum::Serbia->getIso31663()
        );
        self::assertEquals(
            'SYC',
            CountryEnum::Seychelles->getIso31663()
        );
        self::assertEquals(
            'SLE',
            CountryEnum::SierraLeone->getIso31663()
        );
        self::assertEquals(
            'SGP',
            CountryEnum::Singapore->getIso31663()
        );
        self::assertEquals(
            'SXM',
            CountryEnum::SintMaartenDutch->getIso31663()
        );
        self::assertEquals(
            'SVK',
            CountryEnum::Slovakia->getIso31663()
        );
        self::assertEquals(
            'SVN',
            CountryEnum::Slovenia->getIso31663()
        );
        self::assertEquals(
            'SLB',
            CountryEnum::SolomonIslands->getIso31663()
        );
        self::assertEquals(
            'SOM',
            CountryEnum::Somalia->getIso31663()
        );
        self::assertEquals(
            'ZAF',
            CountryEnum::SouthAfrica->getIso31663()
        );
        self::assertEquals(
            'SGS',
            CountryEnum::SouthGeorgiaandtheSouthSandwichIslands->getIso31663()
        );
        self::assertEquals(
            'SSD',
            CountryEnum::SouthSudan->getIso31663()
        );
        self::assertEquals(
            'ESP',
            CountryEnum::Spain->getIso31663()
        );
        self::assertEquals(
            'LKA',
            CountryEnum::SriLanka->getIso31663()
        );
        self::assertEquals(
            'SDN',
            CountryEnum::Sudan->getIso31663()
        );
        self::assertEquals(
            'SUR',
            CountryEnum::Suriname->getIso31663()
        );
        self::assertEquals(
            'SJM',
            CountryEnum::SvalbardandJanMayen->getIso31663()
        );
        self::assertEquals(
            'SWZ',
            CountryEnum::Swaziland->getIso31663()
        );
        self::assertEquals(
            'SWE',
            CountryEnum::Sweden->getIso31663()
        );
        self::assertEquals(
            'CHE',
            CountryEnum::Switzerland->getIso31663()
        );
        self::assertEquals(
            'SYR',
            CountryEnum::SyrianArabRepublic->getIso31663()
        );
        self::assertEquals(
            'TWN',
            CountryEnum::Taiwan->getIso31663()
        );
        self::assertEquals(
            'TJK',
            CountryEnum::Tajikistan->getIso31663()
        );
        self::assertEquals(
            'TZA',
            CountryEnum::Tanzania->getIso31663()
        );
        self::assertEquals(
            'THA',
            CountryEnum::Thailand->getIso31663()
        );
        self::assertEquals(
            'TLS',
            CountryEnum::TimorLeste->getIso31663()
        );
        self::assertEquals(
            'TGO',
            CountryEnum::Togo->getIso31663()
        );
        self::assertEquals(
            'TKL',
            CountryEnum::Tokelau->getIso31663()
        );
        self::assertEquals(
            'TON',
            CountryEnum::Tonga->getIso31663()
        );
        self::assertEquals(
            'TTO',
            CountryEnum::TrinidadandTobago->getIso31663()
        );
        self::assertEquals(
            'TUN',
            CountryEnum::Tunisia->getIso31663()
        );
        self::assertEquals(
            'TUR',
            CountryEnum::Turkey->getIso31663()
        );
        self::assertEquals(
            'TKM',
            CountryEnum::Turkmenistan->getIso31663()
        );
        self::assertEquals(
            'TCA',
            CountryEnum::TurksandCaicosIslands->getIso31663()
        );
        self::assertEquals(
            'TUV',
            CountryEnum::Tuvalu->getIso31663()
        );
        self::assertEquals(
            'UGA',
            CountryEnum::Uganda->getIso31663()
        );
        self::assertEquals(
            'UKR',
            CountryEnum::Ukraine->getIso31663()
        );
        self::assertEquals(
            'ARE',
            CountryEnum::UnitedArabEmirates->getIso31663()
        );
        self::assertEquals(
            'GBR',
            CountryEnum::UnitedKingdom->getIso31663()
        );
        self::assertEquals(
            'USA',
            CountryEnum::UnitedStates->getIso31663()
        );
        self::assertEquals(
            'UMI',
            CountryEnum::UnitedStatesMinorOutlyingIslands->getIso31663()
        );
        self::assertEquals(
            'URY',
            CountryEnum::Uruguay->getIso31663()
        );
        self::assertEquals(
            'UZB',
            CountryEnum::Uzbekistan->getIso31663()
        );
        self::assertEquals(
            'VUT',
            CountryEnum::Vanuatu->getIso31663()
        );
        self::assertEquals(
            'VEN',
            CountryEnum::Venezuela->getIso31663()
        );
        self::assertEquals(
            'VNM',
            CountryEnum::VietNam->getIso31663()
        );
        self::assertEquals(
            'VIR',
            CountryEnum::VirginIslands->getIso31663()
        );
        self::assertEquals(
            'WLF',
            CountryEnum::WallisandFutuna->getIso31663()
        );
        self::assertEquals(
            'ESH',
            CountryEnum::WesternSahara->getIso31663()
        );
        self::assertEquals(
            'YEM',
            CountryEnum::Yemen->getIso31663()
        );
        self::assertEquals(
            'ZMB',
            CountryEnum::Zambia->getIso31663()
        );
        self::assertEquals(
            'ZWE',
            CountryEnum::Zimbabwe->getIso31663()
        );
    }

    public function testExpectedName(): void
    {
        self::assertEquals(
            'Afghanistan',
            CountryEnum::Afghanistan->getName()
        );
        self::assertEquals(
            'Åland Islands',
            CountryEnum::AlandIslands->getName()
        );
        self::assertEquals(
            'Albania',
            CountryEnum::Albania->getName()
        );
        self::assertEquals(
            'Algeria',
            CountryEnum::Algeria->getName()
        );
        self::assertEquals(
            'American Samoa',
            CountryEnum::AmericanSamoa->getName()
        );
        self::assertEquals(
            'Andorra',
            CountryEnum::Andorra->getName()
        );
        self::assertEquals(
            'Angola',
            CountryEnum::Angola->getName()
        );
        self::assertEquals(
            'Anguilla',
            CountryEnum::Anguilla->getName()
        );
        self::assertEquals(
            'Antarctica',
            CountryEnum::Antarctica->getName()
        );
        self::assertEquals(
            'Antigua and Barbuda',
            CountryEnum::AntiguaandBarbuda->getName()
        );
        self::assertEquals(
            'Argentina',
            CountryEnum::Argentina->getName()
        );
        self::assertEquals(
            'Armenia',
            CountryEnum::Armenia->getName()
        );
        self::assertEquals(
            'Aruba',
            CountryEnum::Aruba->getName()
        );
        self::assertEquals(
            'Australia',
            CountryEnum::Australia->getName()
        );
        self::assertEquals(
            'Austria',
            CountryEnum::Austria->getName()
        );
        self::assertEquals(
            'Azerbaijan',
            CountryEnum::Azerbaijan->getName()
        );
        self::assertEquals(
            'Bahamas',
            CountryEnum::Bahamas->getName()
        );
        self::assertEquals(
            'Bahrain',
            CountryEnum::Bahrain->getName()
        );
        self::assertEquals(
            'Bangladesh',
            CountryEnum::Bangladesh->getName()
        );
        self::assertEquals(
            'Barbados',
            CountryEnum::Barbados->getName()
        );
        self::assertEquals(
            'Belarus',
            CountryEnum::Belarus->getName()
        );
        self::assertEquals(
            'Belgium',
            CountryEnum::Belgium->getName()
        );
        self::assertEquals(
            'Belize',
            CountryEnum::Belize->getName()
        );
        self::assertEquals(
            'Benin',
            CountryEnum::Benin->getName()
        );
        self::assertEquals(
            'Bermuda',
            CountryEnum::Bermuda->getName()
        );
        self::assertEquals(
            'Bhutan',
            CountryEnum::Bhutan->getName()
        );
        self::assertEquals(
            'Bolivia, Plurinational State of',
            CountryEnum::Bolivia->getName()
        );
        self::assertEquals(
            'Bonaire, Sint Eustatius and Saba',
            CountryEnum::Bonaire->getName()
        );
        self::assertEquals(
            'Bosnia and Herzegovina',
            CountryEnum::BosniaandHerzegovina->getName()
        );
        self::assertEquals(
            'Botswana',
            CountryEnum::Botswana->getName()
        );
        self::assertEquals(
            'Bouvet Island',
            CountryEnum::BouvetIsland->getName()
        );
        self::assertEquals(
            'Brazil',
            CountryEnum::Brazil->getName()
        );
        self::assertEquals(
            'British Indian Ocean Territory',
            CountryEnum::BritishIndianOceanTerritory->getName()
        );
        self::assertEquals(
            'Virgin Islands, British',
            CountryEnum::BritishVirginIslands->getName()
        );
        self::assertEquals(
            'Brunei Darussalam',
            CountryEnum::BruneiDarussalam->getName()
        );
        self::assertEquals(
            'Bulgaria',
            CountryEnum::Bulgaria->getName()
        );
        self::assertEquals(
            'Burkina Faso',
            CountryEnum::BurkinaFaso->getName()
        );
        self::assertEquals(
            'Burundi',
            CountryEnum::Burundi->getName()
        );
        self::assertEquals(
            'Cambodia',
            CountryEnum::Cambodia->getName()
        );
        self::assertEquals(
            'Cameroon',
            CountryEnum::Cameroon->getName()
        );
        self::assertEquals(
            'Canada',
            CountryEnum::Canada->getName()
        );
        self::assertEquals(
            'Cape Verde',
            CountryEnum::CapeVerde->getName()
        );
        self::assertEquals(
            'Cayman Islands',
            CountryEnum::CaymanIslands->getName()
        );
        self::assertEquals(
            'Central African Republic',
            CountryEnum::CentralAfricanRepublic->getName()
        );
        self::assertEquals(
            'Chad',
            CountryEnum::Chad->getName()
        );
        self::assertEquals(
            'Chile',
            CountryEnum::Chile->getName()
        );
        self::assertEquals(
            'China',
            CountryEnum::China->getName()
        );
        self::assertEquals(
            'Christmas Island',
            CountryEnum::ChristmasIsland->getName()
        );
        self::assertEquals(
            'Cocos (Keeling) Islands',
            CountryEnum::CocosIslands->getName()
        );
        self::assertEquals(
            'Colombia',
            CountryEnum::Colombia->getName()
        );
        self::assertEquals(
            'Comoros',
            CountryEnum::Comoros->getName()
        );
        self::assertEquals(
            'Congo',
            CountryEnum::Congo->getName()
        );
        self::assertEquals(
            'Congo, the Democratic Republic of the',
            CountryEnum::CongoDR->getName()
        );
        self::assertEquals(
            'Cook Islands',
            CountryEnum::CookIslands->getName()
        );
        self::assertEquals(
            'Costa Rica',
            CountryEnum::CostaRica->getName()
        );
        self::assertEquals(
            'Côte d\'Ivoire',
            CountryEnum::CotedIvoire->getName()
        );
        self::assertEquals(
            'Croatia',
            CountryEnum::Croatia->getName()
        );
        self::assertEquals(
            'Cuba',
            CountryEnum::Cuba->getName()
        );
        self::assertEquals(
            'Curaçao',
            CountryEnum::Curacao->getName()
        );
        self::assertEquals(
            'Cyprus',
            CountryEnum::Cyprus->getName()
        );
        self::assertEquals(
            'Czechia',
            CountryEnum::Czechia->getName()
        );
        self::assertEquals(
            'Denmark',
            CountryEnum::Denmark->getName()
        );
        self::assertEquals(
            'Djibouti',
            CountryEnum::Djibouti->getName()
        );
        self::assertEquals(
            'Dominica',
            CountryEnum::Dominica->getName()
        );
        self::assertEquals(
            'Dominican Republic',
            CountryEnum::DominicanRepublic->getName()
        );
        self::assertEquals(
            'Ecuador',
            CountryEnum::Ecuador->getName()
        );
        self::assertEquals(
            'Egypt',
            CountryEnum::Egypt->getName()
        );
        self::assertEquals(
            'El Salvador',
            CountryEnum::ElSalvador->getName()
        );
        self::assertEquals(
            'Equatorial Guinea',
            CountryEnum::EquatorialGuinea->getName()
        );
        self::assertEquals(
            'Eritrea',
            CountryEnum::Eritrea->getName()
        );
        self::assertEquals(
            'Estonia',
            CountryEnum::Estonia->getName()
        );
        self::assertEquals(
            'Ethiopia',
            CountryEnum::Ethiopia->getName()
        );
        self::assertEquals(
            'Falkland Islands (Malvinas)',
            CountryEnum::FalklandIslands->getName()
        );
        self::assertEquals(
            'Faroe Islands',
            CountryEnum::FaroeIslands->getName()
        );
        self::assertEquals(
            'Fiji',
            CountryEnum::Fiji->getName()
        );
        self::assertEquals(
            'Finland',
            CountryEnum::Finland->getName()
        );
        self::assertEquals(
            'France',
            CountryEnum::France->getName()
        );
        self::assertEquals(
            'French Guiana',
            CountryEnum::FrenchGuiana->getName()
        );
        self::assertEquals(
            'French Polynesia',
            CountryEnum::FrenchPolynesia->getName()
        );
        self::assertEquals(
            'French Southern Territories',
            CountryEnum::FrenchSouthernTerritories->getName()
        );
        self::assertEquals(
            'Gabon',
            CountryEnum::Gabon->getName()
        );
        self::assertEquals(
            'Gambia',
            CountryEnum::Gambia->getName()
        );
        self::assertEquals(
            'Georgia',
            CountryEnum::Georgia->getName()
        );
        self::assertEquals(
            'Germany',
            CountryEnum::Germany->getName()
        );
        self::assertEquals(
            'Ghana',
            CountryEnum::Ghana->getName()
        );
        self::assertEquals(
            'Gibraltar',
            CountryEnum::Gibraltar->getName()
        );
        self::assertEquals(
            'Greece',
            CountryEnum::Greece->getName()
        );
        self::assertEquals(
            'Greenland',
            CountryEnum::Greenland->getName()
        );
        self::assertEquals(
            'Grenada',
            CountryEnum::Grenada->getName()
        );
        self::assertEquals(
            'Guadeloupe',
            CountryEnum::Guadeloupe->getName()
        );
        self::assertEquals(
            'Guam',
            CountryEnum::Guam->getName()
        );
        self::assertEquals(
            'Guatemala',
            CountryEnum::Guatemala->getName()
        );
        self::assertEquals(
            'Guernsey',
            CountryEnum::Guernsey->getName()
        );
        self::assertEquals(
            'Guinea',
            CountryEnum::Guinea->getName()
        );
        self::assertEquals(
            'Guinea-Bissau',
            CountryEnum::GuineaBissau->getName()
        );
        self::assertEquals(
            'Guyana',
            CountryEnum::Guyana->getName()
        );
        self::assertEquals(
            'Haiti',
            CountryEnum::Haiti->getName()
        );
        self::assertEquals(
            'Heard Island and McDonald Islands',
            CountryEnum::HeardIslandandMcDonaldIslands->getName()
        );
        self::assertEquals(
            'Holy See (Vatican City State)',
            CountryEnum::HolySee->getName()
        );
        self::assertEquals(
            'Honduras',
            CountryEnum::Honduras->getName()
        );
        self::assertEquals(
            'Hong Kong',
            CountryEnum::HongKong->getName()
        );
        self::assertEquals(
            'Hungary',
            CountryEnum::Hungary->getName()
        );
        self::assertEquals(
            'Iceland',
            CountryEnum::Iceland->getName()
        );
        self::assertEquals(
            'India',
            CountryEnum::India->getName()
        );
        self::assertEquals(
            'Indonesia',
            CountryEnum::Indonesia->getName()
        );
        self::assertEquals(
            'Iran, Islamic Republic of',
            CountryEnum::Iran->getName()
        );
        self::assertEquals(
            'Iraq',
            CountryEnum::Iraq->getName()
        );
        self::assertEquals(
            'Ireland',
            CountryEnum::Ireland->getName()
        );
        self::assertEquals(
            'Isle of Man',
            CountryEnum::IsleofMan->getName()
        );
        self::assertEquals(
            'Israel',
            CountryEnum::Israel->getName()
        );
        self::assertEquals(
            'Italy',
            CountryEnum::Italy->getName()
        );
        self::assertEquals(
            'Jamaica',
            CountryEnum::Jamaica->getName()
        );
        self::assertEquals(
            'Japan',
            CountryEnum::Japan->getName()
        );
        self::assertEquals(
            'Jersey',
            CountryEnum::Jersey->getName()
        );
        self::assertEquals(
            'Jordan',
            CountryEnum::Jordan->getName()
        );
        self::assertEquals(
            'Kazakhstan',
            CountryEnum::Kazakhstan->getName()
        );
        self::assertEquals(
            'Kenya',
            CountryEnum::Kenya->getName()
        );
        self::assertEquals(
            'Kiribati',
            CountryEnum::Kiribati->getName()
        );
        self::assertEquals(
            'Korea, Republic of',
            CountryEnum::Korea->getName()
        );
        self::assertEquals(
            'Korea, Democratic People\'s Republic of',
            CountryEnum::KoreaDR->getName()
        );
        self::assertEquals(
            'Kuwait',
            CountryEnum::Kuwait->getName()
        );
        self::assertEquals(
            'Kyrgyzstan',
            CountryEnum::Kyrgyzstan->getName()
        );
        self::assertEquals(
            'Lao People\'s Democratic Republic',
            CountryEnum::LaoPeoplesDemocraticRepublic->getName()
        );
        self::assertEquals(
            'Latvia',
            CountryEnum::Latvia->getName()
        );
        self::assertEquals(
            'Lebanon',
            CountryEnum::Lebanon->getName()
        );
        self::assertEquals(
            'Lesotho',
            CountryEnum::Lesotho->getName()
        );
        self::assertEquals(
            'Liberia',
            CountryEnum::Liberia->getName()
        );
        self::assertEquals(
            'Libya',
            CountryEnum::Libya->getName()
        );
        self::assertEquals(
            'Liechtenstein',
            CountryEnum::Liechtenstein->getName()
        );
        self::assertEquals(
            'Lithuania',
            CountryEnum::Lithuania->getName()
        );
        self::assertEquals(
            'Luxembourg',
            CountryEnum::Luxembourg->getName()
        );
        self::assertEquals(
            'Macao',
            CountryEnum::Macao->getName()
        );
        self::assertEquals(
            'Macedonia, the former Yugoslav Republic of',
            CountryEnum::Macedonia->getName()
        );
        self::assertEquals(
            'Madagascar',
            CountryEnum::Madagascar->getName()
        );
        self::assertEquals(
            'Malawi',
            CountryEnum::Malawi->getName()
        );
        self::assertEquals(
            'Malaysia',
            CountryEnum::Malaysia->getName()
        );
        self::assertEquals(
            'Maldives',
            CountryEnum::Maldives->getName()
        );
        self::assertEquals(
            'Mali',
            CountryEnum::Mali->getName()
        );
        self::assertEquals(
            'Malta',
            CountryEnum::Malta->getName()
        );
        self::assertEquals(
            'Marshall Islands',
            CountryEnum::MarshallIslands->getName()
        );
        self::assertEquals(
            'Martinique',
            CountryEnum::Martinique->getName()
        );
        self::assertEquals(
            'Mauritania',
            CountryEnum::Mauritania->getName()
        );
        self::assertEquals(
            'Mauritius',
            CountryEnum::Mauritius->getName()
        );
        self::assertEquals(
            'Mayotte',
            CountryEnum::Mayotte->getName()
        );
        self::assertEquals(
            'Mexico',
            CountryEnum::Mexico->getName()
        );
        self::assertEquals(
            'Micronesia, Federated States of',
            CountryEnum::Micronesia->getName()
        );
        self::assertEquals(
            'Moldova, Republic of',
            CountryEnum::Moldova->getName()
        );
        self::assertEquals(
            'Monaco',
            CountryEnum::Monaco->getName()
        );
        self::assertEquals(
            'Mongolia',
            CountryEnum::Mongolia->getName()
        );
        self::assertEquals(
            'Montenegro',
            CountryEnum::Montenegro->getName()
        );
        self::assertEquals(
            'Montserrat',
            CountryEnum::Montserrat->getName()
        );
        self::assertEquals(
            'Morocco',
            CountryEnum::Morocco->getName()
        );
        self::assertEquals(
            'Mozambique',
            CountryEnum::Mozambique->getName()
        );
        self::assertEquals(
            'Myanmar',
            CountryEnum::Myanmar->getName()
        );
        self::assertEquals(
            'Namibia',
            CountryEnum::Namibia->getName()
        );
        self::assertEquals(
            'Nauru',
            CountryEnum::Nauru->getName()
        );
        self::assertEquals(
            'Nepal',
            CountryEnum::Nepal->getName()
        );
        self::assertEquals(
            'Netherlands',
            CountryEnum::Netherlands->getName()
        );
        self::assertEquals(
            'New Caledonia',
            CountryEnum::NewCaledonia->getName()
        );
        self::assertEquals(
            'New Zealand',
            CountryEnum::NewZealand->getName()
        );
        self::assertEquals(
            'Nicaragua',
            CountryEnum::Nicaragua->getName()
        );
        self::assertEquals(
            'Niger',
            CountryEnum::Niger->getName()
        );
        self::assertEquals(
            'Nigeria',
            CountryEnum::Nigeria->getName()
        );
        self::assertEquals(
            'Niue',
            CountryEnum::Niue->getName()
        );
        self::assertEquals(
            'Norfolk Island',
            CountryEnum::NorfolkIsland->getName()
        );
        self::assertEquals(
            'Northern Mariana Islands',
            CountryEnum::NorthernMarianaIslands->getName()
        );
        self::assertEquals(
            'Norway',
            CountryEnum::Norway->getName()
        );
        self::assertEquals(
            'Oman',
            CountryEnum::Oman->getName()
        );
        self::assertEquals(
            'Pakistan',
            CountryEnum::Pakistan->getName()
        );
        self::assertEquals(
            'Palau',
            CountryEnum::Palau->getName()
        );
        self::assertEquals(
            'Palestine',
            CountryEnum::Palestine->getName()
        );
        self::assertEquals(
            'Panama',
            CountryEnum::Panama->getName()
        );
        self::assertEquals(
            'Papua New Guinea',
            CountryEnum::PapuaNewGuinea->getName()
        );
        self::assertEquals(
            'Paraguay',
            CountryEnum::Paraguay->getName()
        );
        self::assertEquals(
            'Peru',
            CountryEnum::Peru->getName()
        );
        self::assertEquals(
            'Philippines',
            CountryEnum::Philippines->getName()
        );
        self::assertEquals(
            'Pitcairn',
            CountryEnum::Pitcairn->getName()
        );
        self::assertEquals(
            'Poland',
            CountryEnum::Poland->getName()
        );
        self::assertEquals(
            'Portugal',
            CountryEnum::Portugal->getName()
        );
        self::assertEquals(
            'Puerto Rico',
            CountryEnum::PuertoRico->getName()
        );
        self::assertEquals(
            'Qatar',
            CountryEnum::Qatar->getName()
        );
        self::assertEquals(
            'Réunion',
            CountryEnum::Reunion->getName()
        );
        self::assertEquals(
            'Romania',
            CountryEnum::Romania->getName()
        );
        self::assertEquals(
            'Russian Federation',
            CountryEnum::RussianFederation->getName()
        );
        self::assertEquals(
            'Rwanda',
            CountryEnum::Rwanda->getName()
        );
        self::assertEquals(
            'Saint Barthélemy',
            CountryEnum::SaintBarthelemy->getName()
        );
        self::assertEquals(
            'Saint Helena, Ascension and Tristan da Cunha',
            CountryEnum::SaintHelena->getName()
        );
        self::assertEquals(
            'Saint Kitts and Nevis',
            CountryEnum::SaintKittsandNevis->getName()
        );
        self::assertEquals(
            'Saint Lucia',
            CountryEnum::SaintLucia->getName()
        );
        self::assertEquals(
            'Saint Martin (French part)',
            CountryEnum::SaintMartinFrench->getName()
        );
        self::assertEquals(
            'Saint Pierre and Miquelon',
            CountryEnum::SaintPierreandMiquelon->getName()
        );
        self::assertEquals(
            'Saint Vincent and the Grenadines',
            CountryEnum::SaintVincentandtheGrenadines->getName()
        );
        self::assertEquals(
            'Samoa',
            CountryEnum::Samoa->getName()
        );
        self::assertEquals(
            'San Marino',
            CountryEnum::SanMarino->getName()
        );
        self::assertEquals(
            'Sao Tome and Principe',
            CountryEnum::SaoTomeandPrincipe->getName()
        );
        self::assertEquals(
            'Saudi Arabia',
            CountryEnum::SaudiArabia->getName()
        );
        self::assertEquals(
            'Senegal',
            CountryEnum::Senegal->getName()
        );
        self::assertEquals(
            'Serbia',
            CountryEnum::Serbia->getName()
        );
        self::assertEquals(
            'Seychelles',
            CountryEnum::Seychelles->getName()
        );
        self::assertEquals(
            'Sierra Leone',
            CountryEnum::SierraLeone->getName()
        );
        self::assertEquals(
            'Singapore',
            CountryEnum::Singapore->getName()
        );
        self::assertEquals(
            'Sint Maarten (Dutch part)',
            CountryEnum::SintMaartenDutch->getName()
        );
        self::assertEquals(
            'Slovakia',
            CountryEnum::Slovakia->getName()
        );
        self::assertEquals(
            'Slovenia',
            CountryEnum::Slovenia->getName()
        );
        self::assertEquals(
            'Solomon Islands',
            CountryEnum::SolomonIslands->getName()
        );
        self::assertEquals(
            'Somalia',
            CountryEnum::Somalia->getName()
        );
        self::assertEquals(
            'South Africa',
            CountryEnum::SouthAfrica->getName()
        );
        self::assertEquals(
            'South Georgia and the South Sandwich Islands',
            CountryEnum::SouthGeorgiaandtheSouthSandwichIslands->getName()
        );
        self::assertEquals(
            'South Sudan',
            CountryEnum::SouthSudan->getName()
        );
        self::assertEquals(
            'Spain',
            CountryEnum::Spain->getName()
        );
        self::assertEquals(
            'Sri Lanka',
            CountryEnum::SriLanka->getName()
        );
        self::assertEquals(
            'Sudan',
            CountryEnum::Sudan->getName()
        );
        self::assertEquals(
            'Suriname',
            CountryEnum::Suriname->getName()
        );
        self::assertEquals(
            'Svalbard and Jan Mayen',
            CountryEnum::SvalbardandJanMayen->getName()
        );
        self::assertEquals(
            'Swaziland',
            CountryEnum::Swaziland->getName()
        );
        self::assertEquals(
            'Sweden',
            CountryEnum::Sweden->getName()
        );
        self::assertEquals(
            'Switzerland',
            CountryEnum::Switzerland->getName()
        );
        self::assertEquals(
            'Syrian Arab Republic',
            CountryEnum::SyrianArabRepublic->getName()
        );
        self::assertEquals(
            'Taiwan, Province of China',
            CountryEnum::Taiwan->getName()
        );
        self::assertEquals(
            'Tajikistan',
            CountryEnum::Tajikistan->getName()
        );
        self::assertEquals(
            'Tanzania, United Republic of',
            CountryEnum::Tanzania->getName()
        );
        self::assertEquals(
            'Thailand',
            CountryEnum::Thailand->getName()
        );
        self::assertEquals(
            'Timor-Leste',
            CountryEnum::TimorLeste->getName()
        );
        self::assertEquals(
            'Togo',
            CountryEnum::Togo->getName()
        );
        self::assertEquals(
            'Tokelau',
            CountryEnum::Tokelau->getName()
        );
        self::assertEquals(
            'Tonga',
            CountryEnum::Tonga->getName()
        );
        self::assertEquals(
            'Trinidad and Tobago',
            CountryEnum::TrinidadandTobago->getName()
        );
        self::assertEquals(
            'Tunisia',
            CountryEnum::Tunisia->getName()
        );
        self::assertEquals(
            'Turkey',
            CountryEnum::Turkey->getName()
        );
        self::assertEquals(
            'Turkmenistan',
            CountryEnum::Turkmenistan->getName()
        );
        self::assertEquals(
            'Turks and Caicos Islands',
            CountryEnum::TurksandCaicosIslands->getName()
        );
        self::assertEquals(
            'Tuvalu',
            CountryEnum::Tuvalu->getName()
        );
        self::assertEquals(
            'Uganda',
            CountryEnum::Uganda->getName()
        );
        self::assertEquals(
            'Ukraine',
            CountryEnum::Ukraine->getName()
        );
        self::assertEquals(
            'United Arab Emirates',
            CountryEnum::UnitedArabEmirates->getName()
        );
        self::assertEquals(
            'United Kingdom',
            CountryEnum::UnitedKingdom->getName()
        );
        self::assertEquals(
            'United States',
            CountryEnum::UnitedStates->getName()
        );
        self::assertEquals(
            'United States Minor Outlying Islands',
            CountryEnum::UnitedStatesMinorOutlyingIslands->getName()
        );
        self::assertEquals(
            'Uruguay',
            CountryEnum::Uruguay->getName()
        );
        self::assertEquals(
            'Uzbekistan',
            CountryEnum::Uzbekistan->getName()
        );
        self::assertEquals(
            'Vanuatu',
            CountryEnum::Vanuatu->getName()
        );
        self::assertEquals(
            'Venezuela, Bolivarian Republic of',
            CountryEnum::Venezuela->getName()
        );
        self::assertEquals(
            'Viet Nam',
            CountryEnum::VietNam->getName()
        );
        self::assertEquals(
            'Virgin Islands, U.S.',
            CountryEnum::VirginIslands->getName()
        );
        self::assertEquals(
            'Wallis and Futuna',
            CountryEnum::WallisandFutuna->getName()
        );
        self::assertEquals(
            'Western Sahara',
            CountryEnum::WesternSahara->getName()
        );
        self::assertEquals(
            'Yemen',
            CountryEnum::Yemen->getName()
        );
        self::assertEquals(
            'Zambia',
            CountryEnum::Zambia->getName()
        );
        self::assertEquals(
            'Zimbabwe',
            CountryEnum::Zimbabwe->getName()
        );
    }

    public function testExpectedRegionCode(): void
    {
        self::assertEquals(
            '142',
            CountryEnum::Afghanistan->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::AlandIslands->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Albania->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Algeria->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::AmericanSamoa->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Andorra->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Angola->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Anguilla->getRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::Antarctica->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::AntiguaandBarbuda->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Argentina->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Armenia->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Aruba->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::Australia->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Austria->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Azerbaijan->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Bahamas->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Bahrain->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Bangladesh->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Barbados->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Belarus->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Belgium->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Belize->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Benin->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Bermuda->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Bhutan->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Bolivia->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Bonaire->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::BosniaandHerzegovina->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Botswana->getRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::BouvetIsland->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Brazil->getRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::BritishIndianOceanTerritory->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::BritishVirginIslands->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::BruneiDarussalam->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Bulgaria->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::BurkinaFaso->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Burundi->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Cambodia->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Cameroon->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Canada->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::CapeVerde->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::CaymanIslands->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::CentralAfricanRepublic->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Chad->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Chile->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::China->getRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::ChristmasIsland->getRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::CocosIslands->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Colombia->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Comoros->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Congo->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::CongoDR->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::CookIslands->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::CostaRica->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::CotedIvoire->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Croatia->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Cuba->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Curacao->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Cyprus->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Czechia->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Denmark->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Djibouti->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Dominica->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::DominicanRepublic->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Ecuador->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Egypt->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::ElSalvador->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::EquatorialGuinea->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Eritrea->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Estonia->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Ethiopia->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::FalklandIslands->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::FaroeIslands->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::Fiji->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Finland->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::France->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::FrenchGuiana->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::FrenchPolynesia->getRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::FrenchSouthernTerritories->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Gabon->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Gambia->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Georgia->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Germany->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Ghana->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Gibraltar->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Greece->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Greenland->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Grenada->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Guadeloupe->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::Guam->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Guatemala->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Guernsey->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Guinea->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::GuineaBissau->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Guyana->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Haiti->getRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::HeardIslandandMcDonaldIslands->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::HolySee->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Honduras->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::HongKong->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Hungary->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Iceland->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::India->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Indonesia->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Iran->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Iraq->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Ireland->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::IsleofMan->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Israel->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Italy->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Jamaica->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Japan->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Jersey->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Jordan->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Kazakhstan->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Kenya->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::Kiribati->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Korea->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::KoreaDR->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Kuwait->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Kyrgyzstan->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::LaoPeoplesDemocraticRepublic->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Latvia->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Lebanon->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Lesotho->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Liberia->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Libya->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Liechtenstein->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Lithuania->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Luxembourg->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Macao->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Macedonia->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Madagascar->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Malawi->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Malaysia->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Maldives->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Mali->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Malta->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::MarshallIslands->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Martinique->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Mauritania->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Mauritius->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Mayotte->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Mexico->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::Micronesia->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Moldova->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Monaco->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Mongolia->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Montenegro->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Montserrat->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Morocco->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Mozambique->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Myanmar->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Namibia->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::Nauru->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Nepal->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Netherlands->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::NewCaledonia->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::NewZealand->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Nicaragua->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Niger->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Nigeria->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::Niue->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::NorfolkIsland->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::NorthernMarianaIslands->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Norway->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Oman->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Pakistan->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::Palau->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Palestine->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Panama->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::PapuaNewGuinea->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Paraguay->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Peru->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Philippines->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::Pitcairn->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Poland->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Portugal->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::PuertoRico->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Qatar->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Reunion->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Romania->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::RussianFederation->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Rwanda->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::SaintBarthelemy->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::SaintHelena->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::SaintKittsandNevis->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::SaintLucia->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::SaintMartinFrench->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::SaintPierreandMiquelon->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::SaintVincentandtheGrenadines->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::Samoa->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::SanMarino->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::SaoTomeandPrincipe->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::SaudiArabia->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Senegal->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Serbia->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Seychelles->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::SierraLeone->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Singapore->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::SintMaartenDutch->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Slovakia->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Slovenia->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::SolomonIslands->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Somalia->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::SouthAfrica->getRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::SouthGeorgiaandtheSouthSandwichIslands->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::SouthSudan->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Spain->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::SriLanka->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Sudan->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Suriname->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::SvalbardandJanMayen->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Swaziland->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Sweden->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Switzerland->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::SyrianArabRepublic->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Taiwan->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Tajikistan->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Tanzania->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Thailand->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::TimorLeste->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Togo->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::Tokelau->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::Tonga->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::TrinidadandTobago->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Tunisia->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Turkey->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Turkmenistan->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::TurksandCaicosIslands->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::Tuvalu->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Uganda->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::Ukraine->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::UnitedArabEmirates->getRegionCode()
        );
        self::assertEquals(
            '150',
            CountryEnum::UnitedKingdom->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::UnitedStates->getRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::UnitedStatesMinorOutlyingIslands->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Uruguay->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Uzbekistan->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::Vanuatu->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::Venezuela->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::VietNam->getRegionCode()
        );
        self::assertEquals(
            '019',
            CountryEnum::VirginIslands->getRegionCode()
        );
        self::assertEquals(
            '009',
            CountryEnum::WallisandFutuna->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::WesternSahara->getRegionCode()
        );
        self::assertEquals(
            '142',
            CountryEnum::Yemen->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Zambia->getRegionCode()
        );
        self::assertEquals(
            '002',
            CountryEnum::Zimbabwe->getRegionCode()
        );
    }

    public function testExpectedSubRegionCode(): void
    {
        self::assertEquals(
            '034',
            CountryEnum::Afghanistan->getSubRegionCode()
        );
        self::assertEquals(
            '154',
            CountryEnum::AlandIslands->getSubRegionCode()
        );
        self::assertEquals(
            '039',
            CountryEnum::Albania->getSubRegionCode()
        );
        self::assertEquals(
            '015',
            CountryEnum::Algeria->getSubRegionCode()
        );
        self::assertEquals(
            '061',
            CountryEnum::AmericanSamoa->getSubRegionCode()
        );
        self::assertEquals(
            '039',
            CountryEnum::Andorra->getSubRegionCode()
        );
        self::assertEquals(
            '017',
            CountryEnum::Angola->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::Anguilla->getSubRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::Antarctica->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::AntiguaandBarbuda->getSubRegionCode()
        );
        self::assertEquals(
            '005',
            CountryEnum::Argentina->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::Armenia->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::Aruba->getSubRegionCode()
        );
        self::assertEquals(
            '053',
            CountryEnum::Australia->getSubRegionCode()
        );
        self::assertEquals(
            '155',
            CountryEnum::Austria->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::Azerbaijan->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::Bahamas->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::Bahrain->getSubRegionCode()
        );
        self::assertEquals(
            '034',
            CountryEnum::Bangladesh->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::Barbados->getSubRegionCode()
        );
        self::assertEquals(
            '151',
            CountryEnum::Belarus->getSubRegionCode()
        );
        self::assertEquals(
            '155',
            CountryEnum::Belgium->getSubRegionCode()
        );
        self::assertEquals(
            '013',
            CountryEnum::Belize->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::Benin->getSubRegionCode()
        );
        self::assertEquals(
            '021',
            CountryEnum::Bermuda->getSubRegionCode()
        );
        self::assertEquals(
            '034',
            CountryEnum::Bhutan->getSubRegionCode()
        );
        self::assertEquals(
            '005',
            CountryEnum::Bolivia->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::Bonaire->getSubRegionCode()
        );
        self::assertEquals(
            '039',
            CountryEnum::BosniaandHerzegovina->getSubRegionCode()
        );
        self::assertEquals(
            '018',
            CountryEnum::Botswana->getSubRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::BouvetIsland->getSubRegionCode()
        );
        self::assertEquals(
            '005',
            CountryEnum::Brazil->getSubRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::BritishIndianOceanTerritory->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::BritishVirginIslands->getSubRegionCode()
        );
        self::assertEquals(
            '035',
            CountryEnum::BruneiDarussalam->getSubRegionCode()
        );
        self::assertEquals(
            '151',
            CountryEnum::Bulgaria->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::BurkinaFaso->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Burundi->getSubRegionCode()
        );
        self::assertEquals(
            '035',
            CountryEnum::Cambodia->getSubRegionCode()
        );
        self::assertEquals(
            '017',
            CountryEnum::Cameroon->getSubRegionCode()
        );
        self::assertEquals(
            '021',
            CountryEnum::Canada->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::CapeVerde->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::CaymanIslands->getSubRegionCode()
        );
        self::assertEquals(
            '017',
            CountryEnum::CentralAfricanRepublic->getSubRegionCode()
        );
        self::assertEquals(
            '017',
            CountryEnum::Chad->getSubRegionCode()
        );
        self::assertEquals(
            '005',
            CountryEnum::Chile->getSubRegionCode()
        );
        self::assertEquals(
            '030',
            CountryEnum::China->getSubRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::ChristmasIsland->getSubRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::CocosIslands->getSubRegionCode()
        );
        self::assertEquals(
            '005',
            CountryEnum::Colombia->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Comoros->getSubRegionCode()
        );
        self::assertEquals(
            '017',
            CountryEnum::Congo->getSubRegionCode()
        );
        self::assertEquals(
            '017',
            CountryEnum::CongoDR->getSubRegionCode()
        );
        self::assertEquals(
            '061',
            CountryEnum::CookIslands->getSubRegionCode()
        );
        self::assertEquals(
            '013',
            CountryEnum::CostaRica->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::CotedIvoire->getSubRegionCode()
        );
        self::assertEquals(
            '039',
            CountryEnum::Croatia->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::Cuba->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::Curacao->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::Cyprus->getSubRegionCode()
        );
        self::assertEquals(
            '151',
            CountryEnum::Czechia->getSubRegionCode()
        );
        self::assertEquals(
            '154',
            CountryEnum::Denmark->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Djibouti->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::Dominica->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::DominicanRepublic->getSubRegionCode()
        );
        self::assertEquals(
            '005',
            CountryEnum::Ecuador->getSubRegionCode()
        );
        self::assertEquals(
            '015',
            CountryEnum::Egypt->getSubRegionCode()
        );
        self::assertEquals(
            '013',
            CountryEnum::ElSalvador->getSubRegionCode()
        );
        self::assertEquals(
            '017',
            CountryEnum::EquatorialGuinea->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Eritrea->getSubRegionCode()
        );
        self::assertEquals(
            '154',
            CountryEnum::Estonia->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Ethiopia->getSubRegionCode()
        );
        self::assertEquals(
            '005',
            CountryEnum::FalklandIslands->getSubRegionCode()
        );
        self::assertEquals(
            '154',
            CountryEnum::FaroeIslands->getSubRegionCode()
        );
        self::assertEquals(
            '054',
            CountryEnum::Fiji->getSubRegionCode()
        );
        self::assertEquals(
            '154',
            CountryEnum::Finland->getSubRegionCode()
        );
        self::assertEquals(
            '155',
            CountryEnum::France->getSubRegionCode()
        );
        self::assertEquals(
            '005',
            CountryEnum::FrenchGuiana->getSubRegionCode()
        );
        self::assertEquals(
            '061',
            CountryEnum::FrenchPolynesia->getSubRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::FrenchSouthernTerritories->getSubRegionCode()
        );
        self::assertEquals(
            '017',
            CountryEnum::Gabon->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::Gambia->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::Georgia->getSubRegionCode()
        );
        self::assertEquals(
            '155',
            CountryEnum::Germany->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::Ghana->getSubRegionCode()
        );
        self::assertEquals(
            '039',
            CountryEnum::Gibraltar->getSubRegionCode()
        );
        self::assertEquals(
            '039',
            CountryEnum::Greece->getSubRegionCode()
        );
        self::assertEquals(
            '021',
            CountryEnum::Greenland->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::Grenada->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::Guadeloupe->getSubRegionCode()
        );
        self::assertEquals(
            '057',
            CountryEnum::Guam->getSubRegionCode()
        );
        self::assertEquals(
            '013',
            CountryEnum::Guatemala->getSubRegionCode()
        );
        self::assertEquals(
            '154',
            CountryEnum::Guernsey->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::Guinea->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::GuineaBissau->getSubRegionCode()
        );
        self::assertEquals(
            '005',
            CountryEnum::Guyana->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::Haiti->getSubRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::HeardIslandandMcDonaldIslands->getSubRegionCode()
        );
        self::assertEquals(
            '039',
            CountryEnum::HolySee->getSubRegionCode()
        );
        self::assertEquals(
            '013',
            CountryEnum::Honduras->getSubRegionCode()
        );
        self::assertEquals(
            '030',
            CountryEnum::HongKong->getSubRegionCode()
        );
        self::assertEquals(
            '151',
            CountryEnum::Hungary->getSubRegionCode()
        );
        self::assertEquals(
            '154',
            CountryEnum::Iceland->getSubRegionCode()
        );
        self::assertEquals(
            '034',
            CountryEnum::India->getSubRegionCode()
        );
        self::assertEquals(
            '035',
            CountryEnum::Indonesia->getSubRegionCode()
        );
        self::assertEquals(
            '034',
            CountryEnum::Iran->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::Iraq->getSubRegionCode()
        );
        self::assertEquals(
            '154',
            CountryEnum::Ireland->getSubRegionCode()
        );
        self::assertEquals(
            '154',
            CountryEnum::IsleofMan->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::Israel->getSubRegionCode()
        );
        self::assertEquals(
            '039',
            CountryEnum::Italy->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::Jamaica->getSubRegionCode()
        );
        self::assertEquals(
            '030',
            CountryEnum::Japan->getSubRegionCode()
        );
        self::assertEquals(
            '154',
            CountryEnum::Jersey->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::Jordan->getSubRegionCode()
        );
        self::assertEquals(
            '143',
            CountryEnum::Kazakhstan->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Kenya->getSubRegionCode()
        );
        self::assertEquals(
            '057',
            CountryEnum::Kiribati->getSubRegionCode()
        );
        self::assertEquals(
            '030',
            CountryEnum::Korea->getSubRegionCode()
        );
        self::assertEquals(
            '030',
            CountryEnum::KoreaDR->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::Kuwait->getSubRegionCode()
        );
        self::assertEquals(
            '143',
            CountryEnum::Kyrgyzstan->getSubRegionCode()
        );
        self::assertEquals(
            '035',
            CountryEnum::LaoPeoplesDemocraticRepublic->getSubRegionCode()
        );
        self::assertEquals(
            '154',
            CountryEnum::Latvia->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::Lebanon->getSubRegionCode()
        );
        self::assertEquals(
            '018',
            CountryEnum::Lesotho->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::Liberia->getSubRegionCode()
        );
        self::assertEquals(
            '015',
            CountryEnum::Libya->getSubRegionCode()
        );
        self::assertEquals(
            '155',
            CountryEnum::Liechtenstein->getSubRegionCode()
        );
        self::assertEquals(
            '154',
            CountryEnum::Lithuania->getSubRegionCode()
        );
        self::assertEquals(
            '155',
            CountryEnum::Luxembourg->getSubRegionCode()
        );
        self::assertEquals(
            '030',
            CountryEnum::Macao->getSubRegionCode()
        );
        self::assertEquals(
            '039',
            CountryEnum::Macedonia->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Madagascar->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Malawi->getSubRegionCode()
        );
        self::assertEquals(
            '035',
            CountryEnum::Malaysia->getSubRegionCode()
        );
        self::assertEquals(
            '034',
            CountryEnum::Maldives->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::Mali->getSubRegionCode()
        );
        self::assertEquals(
            '039',
            CountryEnum::Malta->getSubRegionCode()
        );
        self::assertEquals(
            '057',
            CountryEnum::MarshallIslands->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::Martinique->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::Mauritania->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Mauritius->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Mayotte->getSubRegionCode()
        );
        self::assertEquals(
            '013',
            CountryEnum::Mexico->getSubRegionCode()
        );
        self::assertEquals(
            '057',
            CountryEnum::Micronesia->getSubRegionCode()
        );
        self::assertEquals(
            '151',
            CountryEnum::Moldova->getSubRegionCode()
        );
        self::assertEquals(
            '155',
            CountryEnum::Monaco->getSubRegionCode()
        );
        self::assertEquals(
            '030',
            CountryEnum::Mongolia->getSubRegionCode()
        );
        self::assertEquals(
            '039',
            CountryEnum::Montenegro->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::Montserrat->getSubRegionCode()
        );
        self::assertEquals(
            '015',
            CountryEnum::Morocco->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Mozambique->getSubRegionCode()
        );
        self::assertEquals(
            '035',
            CountryEnum::Myanmar->getSubRegionCode()
        );
        self::assertEquals(
            '018',
            CountryEnum::Namibia->getSubRegionCode()
        );
        self::assertEquals(
            '057',
            CountryEnum::Nauru->getSubRegionCode()
        );
        self::assertEquals(
            '034',
            CountryEnum::Nepal->getSubRegionCode()
        );
        self::assertEquals(
            '155',
            CountryEnum::Netherlands->getSubRegionCode()
        );
        self::assertEquals(
            '054',
            CountryEnum::NewCaledonia->getSubRegionCode()
        );
        self::assertEquals(
            '053',
            CountryEnum::NewZealand->getSubRegionCode()
        );
        self::assertEquals(
            '013',
            CountryEnum::Nicaragua->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::Niger->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::Nigeria->getSubRegionCode()
        );
        self::assertEquals(
            '061',
            CountryEnum::Niue->getSubRegionCode()
        );
        self::assertEquals(
            '053',
            CountryEnum::NorfolkIsland->getSubRegionCode()
        );
        self::assertEquals(
            '057',
            CountryEnum::NorthernMarianaIslands->getSubRegionCode()
        );
        self::assertEquals(
            '154',
            CountryEnum::Norway->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::Oman->getSubRegionCode()
        );
        self::assertEquals(
            '034',
            CountryEnum::Pakistan->getSubRegionCode()
        );
        self::assertEquals(
            '057',
            CountryEnum::Palau->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::Palestine->getSubRegionCode()
        );
        self::assertEquals(
            '013',
            CountryEnum::Panama->getSubRegionCode()
        );
        self::assertEquals(
            '054',
            CountryEnum::PapuaNewGuinea->getSubRegionCode()
        );
        self::assertEquals(
            '005',
            CountryEnum::Paraguay->getSubRegionCode()
        );
        self::assertEquals(
            '005',
            CountryEnum::Peru->getSubRegionCode()
        );
        self::assertEquals(
            '035',
            CountryEnum::Philippines->getSubRegionCode()
        );
        self::assertEquals(
            '061',
            CountryEnum::Pitcairn->getSubRegionCode()
        );
        self::assertEquals(
            '151',
            CountryEnum::Poland->getSubRegionCode()
        );
        self::assertEquals(
            '039',
            CountryEnum::Portugal->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::PuertoRico->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::Qatar->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Reunion->getSubRegionCode()
        );
        self::assertEquals(
            '151',
            CountryEnum::Romania->getSubRegionCode()
        );
        self::assertEquals(
            '151',
            CountryEnum::RussianFederation->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Rwanda->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::SaintBarthelemy->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::SaintHelena->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::SaintKittsandNevis->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::SaintLucia->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::SaintMartinFrench->getSubRegionCode()
        );
        self::assertEquals(
            '021',
            CountryEnum::SaintPierreandMiquelon->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::SaintVincentandtheGrenadines->getSubRegionCode()
        );
        self::assertEquals(
            '061',
            CountryEnum::Samoa->getSubRegionCode()
        );
        self::assertEquals(
            '039',
            CountryEnum::SanMarino->getSubRegionCode()
        );
        self::assertEquals(
            '017',
            CountryEnum::SaoTomeandPrincipe->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::SaudiArabia->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::Senegal->getSubRegionCode()
        );
        self::assertEquals(
            '039',
            CountryEnum::Serbia->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Seychelles->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::SierraLeone->getSubRegionCode()
        );
        self::assertEquals(
            '035',
            CountryEnum::Singapore->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::SintMaartenDutch->getSubRegionCode()
        );
        self::assertEquals(
            '151',
            CountryEnum::Slovakia->getSubRegionCode()
        );
        self::assertEquals(
            '039',
            CountryEnum::Slovenia->getSubRegionCode()
        );
        self::assertEquals(
            '054',
            CountryEnum::SolomonIslands->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Somalia->getSubRegionCode()
        );
        self::assertEquals(
            '018',
            CountryEnum::SouthAfrica->getSubRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::SouthGeorgiaandtheSouthSandwichIslands->getSubRegionCode()
        );
        self::assertEquals(
            '015',
            CountryEnum::SouthSudan->getSubRegionCode()
        );
        self::assertEquals(
            '039',
            CountryEnum::Spain->getSubRegionCode()
        );
        self::assertEquals(
            '034',
            CountryEnum::SriLanka->getSubRegionCode()
        );
        self::assertEquals(
            '015',
            CountryEnum::Sudan->getSubRegionCode()
        );
        self::assertEquals(
            '005',
            CountryEnum::Suriname->getSubRegionCode()
        );
        self::assertEquals(
            '154',
            CountryEnum::SvalbardandJanMayen->getSubRegionCode()
        );
        self::assertEquals(
            '018',
            CountryEnum::Swaziland->getSubRegionCode()
        );
        self::assertEquals(
            '154',
            CountryEnum::Sweden->getSubRegionCode()
        );
        self::assertEquals(
            '155',
            CountryEnum::Switzerland->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::SyrianArabRepublic->getSubRegionCode()
        );
        self::assertEquals(
            '030',
            CountryEnum::Taiwan->getSubRegionCode()
        );
        self::assertEquals(
            '143',
            CountryEnum::Tajikistan->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Tanzania->getSubRegionCode()
        );
        self::assertEquals(
            '035',
            CountryEnum::Thailand->getSubRegionCode()
        );
        self::assertEquals(
            '035',
            CountryEnum::TimorLeste->getSubRegionCode()
        );
        self::assertEquals(
            '011',
            CountryEnum::Togo->getSubRegionCode()
        );
        self::assertEquals(
            '061',
            CountryEnum::Tokelau->getSubRegionCode()
        );
        self::assertEquals(
            '061',
            CountryEnum::Tonga->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::TrinidadandTobago->getSubRegionCode()
        );
        self::assertEquals(
            '015',
            CountryEnum::Tunisia->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::Turkey->getSubRegionCode()
        );
        self::assertEquals(
            '143',
            CountryEnum::Turkmenistan->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::TurksandCaicosIslands->getSubRegionCode()
        );
        self::assertEquals(
            '061',
            CountryEnum::Tuvalu->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Uganda->getSubRegionCode()
        );
        self::assertEquals(
            '151',
            CountryEnum::Ukraine->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::UnitedArabEmirates->getSubRegionCode()
        );
        self::assertEquals(
            '154',
            CountryEnum::UnitedKingdom->getSubRegionCode()
        );
        self::assertEquals(
            '021',
            CountryEnum::UnitedStates->getSubRegionCode()
        );
        self::assertEquals(
            '',
            CountryEnum::UnitedStatesMinorOutlyingIslands->getSubRegionCode()
        );
        self::assertEquals(
            '005',
            CountryEnum::Uruguay->getSubRegionCode()
        );
        self::assertEquals(
            '143',
            CountryEnum::Uzbekistan->getSubRegionCode()
        );
        self::assertEquals(
            '054',
            CountryEnum::Vanuatu->getSubRegionCode()
        );
        self::assertEquals(
            '005',
            CountryEnum::Venezuela->getSubRegionCode()
        );
        self::assertEquals(
            '035',
            CountryEnum::VietNam->getSubRegionCode()
        );
        self::assertEquals(
            '029',
            CountryEnum::VirginIslands->getSubRegionCode()
        );
        self::assertEquals(
            '061',
            CountryEnum::WallisandFutuna->getSubRegionCode()
        );
        self::assertEquals(
            '015',
            CountryEnum::WesternSahara->getSubRegionCode()
        );
        self::assertEquals(
            '145',
            CountryEnum::Yemen->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Zambia->getSubRegionCode()
        );
        self::assertEquals(
            '014',
            CountryEnum::Zimbabwe->getSubRegionCode()
        );
    }

    public function testExpectedValue(): void
    {
        self::assertEquals(
            '004',
            CountryEnum::Afghanistan->value
        );
        self::assertEquals(
            '248',
            CountryEnum::AlandIslands->value
        );
        self::assertEquals(
            '008',
            CountryEnum::Albania->value
        );
        self::assertEquals(
            '012',
            CountryEnum::Algeria->value
        );
        self::assertEquals(
            '016',
            CountryEnum::AmericanSamoa->value
        );
        self::assertEquals(
            '020',
            CountryEnum::Andorra->value
        );
        self::assertEquals(
            '024',
            CountryEnum::Angola->value
        );
        self::assertEquals(
            '660',
            CountryEnum::Anguilla->value
        );
        self::assertEquals(
            '010',
            CountryEnum::Antarctica->value
        );
        self::assertEquals(
            '028',
            CountryEnum::AntiguaandBarbuda->value
        );
        self::assertEquals(
            '032',
            CountryEnum::Argentina->value
        );
        self::assertEquals(
            '051',
            CountryEnum::Armenia->value
        );
        self::assertEquals(
            '533',
            CountryEnum::Aruba->value
        );
        self::assertEquals(
            '036',
            CountryEnum::Australia->value
        );
        self::assertEquals(
            '040',
            CountryEnum::Austria->value
        );
        self::assertEquals(
            '031',
            CountryEnum::Azerbaijan->value
        );
        self::assertEquals(
            '044',
            CountryEnum::Bahamas->value
        );
        self::assertEquals(
            '048',
            CountryEnum::Bahrain->value
        );
        self::assertEquals(
            '050',
            CountryEnum::Bangladesh->value
        );
        self::assertEquals(
            '052',
            CountryEnum::Barbados->value
        );
        self::assertEquals(
            '112',
            CountryEnum::Belarus->value
        );
        self::assertEquals(
            '056',
            CountryEnum::Belgium->value
        );
        self::assertEquals(
            '084',
            CountryEnum::Belize->value
        );
        self::assertEquals(
            '204',
            CountryEnum::Benin->value
        );
        self::assertEquals(
            '060',
            CountryEnum::Bermuda->value
        );
        self::assertEquals(
            '064',
            CountryEnum::Bhutan->value
        );
        self::assertEquals(
            '068',
            CountryEnum::Bolivia->value
        );
        self::assertEquals(
            '535',
            CountryEnum::Bonaire->value
        );
        self::assertEquals(
            '070',
            CountryEnum::BosniaandHerzegovina->value
        );
        self::assertEquals(
            '072',
            CountryEnum::Botswana->value
        );
        self::assertEquals(
            '074',
            CountryEnum::BouvetIsland->value
        );
        self::assertEquals(
            '076',
            CountryEnum::Brazil->value
        );
        self::assertEquals(
            '086',
            CountryEnum::BritishIndianOceanTerritory->value
        );
        self::assertEquals(
            '092',
            CountryEnum::BritishVirginIslands->value
        );
        self::assertEquals(
            '096',
            CountryEnum::BruneiDarussalam->value
        );
        self::assertEquals(
            '100',
            CountryEnum::Bulgaria->value
        );
        self::assertEquals(
            '854',
            CountryEnum::BurkinaFaso->value
        );
        self::assertEquals(
            '108',
            CountryEnum::Burundi->value
        );
        self::assertEquals(
            '116',
            CountryEnum::Cambodia->value
        );
        self::assertEquals(
            '120',
            CountryEnum::Cameroon->value
        );
        self::assertEquals(
            '124',
            CountryEnum::Canada->value
        );
        self::assertEquals(
            '132',
            CountryEnum::CapeVerde->value
        );
        self::assertEquals(
            '136',
            CountryEnum::CaymanIslands->value
        );
        self::assertEquals(
            '140',
            CountryEnum::CentralAfricanRepublic->value
        );
        self::assertEquals(
            '148',
            CountryEnum::Chad->value
        );
        self::assertEquals(
            '152',
            CountryEnum::Chile->value
        );
        self::assertEquals(
            '156',
            CountryEnum::China->value
        );
        self::assertEquals(
            '162',
            CountryEnum::ChristmasIsland->value
        );
        self::assertEquals(
            '166',
            CountryEnum::CocosIslands->value
        );
        self::assertEquals(
            '170',
            CountryEnum::Colombia->value
        );
        self::assertEquals(
            '174',
            CountryEnum::Comoros->value
        );
        self::assertEquals(
            '178',
            CountryEnum::Congo->value
        );
        self::assertEquals(
            '180',
            CountryEnum::CongoDR->value
        );
        self::assertEquals(
            '184',
            CountryEnum::CookIslands->value
        );
        self::assertEquals(
            '188',
            CountryEnum::CostaRica->value
        );
        self::assertEquals(
            '384',
            CountryEnum::CotedIvoire->value
        );
        self::assertEquals(
            '191',
            CountryEnum::Croatia->value
        );
        self::assertEquals(
            '192',
            CountryEnum::Cuba->value
        );
        self::assertEquals(
            '531',
            CountryEnum::Curacao->value
        );
        self::assertEquals(
            '196',
            CountryEnum::Cyprus->value
        );
        self::assertEquals(
            '203',
            CountryEnum::Czechia->value
        );
        self::assertEquals(
            '208',
            CountryEnum::Denmark->value
        );
        self::assertEquals(
            '262',
            CountryEnum::Djibouti->value
        );
        self::assertEquals(
            '212',
            CountryEnum::Dominica->value
        );
        self::assertEquals(
            '214',
            CountryEnum::DominicanRepublic->value
        );
        self::assertEquals(
            '218',
            CountryEnum::Ecuador->value
        );
        self::assertEquals(
            '818',
            CountryEnum::Egypt->value
        );
        self::assertEquals(
            '222',
            CountryEnum::ElSalvador->value
        );
        self::assertEquals(
            '226',
            CountryEnum::EquatorialGuinea->value
        );
        self::assertEquals(
            '232',
            CountryEnum::Eritrea->value
        );
        self::assertEquals(
            '233',
            CountryEnum::Estonia->value
        );
        self::assertEquals(
            '231',
            CountryEnum::Ethiopia->value
        );
        self::assertEquals(
            '238',
            CountryEnum::FalklandIslands->value
        );
        self::assertEquals(
            '234',
            CountryEnum::FaroeIslands->value
        );
        self::assertEquals(
            '242',
            CountryEnum::Fiji->value
        );
        self::assertEquals(
            '246',
            CountryEnum::Finland->value
        );
        self::assertEquals(
            '250',
            CountryEnum::France->value
        );
        self::assertEquals(
            '254',
            CountryEnum::FrenchGuiana->value
        );
        self::assertEquals(
            '258',
            CountryEnum::FrenchPolynesia->value
        );
        self::assertEquals(
            '260',
            CountryEnum::FrenchSouthernTerritories->value
        );
        self::assertEquals(
            '266',
            CountryEnum::Gabon->value
        );
        self::assertEquals(
            '270',
            CountryEnum::Gambia->value
        );
        self::assertEquals(
            '268',
            CountryEnum::Georgia->value
        );
        self::assertEquals(
            '276',
            CountryEnum::Germany->value
        );
        self::assertEquals(
            '288',
            CountryEnum::Ghana->value
        );
        self::assertEquals(
            '292',
            CountryEnum::Gibraltar->value
        );
        self::assertEquals(
            '300',
            CountryEnum::Greece->value
        );
        self::assertEquals(
            '304',
            CountryEnum::Greenland->value
        );
        self::assertEquals(
            '308',
            CountryEnum::Grenada->value
        );
        self::assertEquals(
            '312',
            CountryEnum::Guadeloupe->value
        );
        self::assertEquals(
            '316',
            CountryEnum::Guam->value
        );
        self::assertEquals(
            '320',
            CountryEnum::Guatemala->value
        );
        self::assertEquals(
            '831',
            CountryEnum::Guernsey->value
        );
        self::assertEquals(
            '324',
            CountryEnum::Guinea->value
        );
        self::assertEquals(
            '624',
            CountryEnum::GuineaBissau->value
        );
        self::assertEquals(
            '328',
            CountryEnum::Guyana->value
        );
        self::assertEquals(
            '332',
            CountryEnum::Haiti->value
        );
        self::assertEquals(
            '334',
            CountryEnum::HeardIslandandMcDonaldIslands->value
        );
        self::assertEquals(
            '336',
            CountryEnum::HolySee->value
        );
        self::assertEquals(
            '340',
            CountryEnum::Honduras->value
        );
        self::assertEquals(
            '344',
            CountryEnum::HongKong->value
        );
        self::assertEquals(
            '348',
            CountryEnum::Hungary->value
        );
        self::assertEquals(
            '352',
            CountryEnum::Iceland->value
        );
        self::assertEquals(
            '356',
            CountryEnum::India->value
        );
        self::assertEquals(
            '360',
            CountryEnum::Indonesia->value
        );
        self::assertEquals(
            '364',
            CountryEnum::Iran->value
        );
        self::assertEquals(
            '368',
            CountryEnum::Iraq->value
        );
        self::assertEquals(
            '372',
            CountryEnum::Ireland->value
        );
        self::assertEquals(
            '833',
            CountryEnum::IsleofMan->value
        );
        self::assertEquals(
            '376',
            CountryEnum::Israel->value
        );
        self::assertEquals(
            '380',
            CountryEnum::Italy->value
        );
        self::assertEquals(
            '388',
            CountryEnum::Jamaica->value
        );
        self::assertEquals(
            '392',
            CountryEnum::Japan->value
        );
        self::assertEquals(
            '832',
            CountryEnum::Jersey->value
        );
        self::assertEquals(
            '400',
            CountryEnum::Jordan->value
        );
        self::assertEquals(
            '398',
            CountryEnum::Kazakhstan->value
        );
        self::assertEquals(
            '404',
            CountryEnum::Kenya->value
        );
        self::assertEquals(
            '296',
            CountryEnum::Kiribati->value
        );
        self::assertEquals(
            '410',
            CountryEnum::Korea->value
        );
        self::assertEquals(
            '408',
            CountryEnum::KoreaDR->value
        );
        self::assertEquals(
            '414',
            CountryEnum::Kuwait->value
        );
        self::assertEquals(
            '417',
            CountryEnum::Kyrgyzstan->value
        );
        self::assertEquals(
            '418',
            CountryEnum::LaoPeoplesDemocraticRepublic->value
        );
        self::assertEquals(
            '428',
            CountryEnum::Latvia->value
        );
        self::assertEquals(
            '422',
            CountryEnum::Lebanon->value
        );
        self::assertEquals(
            '426',
            CountryEnum::Lesotho->value
        );
        self::assertEquals(
            '430',
            CountryEnum::Liberia->value
        );
        self::assertEquals(
            '434',
            CountryEnum::Libya->value
        );
        self::assertEquals(
            '438',
            CountryEnum::Liechtenstein->value
        );
        self::assertEquals(
            '440',
            CountryEnum::Lithuania->value
        );
        self::assertEquals(
            '442',
            CountryEnum::Luxembourg->value
        );
        self::assertEquals(
            '446',
            CountryEnum::Macao->value
        );
        self::assertEquals(
            '807',
            CountryEnum::Macedonia->value
        );
        self::assertEquals(
            '450',
            CountryEnum::Madagascar->value
        );
        self::assertEquals(
            '454',
            CountryEnum::Malawi->value
        );
        self::assertEquals(
            '458',
            CountryEnum::Malaysia->value
        );
        self::assertEquals(
            '462',
            CountryEnum::Maldives->value
        );
        self::assertEquals(
            '466',
            CountryEnum::Mali->value
        );
        self::assertEquals(
            '470',
            CountryEnum::Malta->value
        );
        self::assertEquals(
            '584',
            CountryEnum::MarshallIslands->value
        );
        self::assertEquals(
            '474',
            CountryEnum::Martinique->value
        );
        self::assertEquals(
            '478',
            CountryEnum::Mauritania->value
        );
        self::assertEquals(
            '480',
            CountryEnum::Mauritius->value
        );
        self::assertEquals(
            '175',
            CountryEnum::Mayotte->value
        );
        self::assertEquals(
            '484',
            CountryEnum::Mexico->value
        );
        self::assertEquals(
            '583',
            CountryEnum::Micronesia->value
        );
        self::assertEquals(
            '498',
            CountryEnum::Moldova->value
        );
        self::assertEquals(
            '492',
            CountryEnum::Monaco->value
        );
        self::assertEquals(
            '496',
            CountryEnum::Mongolia->value
        );
        self::assertEquals(
            '499',
            CountryEnum::Montenegro->value
        );
        self::assertEquals(
            '500',
            CountryEnum::Montserrat->value
        );
        self::assertEquals(
            '504',
            CountryEnum::Morocco->value
        );
        self::assertEquals(
            '508',
            CountryEnum::Mozambique->value
        );
        self::assertEquals(
            '104',
            CountryEnum::Myanmar->value
        );
        self::assertEquals(
            '516',
            CountryEnum::Namibia->value
        );
        self::assertEquals(
            '520',
            CountryEnum::Nauru->value
        );
        self::assertEquals(
            '524',
            CountryEnum::Nepal->value
        );
        self::assertEquals(
            '528',
            CountryEnum::Netherlands->value
        );
        self::assertEquals(
            '540',
            CountryEnum::NewCaledonia->value
        );
        self::assertEquals(
            '554',
            CountryEnum::NewZealand->value
        );
        self::assertEquals(
            '558',
            CountryEnum::Nicaragua->value
        );
        self::assertEquals(
            '562',
            CountryEnum::Niger->value
        );
        self::assertEquals(
            '566',
            CountryEnum::Nigeria->value
        );
        self::assertEquals(
            '570',
            CountryEnum::Niue->value
        );
        self::assertEquals(
            '574',
            CountryEnum::NorfolkIsland->value
        );
        self::assertEquals(
            '580',
            CountryEnum::NorthernMarianaIslands->value
        );
        self::assertEquals(
            '578',
            CountryEnum::Norway->value
        );
        self::assertEquals(
            '512',
            CountryEnum::Oman->value
        );
        self::assertEquals(
            '586',
            CountryEnum::Pakistan->value
        );
        self::assertEquals(
            '585',
            CountryEnum::Palau->value
        );
        self::assertEquals(
            '275',
            CountryEnum::Palestine->value
        );
        self::assertEquals(
            '591',
            CountryEnum::Panama->value
        );
        self::assertEquals(
            '598',
            CountryEnum::PapuaNewGuinea->value
        );
        self::assertEquals(
            '600',
            CountryEnum::Paraguay->value
        );
        self::assertEquals(
            '604',
            CountryEnum::Peru->value
        );
        self::assertEquals(
            '608',
            CountryEnum::Philippines->value
        );
        self::assertEquals(
            '612',
            CountryEnum::Pitcairn->value
        );
        self::assertEquals(
            '616',
            CountryEnum::Poland->value
        );
        self::assertEquals(
            '620',
            CountryEnum::Portugal->value
        );
        self::assertEquals(
            '630',
            CountryEnum::PuertoRico->value
        );
        self::assertEquals(
            '634',
            CountryEnum::Qatar->value
        );
        self::assertEquals(
            '638',
            CountryEnum::Reunion->value
        );
        self::assertEquals(
            '642',
            CountryEnum::Romania->value
        );
        self::assertEquals(
            '643',
            CountryEnum::RussianFederation->value
        );
        self::assertEquals(
            '646',
            CountryEnum::Rwanda->value
        );
        self::assertEquals(
            '652',
            CountryEnum::SaintBarthelemy->value
        );
        self::assertEquals(
            '654',
            CountryEnum::SaintHelena->value
        );
        self::assertEquals(
            '659',
            CountryEnum::SaintKittsandNevis->value
        );
        self::assertEquals(
            '662',
            CountryEnum::SaintLucia->value
        );
        self::assertEquals(
            '663',
            CountryEnum::SaintMartinFrench->value
        );
        self::assertEquals(
            '666',
            CountryEnum::SaintPierreandMiquelon->value
        );
        self::assertEquals(
            '670',
            CountryEnum::SaintVincentandtheGrenadines->value
        );
        self::assertEquals(
            '882',
            CountryEnum::Samoa->value
        );
        self::assertEquals(
            '674',
            CountryEnum::SanMarino->value
        );
        self::assertEquals(
            '678',
            CountryEnum::SaoTomeandPrincipe->value
        );
        self::assertEquals(
            '682',
            CountryEnum::SaudiArabia->value
        );
        self::assertEquals(
            '686',
            CountryEnum::Senegal->value
        );
        self::assertEquals(
            '688',
            CountryEnum::Serbia->value
        );
        self::assertEquals(
            '690',
            CountryEnum::Seychelles->value
        );
        self::assertEquals(
            '694',
            CountryEnum::SierraLeone->value
        );
        self::assertEquals(
            '702',
            CountryEnum::Singapore->value
        );
        self::assertEquals(
            '534',
            CountryEnum::SintMaartenDutch->value
        );
        self::assertEquals(
            '703',
            CountryEnum::Slovakia->value
        );
        self::assertEquals(
            '705',
            CountryEnum::Slovenia->value
        );
        self::assertEquals(
            '090',
            CountryEnum::SolomonIslands->value
        );
        self::assertEquals(
            '706',
            CountryEnum::Somalia->value
        );
        self::assertEquals(
            '710',
            CountryEnum::SouthAfrica->value
        );
        self::assertEquals(
            '239',
            CountryEnum::SouthGeorgiaandtheSouthSandwichIslands->value
        );
        self::assertEquals(
            '728',
            CountryEnum::SouthSudan->value
        );
        self::assertEquals(
            '724',
            CountryEnum::Spain->value
        );
        self::assertEquals(
            '144',
            CountryEnum::SriLanka->value
        );
        self::assertEquals(
            '729',
            CountryEnum::Sudan->value
        );
        self::assertEquals(
            '740',
            CountryEnum::Suriname->value
        );
        self::assertEquals(
            '744',
            CountryEnum::SvalbardandJanMayen->value
        );
        self::assertEquals(
            '748',
            CountryEnum::Swaziland->value
        );
        self::assertEquals(
            '752',
            CountryEnum::Sweden->value
        );
        self::assertEquals(
            '756',
            CountryEnum::Switzerland->value
        );
        self::assertEquals(
            '760',
            CountryEnum::SyrianArabRepublic->value
        );
        self::assertEquals(
            '158',
            CountryEnum::Taiwan->value
        );
        self::assertEquals(
            '762',
            CountryEnum::Tajikistan->value
        );
        self::assertEquals(
            '834',
            CountryEnum::Tanzania->value
        );
        self::assertEquals(
            '764',
            CountryEnum::Thailand->value
        );
        self::assertEquals(
            '626',
            CountryEnum::TimorLeste->value
        );
        self::assertEquals(
            '768',
            CountryEnum::Togo->value
        );
        self::assertEquals(
            '772',
            CountryEnum::Tokelau->value
        );
        self::assertEquals(
            '776',
            CountryEnum::Tonga->value
        );
        self::assertEquals(
            '780',
            CountryEnum::TrinidadandTobago->value
        );
        self::assertEquals(
            '788',
            CountryEnum::Tunisia->value
        );
        self::assertEquals(
            '792',
            CountryEnum::Turkey->value
        );
        self::assertEquals(
            '795',
            CountryEnum::Turkmenistan->value
        );
        self::assertEquals(
            '796',
            CountryEnum::TurksandCaicosIslands->value
        );
        self::assertEquals(
            '798',
            CountryEnum::Tuvalu->value
        );
        self::assertEquals(
            '800',
            CountryEnum::Uganda->value
        );
        self::assertEquals(
            '804',
            CountryEnum::Ukraine->value
        );
        self::assertEquals(
            '784',
            CountryEnum::UnitedArabEmirates->value
        );
        self::assertEquals(
            '826',
            CountryEnum::UnitedKingdom->value
        );
        self::assertEquals(
            '840',
            CountryEnum::UnitedStates->value
        );
        self::assertEquals(
            '581',
            CountryEnum::UnitedStatesMinorOutlyingIslands->value
        );
        self::assertEquals(
            '858',
            CountryEnum::Uruguay->value
        );
        self::assertEquals(
            '860',
            CountryEnum::Uzbekistan->value
        );
        self::assertEquals(
            '548',
            CountryEnum::Vanuatu->value
        );
        self::assertEquals(
            '862',
            CountryEnum::Venezuela->value
        );
        self::assertEquals(
            '704',
            CountryEnum::VietNam->value
        );
        self::assertEquals(
            '850',
            CountryEnum::VirginIslands->value
        );
        self::assertEquals(
            '876',
            CountryEnum::WallisandFutuna->value
        );
        self::assertEquals(
            '732',
            CountryEnum::WesternSahara->value
        );
        self::assertEquals(
            '887',
            CountryEnum::Yemen->value
        );
        self::assertEquals(
            '894',
            CountryEnum::Zambia->value
        );
        self::assertEquals(
            '716',
            CountryEnum::Zimbabwe->value
        );
    }

    public function testFromIso31662(): void
    {
        foreach (CountryEnum::cases() as $case) {
            self::assertSame(
                $case,
                CountryEnum::tryFromIso31662($case->getIso31662())
            );
        }
    }

    public function testFromIso31663(): void
    {
        foreach (CountryEnum::cases() as $case) {
            self::assertSame(
                $case,
                CountryEnum::tryFromIso31663($case->getIso31663())
            );
        }
    }

    public function testGetExpectedCallingCode(): void
    {
        self::assertEquals(
            '93',
            CountryEnum::Afghanistan->getCallingCode()
        );
        self::assertEquals(
            '358',
            CountryEnum::AlandIslands->getCallingCode()
        );
        self::assertEquals(
            '355',
            CountryEnum::Albania->getCallingCode()
        );
        self::assertEquals(
            '213',
            CountryEnum::Algeria->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::AmericanSamoa->getCallingCode()
        );
        self::assertEquals(
            '376',
            CountryEnum::Andorra->getCallingCode()
        );
        self::assertEquals(
            '244',
            CountryEnum::Angola->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::Anguilla->getCallingCode()
        );
        self::assertEquals(
            '672',
            CountryEnum::Antarctica->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::AntiguaandBarbuda->getCallingCode()
        );
        self::assertEquals(
            '54',
            CountryEnum::Argentina->getCallingCode()
        );
        self::assertEquals(
            '374',
            CountryEnum::Armenia->getCallingCode()
        );
        self::assertEquals(
            '297',
            CountryEnum::Aruba->getCallingCode()
        );
        self::assertEquals(
            '61',
            CountryEnum::Australia->getCallingCode()
        );
        self::assertEquals(
            '43',
            CountryEnum::Austria->getCallingCode()
        );
        self::assertEquals(
            '994',
            CountryEnum::Azerbaijan->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::Bahamas->getCallingCode()
        );
        self::assertEquals(
            '973',
            CountryEnum::Bahrain->getCallingCode()
        );
        self::assertEquals(
            '880',
            CountryEnum::Bangladesh->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::Barbados->getCallingCode()
        );
        self::assertEquals(
            '375',
            CountryEnum::Belarus->getCallingCode()
        );
        self::assertEquals(
            '32',
            CountryEnum::Belgium->getCallingCode()
        );
        self::assertEquals(
            '501',
            CountryEnum::Belize->getCallingCode()
        );
        self::assertEquals(
            '229',
            CountryEnum::Benin->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::Bermuda->getCallingCode()
        );
        self::assertEquals(
            '975',
            CountryEnum::Bhutan->getCallingCode()
        );
        self::assertEquals(
            '591',
            CountryEnum::Bolivia->getCallingCode()
        );
        self::assertEquals(
            '599',
            CountryEnum::Bonaire->getCallingCode()
        );
        self::assertEquals(
            '387',
            CountryEnum::BosniaandHerzegovina->getCallingCode()
        );
        self::assertEquals(
            '267',
            CountryEnum::Botswana->getCallingCode()
        );
        self::assertEquals(
            '47',
            CountryEnum::BouvetIsland->getCallingCode()
        );
        self::assertEquals(
            '55',
            CountryEnum::Brazil->getCallingCode()
        );
        self::assertEquals(
            '246',
            CountryEnum::BritishIndianOceanTerritory->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::BritishVirginIslands->getCallingCode()
        );
        self::assertEquals(
            '673',
            CountryEnum::BruneiDarussalam->getCallingCode()
        );
        self::assertEquals(
            '359',
            CountryEnum::Bulgaria->getCallingCode()
        );
        self::assertEquals(
            '226',
            CountryEnum::BurkinaFaso->getCallingCode()
        );
        self::assertEquals(
            '257',
            CountryEnum::Burundi->getCallingCode()
        );
        self::assertEquals(
            '855',
            CountryEnum::Cambodia->getCallingCode()
        );
        self::assertEquals(
            '237',
            CountryEnum::Cameroon->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::Canada->getCallingCode()
        );
        self::assertEquals(
            '238',
            CountryEnum::CapeVerde->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::CaymanIslands->getCallingCode()
        );
        self::assertEquals(
            '236',
            CountryEnum::CentralAfricanRepublic->getCallingCode()
        );
        self::assertEquals(
            '235',
            CountryEnum::Chad->getCallingCode()
        );
        self::assertEquals(
            '56',
            CountryEnum::Chile->getCallingCode()
        );
        self::assertEquals(
            '86',
            CountryEnum::China->getCallingCode()
        );
        self::assertEquals(
            '61',
            CountryEnum::ChristmasIsland->getCallingCode()
        );
        self::assertEquals(
            '61',
            CountryEnum::CocosIslands->getCallingCode()
        );
        self::assertEquals(
            '57',
            CountryEnum::Colombia->getCallingCode()
        );
        self::assertEquals(
            '269',
            CountryEnum::Comoros->getCallingCode()
        );
        self::assertEquals(
            '242',
            CountryEnum::Congo->getCallingCode()
        );
        self::assertEquals(
            '243',
            CountryEnum::CongoDR->getCallingCode()
        );
        self::assertEquals(
            '682',
            CountryEnum::CookIslands->getCallingCode()
        );
        self::assertEquals(
            '506',
            CountryEnum::CostaRica->getCallingCode()
        );
        self::assertEquals(
            '225',
            CountryEnum::CotedIvoire->getCallingCode()
        );
        self::assertEquals(
            '385',
            CountryEnum::Croatia->getCallingCode()
        );
        self::assertEquals(
            '53',
            CountryEnum::Cuba->getCallingCode()
        );
        self::assertEquals(
            '599',
            CountryEnum::Curacao->getCallingCode()
        );
        self::assertEquals(
            '357',
            CountryEnum::Cyprus->getCallingCode()
        );
        self::assertEquals(
            '420',
            CountryEnum::Czechia->getCallingCode()
        );
        self::assertEquals(
            '45',
            CountryEnum::Denmark->getCallingCode()
        );
        self::assertEquals(
            '253',
            CountryEnum::Djibouti->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::Dominica->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::DominicanRepublic->getCallingCode()
        );
        self::assertEquals(
            '593',
            CountryEnum::Ecuador->getCallingCode()
        );
        self::assertEquals(
            '20',
            CountryEnum::Egypt->getCallingCode()
        );
        self::assertEquals(
            '503',
            CountryEnum::ElSalvador->getCallingCode()
        );
        self::assertEquals(
            '240',
            CountryEnum::EquatorialGuinea->getCallingCode()
        );
        self::assertEquals(
            '291',
            CountryEnum::Eritrea->getCallingCode()
        );
        self::assertEquals(
            '372',
            CountryEnum::Estonia->getCallingCode()
        );
        self::assertEquals(
            '251',
            CountryEnum::Ethiopia->getCallingCode()
        );
        self::assertEquals(
            '500',
            CountryEnum::FalklandIslands->getCallingCode()
        );
        self::assertEquals(
            '298',
            CountryEnum::FaroeIslands->getCallingCode()
        );
        self::assertEquals(
            '679',
            CountryEnum::Fiji->getCallingCode()
        );
        self::assertEquals(
            '358',
            CountryEnum::Finland->getCallingCode()
        );
        self::assertEquals(
            '33',
            CountryEnum::France->getCallingCode()
        );
        self::assertEquals(
            '594',
            CountryEnum::FrenchGuiana->getCallingCode()
        );
        self::assertEquals(
            '689',
            CountryEnum::FrenchPolynesia->getCallingCode()
        );
        self::assertEquals(
            '33',
            CountryEnum::FrenchSouthernTerritories->getCallingCode()
        );
        self::assertEquals(
            '241',
            CountryEnum::Gabon->getCallingCode()
        );
        self::assertEquals(
            '220',
            CountryEnum::Gambia->getCallingCode()
        );
        self::assertEquals(
            '995',
            CountryEnum::Georgia->getCallingCode()
        );
        self::assertEquals(
            '49',
            CountryEnum::Germany->getCallingCode()
        );
        self::assertEquals(
            '233',
            CountryEnum::Ghana->getCallingCode()
        );
        self::assertEquals(
            '350',
            CountryEnum::Gibraltar->getCallingCode()
        );
        self::assertEquals(
            '30',
            CountryEnum::Greece->getCallingCode()
        );
        self::assertEquals(
            '299',
            CountryEnum::Greenland->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::Grenada->getCallingCode()
        );
        self::assertEquals(
            '590',
            CountryEnum::Guadeloupe->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::Guam->getCallingCode()
        );
        self::assertEquals(
            '502',
            CountryEnum::Guatemala->getCallingCode()
        );
        self::assertEquals(
            '44',
            CountryEnum::Guernsey->getCallingCode()
        );
        self::assertEquals(
            '224',
            CountryEnum::Guinea->getCallingCode()
        );
        self::assertEquals(
            '245',
            CountryEnum::GuineaBissau->getCallingCode()
        );
        self::assertEquals(
            '592',
            CountryEnum::Guyana->getCallingCode()
        );
        self::assertEquals(
            '509',
            CountryEnum::Haiti->getCallingCode()
        );
        self::assertEquals(
            '61',
            CountryEnum::HeardIslandandMcDonaldIslands->getCallingCode()
        );
        self::assertEquals(
            '39',
            CountryEnum::HolySee->getCallingCode()
        );
        self::assertEquals(
            '504',
            CountryEnum::Honduras->getCallingCode()
        );
        self::assertEquals(
            '852',
            CountryEnum::HongKong->getCallingCode()
        );
        self::assertEquals(
            '36',
            CountryEnum::Hungary->getCallingCode()
        );
        self::assertEquals(
            '354',
            CountryEnum::Iceland->getCallingCode()
        );
        self::assertEquals(
            '91',
            CountryEnum::India->getCallingCode()
        );
        self::assertEquals(
            '62',
            CountryEnum::Indonesia->getCallingCode()
        );
        self::assertEquals(
            '98',
            CountryEnum::Iran->getCallingCode()
        );
        self::assertEquals(
            '964',
            CountryEnum::Iraq->getCallingCode()
        );
        self::assertEquals(
            '353',
            CountryEnum::Ireland->getCallingCode()
        );
        self::assertEquals(
            '44',
            CountryEnum::IsleofMan->getCallingCode()
        );
        self::assertEquals(
            '972',
            CountryEnum::Israel->getCallingCode()
        );
        self::assertEquals(
            '39',
            CountryEnum::Italy->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::Jamaica->getCallingCode()
        );
        self::assertEquals(
            '81',
            CountryEnum::Japan->getCallingCode()
        );
        self::assertEquals(
            '44',
            CountryEnum::Jersey->getCallingCode()
        );
        self::assertEquals(
            '962',
            CountryEnum::Jordan->getCallingCode()
        );
        self::assertEquals(
            '7',
            CountryEnum::Kazakhstan->getCallingCode()
        );
        self::assertEquals(
            '254',
            CountryEnum::Kenya->getCallingCode()
        );
        self::assertEquals(
            '686',
            CountryEnum::Kiribati->getCallingCode()
        );
        self::assertEquals(
            '82',
            CountryEnum::Korea->getCallingCode()
        );
        self::assertEquals(
            '850',
            CountryEnum::KoreaDR->getCallingCode()
        );
        self::assertEquals(
            '965',
            CountryEnum::Kuwait->getCallingCode()
        );
        self::assertEquals(
            '996',
            CountryEnum::Kyrgyzstan->getCallingCode()
        );
        self::assertEquals(
            '856',
            CountryEnum::LaoPeoplesDemocraticRepublic->getCallingCode()
        );
        self::assertEquals(
            '371',
            CountryEnum::Latvia->getCallingCode()
        );
        self::assertEquals(
            '961',
            CountryEnum::Lebanon->getCallingCode()
        );
        self::assertEquals(
            '266',
            CountryEnum::Lesotho->getCallingCode()
        );
        self::assertEquals(
            '231',
            CountryEnum::Liberia->getCallingCode()
        );
        self::assertEquals(
            '218',
            CountryEnum::Libya->getCallingCode()
        );
        self::assertEquals(
            '423',
            CountryEnum::Liechtenstein->getCallingCode()
        );
        self::assertEquals(
            '370',
            CountryEnum::Lithuania->getCallingCode()
        );
        self::assertEquals(
            '352',
            CountryEnum::Luxembourg->getCallingCode()
        );
        self::assertEquals(
            '853',
            CountryEnum::Macao->getCallingCode()
        );
        self::assertEquals(
            '389',
            CountryEnum::Macedonia->getCallingCode()
        );
        self::assertEquals(
            '261',
            CountryEnum::Madagascar->getCallingCode()
        );
        self::assertEquals(
            '265',
            CountryEnum::Malawi->getCallingCode()
        );
        self::assertEquals(
            '60',
            CountryEnum::Malaysia->getCallingCode()
        );
        self::assertEquals(
            '960',
            CountryEnum::Maldives->getCallingCode()
        );
        self::assertEquals(
            '223',
            CountryEnum::Mali->getCallingCode()
        );
        self::assertEquals(
            '356',
            CountryEnum::Malta->getCallingCode()
        );
        self::assertEquals(
            '692',
            CountryEnum::MarshallIslands->getCallingCode()
        );
        self::assertEquals(
            '596',
            CountryEnum::Martinique->getCallingCode()
        );
        self::assertEquals(
            '222',
            CountryEnum::Mauritania->getCallingCode()
        );
        self::assertEquals(
            '230',
            CountryEnum::Mauritius->getCallingCode()
        );
        self::assertEquals(
            '262',
            CountryEnum::Mayotte->getCallingCode()
        );
        self::assertEquals(
            '52',
            CountryEnum::Mexico->getCallingCode()
        );
        self::assertEquals(
            '691',
            CountryEnum::Micronesia->getCallingCode()
        );
        self::assertEquals(
            '373',
            CountryEnum::Moldova->getCallingCode()
        );
        self::assertEquals(
            '377',
            CountryEnum::Monaco->getCallingCode()
        );
        self::assertEquals(
            '976',
            CountryEnum::Mongolia->getCallingCode()
        );
        self::assertEquals(
            '382',
            CountryEnum::Montenegro->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::Montserrat->getCallingCode()
        );
        self::assertEquals(
            '212',
            CountryEnum::Morocco->getCallingCode()
        );
        self::assertEquals(
            '258',
            CountryEnum::Mozambique->getCallingCode()
        );
        self::assertEquals(
            '95',
            CountryEnum::Myanmar->getCallingCode()
        );
        self::assertEquals(
            '264',
            CountryEnum::Namibia->getCallingCode()
        );
        self::assertEquals(
            '674',
            CountryEnum::Nauru->getCallingCode()
        );
        self::assertEquals(
            '977',
            CountryEnum::Nepal->getCallingCode()
        );
        self::assertEquals(
            '31',
            CountryEnum::Netherlands->getCallingCode()
        );
        self::assertEquals(
            '687',
            CountryEnum::NewCaledonia->getCallingCode()
        );
        self::assertEquals(
            '64',
            CountryEnum::NewZealand->getCallingCode()
        );
        self::assertEquals(
            '505',
            CountryEnum::Nicaragua->getCallingCode()
        );
        self::assertEquals(
            '227',
            CountryEnum::Niger->getCallingCode()
        );
        self::assertEquals(
            '234',
            CountryEnum::Nigeria->getCallingCode()
        );
        self::assertEquals(
            '683',
            CountryEnum::Niue->getCallingCode()
        );
        self::assertEquals(
            '672',
            CountryEnum::NorfolkIsland->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::NorthernMarianaIslands->getCallingCode()
        );
        self::assertEquals(
            '47',
            CountryEnum::Norway->getCallingCode()
        );
        self::assertEquals(
            '968',
            CountryEnum::Oman->getCallingCode()
        );
        self::assertEquals(
            '92',
            CountryEnum::Pakistan->getCallingCode()
        );
        self::assertEquals(
            '680',
            CountryEnum::Palau->getCallingCode()
        );
        self::assertEquals(
            '970',
            CountryEnum::Palestine->getCallingCode()
        );
        self::assertEquals(
            '507',
            CountryEnum::Panama->getCallingCode()
        );
        self::assertEquals(
            '675',
            CountryEnum::PapuaNewGuinea->getCallingCode()
        );
        self::assertEquals(
            '595',
            CountryEnum::Paraguay->getCallingCode()
        );
        self::assertEquals(
            '51',
            CountryEnum::Peru->getCallingCode()
        );
        self::assertEquals(
            '63',
            CountryEnum::Philippines->getCallingCode()
        );
        self::assertEquals(
            '649',
            CountryEnum::Pitcairn->getCallingCode()
        );
        self::assertEquals(
            '48',
            CountryEnum::Poland->getCallingCode()
        );
        self::assertEquals(
            '351',
            CountryEnum::Portugal->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::PuertoRico->getCallingCode()
        );
        self::assertEquals(
            '974',
            CountryEnum::Qatar->getCallingCode()
        );
        self::assertEquals(
            '262',
            CountryEnum::Reunion->getCallingCode()
        );
        self::assertEquals(
            '40',
            CountryEnum::Romania->getCallingCode()
        );
        self::assertEquals(
            '7',
            CountryEnum::RussianFederation->getCallingCode()
        );
        self::assertEquals(
            '250',
            CountryEnum::Rwanda->getCallingCode()
        );
        self::assertEquals(
            '590',
            CountryEnum::SaintBarthelemy->getCallingCode()
        );
        self::assertEquals(
            '290',
            CountryEnum::SaintHelena->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::SaintKittsandNevis->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::SaintLucia->getCallingCode()
        );
        self::assertEquals(
            '590',
            CountryEnum::SaintMartinFrench->getCallingCode()
        );
        self::assertEquals(
            '508',
            CountryEnum::SaintPierreandMiquelon->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::SaintVincentandtheGrenadines->getCallingCode()
        );
        self::assertEquals(
            '685',
            CountryEnum::Samoa->getCallingCode()
        );
        self::assertEquals(
            '378',
            CountryEnum::SanMarino->getCallingCode()
        );
        self::assertEquals(
            '239',
            CountryEnum::SaoTomeandPrincipe->getCallingCode()
        );
        self::assertEquals(
            '966',
            CountryEnum::SaudiArabia->getCallingCode()
        );
        self::assertEquals(
            '221',
            CountryEnum::Senegal->getCallingCode()
        );
        self::assertEquals(
            '381',
            CountryEnum::Serbia->getCallingCode()
        );
        self::assertEquals(
            '248',
            CountryEnum::Seychelles->getCallingCode()
        );
        self::assertEquals(
            '232',
            CountryEnum::SierraLeone->getCallingCode()
        );
        self::assertEquals(
            '65',
            CountryEnum::Singapore->getCallingCode()
        );
        self::assertEquals(
            '721',
            CountryEnum::SintMaartenDutch->getCallingCode()
        );
        self::assertEquals(
            '421',
            CountryEnum::Slovakia->getCallingCode()
        );
        self::assertEquals(
            '386',
            CountryEnum::Slovenia->getCallingCode()
        );
        self::assertEquals(
            '677',
            CountryEnum::SolomonIslands->getCallingCode()
        );
        self::assertEquals(
            '252',
            CountryEnum::Somalia->getCallingCode()
        );
        self::assertEquals(
            '27',
            CountryEnum::SouthAfrica->getCallingCode()
        );
        self::assertEquals(
            '44',
            CountryEnum::SouthGeorgiaandtheSouthSandwichIslands->getCallingCode()
        );
        self::assertEquals(
            '211',
            CountryEnum::SouthSudan->getCallingCode()
        );
        self::assertEquals(
            '34',
            CountryEnum::Spain->getCallingCode()
        );
        self::assertEquals(
            '94',
            CountryEnum::SriLanka->getCallingCode()
        );
        self::assertEquals(
            '249',
            CountryEnum::Sudan->getCallingCode()
        );
        self::assertEquals(
            '597',
            CountryEnum::Suriname->getCallingCode()
        );
        self::assertEquals(
            '47',
            CountryEnum::SvalbardandJanMayen->getCallingCode()
        );
        self::assertEquals(
            '268',
            CountryEnum::Swaziland->getCallingCode()
        );
        self::assertEquals(
            '46',
            CountryEnum::Sweden->getCallingCode()
        );
        self::assertEquals(
            '41',
            CountryEnum::Switzerland->getCallingCode()
        );
        self::assertEquals(
            '963',
            CountryEnum::SyrianArabRepublic->getCallingCode()
        );
        self::assertEquals(
            '886',
            CountryEnum::Taiwan->getCallingCode()
        );
        self::assertEquals(
            '992',
            CountryEnum::Tajikistan->getCallingCode()
        );
        self::assertEquals(
            '255',
            CountryEnum::Tanzania->getCallingCode()
        );
        self::assertEquals(
            '66',
            CountryEnum::Thailand->getCallingCode()
        );
        self::assertEquals(
            '670',
            CountryEnum::TimorLeste->getCallingCode()
        );
        self::assertEquals(
            '228',
            CountryEnum::Togo->getCallingCode()
        );
        self::assertEquals(
            '690',
            CountryEnum::Tokelau->getCallingCode()
        );
        self::assertEquals(
            '676',
            CountryEnum::Tonga->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::TrinidadandTobago->getCallingCode()
        );
        self::assertEquals(
            '216',
            CountryEnum::Tunisia->getCallingCode()
        );
        self::assertEquals(
            '90',
            CountryEnum::Turkey->getCallingCode()
        );
        self::assertEquals(
            '993',
            CountryEnum::Turkmenistan->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::TurksandCaicosIslands->getCallingCode()
        );
        self::assertEquals(
            '688',
            CountryEnum::Tuvalu->getCallingCode()
        );
        self::assertEquals(
            '256',
            CountryEnum::Uganda->getCallingCode()
        );
        self::assertEquals(
            '380',
            CountryEnum::Ukraine->getCallingCode()
        );
        self::assertEquals(
            '971',
            CountryEnum::UnitedArabEmirates->getCallingCode()
        );
        self::assertEquals(
            '44',
            CountryEnum::UnitedKingdom->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::UnitedStates->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::UnitedStatesMinorOutlyingIslands->getCallingCode()
        );
        self::assertEquals(
            '598',
            CountryEnum::Uruguay->getCallingCode()
        );
        self::assertEquals(
            '998',
            CountryEnum::Uzbekistan->getCallingCode()
        );
        self::assertEquals(
            '678',
            CountryEnum::Vanuatu->getCallingCode()
        );
        self::assertEquals(
            '58',
            CountryEnum::Venezuela->getCallingCode()
        );
        self::assertEquals(
            '84',
            CountryEnum::VietNam->getCallingCode()
        );
        self::assertEquals(
            '1',
            CountryEnum::VirginIslands->getCallingCode()
        );
        self::assertEquals(
            '681',
            CountryEnum::WallisandFutuna->getCallingCode()
        );
        self::assertEquals(
            '212',
            CountryEnum::WesternSahara->getCallingCode()
        );
        self::assertEquals(
            '967',
            CountryEnum::Yemen->getCallingCode()
        );
        self::assertEquals(
            '260',
            CountryEnum::Zambia->getCallingCode()
        );
        self::assertEquals(
            '263',
            CountryEnum::Zimbabwe->getCallingCode()
        );
    }

    public function testGetExpectedCapital(): void
    {
        self::assertEquals(
            'Kabul',
            CountryEnum::Afghanistan->getCapital()
        );
        self::assertEquals(
            'Mariehamn',
            CountryEnum::AlandIslands->getCapital()
        );
        self::assertEquals(
            'Tirana',
            CountryEnum::Albania->getCapital()
        );
        self::assertEquals(
            'Algiers',
            CountryEnum::Algeria->getCapital()
        );
        self::assertEquals(
            'Pago Pago',
            CountryEnum::AmericanSamoa->getCapital()
        );
        self::assertEquals(
            'Andorra la Vella',
            CountryEnum::Andorra->getCapital()
        );
        self::assertEquals(
            'Luanda',
            CountryEnum::Angola->getCapital()
        );
        self::assertEquals(
            'The Valley',
            CountryEnum::Anguilla->getCapital()
        );
        self::assertEquals(
            'Antartica',
            CountryEnum::Antarctica->getCapital()
        );
        self::assertEquals(
            'St John’s',
            CountryEnum::AntiguaandBarbuda->getCapital()
        );
        self::assertEquals(
            'Buenos Aires',
            CountryEnum::Argentina->getCapital()
        );
        self::assertEquals(
            'Yerevan',
            CountryEnum::Armenia->getCapital()
        );
        self::assertEquals(
            'Oranjestad',
            CountryEnum::Aruba->getCapital()
        );
        self::assertEquals(
            'Canberra',
            CountryEnum::Australia->getCapital()
        );
        self::assertEquals(
            'Vienna',
            CountryEnum::Austria->getCapital()
        );
        self::assertEquals(
            'Baku',
            CountryEnum::Azerbaijan->getCapital()
        );
        self::assertEquals(
            'Nassau',
            CountryEnum::Bahamas->getCapital()
        );
        self::assertEquals(
            'Manama',
            CountryEnum::Bahrain->getCapital()
        );
        self::assertEquals(
            'Dhaka',
            CountryEnum::Bangladesh->getCapital()
        );
        self::assertEquals(
            'Bridgetown',
            CountryEnum::Barbados->getCapital()
        );
        self::assertEquals(
            'Minsk',
            CountryEnum::Belarus->getCapital()
        );
        self::assertEquals(
            'Brussels',
            CountryEnum::Belgium->getCapital()
        );
        self::assertEquals(
            'Belmopan',
            CountryEnum::Belize->getCapital()
        );
        self::assertEquals(
            'Porto Novo (BJ1)',
            CountryEnum::Benin->getCapital()
        );
        self::assertEquals(
            'Hamilton',
            CountryEnum::Bermuda->getCapital()
        );
        self::assertEquals(
            'Thimphu',
            CountryEnum::Bhutan->getCapital()
        );
        self::assertEquals(
            'Sucre (BO1)',
            CountryEnum::Bolivia->getCapital()
        );
        self::assertEquals(
            'Kralendijk',
            CountryEnum::Bonaire->getCapital()
        );
        self::assertEquals(
            'Sarajevo',
            CountryEnum::BosniaandHerzegovina->getCapital()
        );
        self::assertEquals(
            'Gaborone',
            CountryEnum::Botswana->getCapital()
        );
        self::assertEquals(
            'Bouvet island',
            CountryEnum::BouvetIsland->getCapital()
        );
        self::assertEquals(
            'Brasilia',
            CountryEnum::Brazil->getCapital()
        );
        self::assertEquals(
            'Diego Garcia',
            CountryEnum::BritishIndianOceanTerritory->getCapital()
        );
        self::assertEquals(
            'Road Town',
            CountryEnum::BritishVirginIslands->getCapital()
        );
        self::assertEquals(
            'Bandar Seri Begawan',
            CountryEnum::BruneiDarussalam->getCapital()
        );
        self::assertEquals(
            'Sofia',
            CountryEnum::Bulgaria->getCapital()
        );
        self::assertEquals(
            'Ouagadougou',
            CountryEnum::BurkinaFaso->getCapital()
        );
        self::assertEquals(
            'Bujumbura',
            CountryEnum::Burundi->getCapital()
        );
        self::assertEquals(
            'Phnom Penh',
            CountryEnum::Cambodia->getCapital()
        );
        self::assertEquals(
            'Yaoundé',
            CountryEnum::Cameroon->getCapital()
        );
        self::assertEquals(
            'Ottawa',
            CountryEnum::Canada->getCapital()
        );
        self::assertEquals(
            'Praia',
            CountryEnum::CapeVerde->getCapital()
        );
        self::assertEquals(
            'George Town',
            CountryEnum::CaymanIslands->getCapital()
        );
        self::assertEquals(
            'Bangui',
            CountryEnum::CentralAfricanRepublic->getCapital()
        );
        self::assertEquals(
            'N’Djamena',
            CountryEnum::Chad->getCapital()
        );
        self::assertEquals(
            'Santiago',
            CountryEnum::Chile->getCapital()
        );
        self::assertEquals(
            'Beijing',
            CountryEnum::China->getCapital()
        );
        self::assertEquals(
            'Flying Fish Cove',
            CountryEnum::ChristmasIsland->getCapital()
        );
        self::assertEquals(
            'Bantam',
            CountryEnum::CocosIslands->getCapital()
        );
        self::assertEquals(
            'Santa Fe de Bogotá',
            CountryEnum::Colombia->getCapital()
        );
        self::assertEquals(
            'Moroni',
            CountryEnum::Comoros->getCapital()
        );
        self::assertEquals(
            'Brazzaville',
            CountryEnum::Congo->getCapital()
        );
        self::assertEquals(
            'Kinshasa',
            CountryEnum::CongoDR->getCapital()
        );
        self::assertEquals(
            'Avarua',
            CountryEnum::CookIslands->getCapital()
        );
        self::assertEquals(
            'San José',
            CountryEnum::CostaRica->getCapital()
        );
        self::assertEquals(
            'Yamoussoukro (CI1)',
            CountryEnum::CotedIvoire->getCapital()
        );
        self::assertEquals(
            'Zagreb',
            CountryEnum::Croatia->getCapital()
        );
        self::assertEquals(
            'Havana',
            CountryEnum::Cuba->getCapital()
        );
        self::assertEquals(
            'Willemstad',
            CountryEnum::Curacao->getCapital()
        );
        self::assertEquals(
            'Nicosia',
            CountryEnum::Cyprus->getCapital()
        );
        self::assertEquals(
            'Prague',
            CountryEnum::Czechia->getCapital()
        );
        self::assertEquals(
            'Copenhagen',
            CountryEnum::Denmark->getCapital()
        );
        self::assertEquals(
            'Djibouti',
            CountryEnum::Djibouti->getCapital()
        );
        self::assertEquals(
            'Roseau',
            CountryEnum::Dominica->getCapital()
        );
        self::assertEquals(
            'Santo Domingo',
            CountryEnum::DominicanRepublic->getCapital()
        );
        self::assertEquals(
            'Quito',
            CountryEnum::Ecuador->getCapital()
        );
        self::assertEquals(
            'Cairo',
            CountryEnum::Egypt->getCapital()
        );
        self::assertEquals(
            'San Salvador',
            CountryEnum::ElSalvador->getCapital()
        );
        self::assertEquals(
            'Malabo',
            CountryEnum::EquatorialGuinea->getCapital()
        );
        self::assertEquals(
            'Asmara',
            CountryEnum::Eritrea->getCapital()
        );
        self::assertEquals(
            'Tallinn',
            CountryEnum::Estonia->getCapital()
        );
        self::assertEquals(
            'Addis Ababa',
            CountryEnum::Ethiopia->getCapital()
        );
        self::assertEquals(
            'Stanley',
            CountryEnum::FalklandIslands->getCapital()
        );
        self::assertEquals(
            'Tórshavn',
            CountryEnum::FaroeIslands->getCapital()
        );
        self::assertEquals(
            'Suva',
            CountryEnum::Fiji->getCapital()
        );
        self::assertEquals(
            'Helsinki',
            CountryEnum::Finland->getCapital()
        );
        self::assertEquals(
            'Paris',
            CountryEnum::France->getCapital()
        );
        self::assertEquals(
            'Cayenne',
            CountryEnum::FrenchGuiana->getCapital()
        );
        self::assertEquals(
            'Papeete',
            CountryEnum::FrenchPolynesia->getCapital()
        );
        self::assertEquals(
            'Port-aux-Francais',
            CountryEnum::FrenchSouthernTerritories->getCapital()
        );
        self::assertEquals(
            'Libreville',
            CountryEnum::Gabon->getCapital()
        );
        self::assertEquals(
            'Banjul',
            CountryEnum::Gambia->getCapital()
        );
        self::assertEquals(
            'Tbilisi',
            CountryEnum::Georgia->getCapital()
        );
        self::assertEquals(
            'Berlin',
            CountryEnum::Germany->getCapital()
        );
        self::assertEquals(
            'Accra',
            CountryEnum::Ghana->getCapital()
        );
        self::assertEquals(
            'Gibraltar',
            CountryEnum::Gibraltar->getCapital()
        );
        self::assertEquals(
            'Athens',
            CountryEnum::Greece->getCapital()
        );
        self::assertEquals(
            'Nuuk',
            CountryEnum::Greenland->getCapital()
        );
        self::assertEquals(
            'St George’s',
            CountryEnum::Grenada->getCapital()
        );
        self::assertEquals(
            'Basse Terre',
            CountryEnum::Guadeloupe->getCapital()
        );
        self::assertEquals(
            'Agaña (Hagåtña)',
            CountryEnum::Guam->getCapital()
        );
        self::assertEquals(
            'Guatemala City',
            CountryEnum::Guatemala->getCapital()
        );
        self::assertEquals(
            'St Peter Port',
            CountryEnum::Guernsey->getCapital()
        );
        self::assertEquals(
            'Conakry',
            CountryEnum::Guinea->getCapital()
        );
        self::assertEquals(
            'Bissau',
            CountryEnum::GuineaBissau->getCapital()
        );
        self::assertEquals(
            'Georgetown',
            CountryEnum::Guyana->getCapital()
        );
        self::assertEquals(
            'Port-au-Prince',
            CountryEnum::Haiti->getCapital()
        );
        self::assertEquals(
            'Territory of Heard Island and McDonald Islands',
            CountryEnum::HeardIslandandMcDonaldIslands->getCapital()
        );
        self::assertEquals(
            'Vatican City',
            CountryEnum::HolySee->getCapital()
        );
        self::assertEquals(
            'Tegucigalpa',
            CountryEnum::Honduras->getCapital()
        );
        self::assertEquals(
            '(HK3)',
            CountryEnum::HongKong->getCapital()
        );
        self::assertEquals(
            'Budapest',
            CountryEnum::Hungary->getCapital()
        );
        self::assertEquals(
            'Reykjavik',
            CountryEnum::Iceland->getCapital()
        );
        self::assertEquals(
            'New Delhi',
            CountryEnum::India->getCapital()
        );
        self::assertEquals(
            'Jakarta',
            CountryEnum::Indonesia->getCapital()
        );
        self::assertEquals(
            'Tehran',
            CountryEnum::Iran->getCapital()
        );
        self::assertEquals(
            'Baghdad',
            CountryEnum::Iraq->getCapital()
        );
        self::assertEquals(
            'Dublin',
            CountryEnum::Ireland->getCapital()
        );
        self::assertEquals(
            'Douglas',
            CountryEnum::IsleofMan->getCapital()
        );
        self::assertEquals(
            '(IL1)',
            CountryEnum::Israel->getCapital()
        );
        self::assertEquals(
            'Rome',
            CountryEnum::Italy->getCapital()
        );
        self::assertEquals(
            'Kingston',
            CountryEnum::Jamaica->getCapital()
        );
        self::assertEquals(
            'Tokyo',
            CountryEnum::Japan->getCapital()
        );
        self::assertEquals(
            'St Helier',
            CountryEnum::Jersey->getCapital()
        );
        self::assertEquals(
            'Amman',
            CountryEnum::Jordan->getCapital()
        );
        self::assertEquals(
            'Astana',
            CountryEnum::Kazakhstan->getCapital()
        );
        self::assertEquals(
            'Nairobi',
            CountryEnum::Kenya->getCapital()
        );
        self::assertEquals(
            'Tarawa',
            CountryEnum::Kiribati->getCapital()
        );
        self::assertEquals(
            'Seoul',
            CountryEnum::Korea->getCapital()
        );
        self::assertEquals(
            'Pyongyang',
            CountryEnum::KoreaDR->getCapital()
        );
        self::assertEquals(
            'Kuwait City',
            CountryEnum::Kuwait->getCapital()
        );
        self::assertEquals(
            'Bishkek',
            CountryEnum::Kyrgyzstan->getCapital()
        );
        self::assertEquals(
            'Vientiane',
            CountryEnum::LaoPeoplesDemocraticRepublic->getCapital()
        );
        self::assertEquals(
            'Riga',
            CountryEnum::Latvia->getCapital()
        );
        self::assertEquals(
            'Beirut',
            CountryEnum::Lebanon->getCapital()
        );
        self::assertEquals(
            'Maseru',
            CountryEnum::Lesotho->getCapital()
        );
        self::assertEquals(
            'Monrovia',
            CountryEnum::Liberia->getCapital()
        );
        self::assertEquals(
            'Tripoli',
            CountryEnum::Libya->getCapital()
        );
        self::assertEquals(
            'Vaduz',
            CountryEnum::Liechtenstein->getCapital()
        );
        self::assertEquals(
            'Vilnius',
            CountryEnum::Lithuania->getCapital()
        );
        self::assertEquals(
            'Luxembourg',
            CountryEnum::Luxembourg->getCapital()
        );
        self::assertEquals(
            'Macao (MO3)',
            CountryEnum::Macao->getCapital()
        );
        self::assertEquals(
            'Skopje',
            CountryEnum::Macedonia->getCapital()
        );
        self::assertEquals(
            'Antananarivo',
            CountryEnum::Madagascar->getCapital()
        );
        self::assertEquals(
            'Lilongwe',
            CountryEnum::Malawi->getCapital()
        );
        self::assertEquals(
            'Kuala Lumpur (MY1)',
            CountryEnum::Malaysia->getCapital()
        );
        self::assertEquals(
            'Malé',
            CountryEnum::Maldives->getCapital()
        );
        self::assertEquals(
            'Bamako',
            CountryEnum::Mali->getCapital()
        );
        self::assertEquals(
            'Valletta',
            CountryEnum::Malta->getCapital()
        );
        self::assertEquals(
            'Majuro',
            CountryEnum::MarshallIslands->getCapital()
        );
        self::assertEquals(
            'Fort-de-France',
            CountryEnum::Martinique->getCapital()
        );
        self::assertEquals(
            'Nouakchott',
            CountryEnum::Mauritania->getCapital()
        );
        self::assertEquals(
            'Port Louis',
            CountryEnum::Mauritius->getCapital()
        );
        self::assertEquals(
            'Mamoudzou',
            CountryEnum::Mayotte->getCapital()
        );
        self::assertEquals(
            'Mexico City',
            CountryEnum::Mexico->getCapital()
        );
        self::assertEquals(
            'Palikir',
            CountryEnum::Micronesia->getCapital()
        );
        self::assertEquals(
            'Chisinau',
            CountryEnum::Moldova->getCapital()
        );
        self::assertEquals(
            'Monaco',
            CountryEnum::Monaco->getCapital()
        );
        self::assertEquals(
            'Ulan Bator',
            CountryEnum::Mongolia->getCapital()
        );
        self::assertEquals(
            'Podgorica',
            CountryEnum::Montenegro->getCapital()
        );
        self::assertEquals(
            'Plymouth (MS2)',
            CountryEnum::Montserrat->getCapital()
        );
        self::assertEquals(
            'Rabat',
            CountryEnum::Morocco->getCapital()
        );
        self::assertEquals(
            'Maputo',
            CountryEnum::Mozambique->getCapital()
        );
        self::assertEquals(
            'Yangon',
            CountryEnum::Myanmar->getCapital()
        );
        self::assertEquals(
            'Windhoek',
            CountryEnum::Namibia->getCapital()
        );
        self::assertEquals(
            'Yaren',
            CountryEnum::Nauru->getCapital()
        );
        self::assertEquals(
            'Kathmandu',
            CountryEnum::Nepal->getCapital()
        );
        self::assertEquals(
            'Amsterdam (NL2)',
            CountryEnum::Netherlands->getCapital()
        );
        self::assertEquals(
            'Nouméa',
            CountryEnum::NewCaledonia->getCapital()
        );
        self::assertEquals(
            'Wellington',
            CountryEnum::NewZealand->getCapital()
        );
        self::assertEquals(
            'Managua',
            CountryEnum::Nicaragua->getCapital()
        );
        self::assertEquals(
            'Niamey',
            CountryEnum::Niger->getCapital()
        );
        self::assertEquals(
            'Abuja',
            CountryEnum::Nigeria->getCapital()
        );
        self::assertEquals(
            'Alofi',
            CountryEnum::Niue->getCapital()
        );
        self::assertEquals(
            'Kingston',
            CountryEnum::NorfolkIsland->getCapital()
        );
        self::assertEquals(
            'Saipan',
            CountryEnum::NorthernMarianaIslands->getCapital()
        );
        self::assertEquals(
            'Oslo',
            CountryEnum::Norway->getCapital()
        );
        self::assertEquals(
            'Muscat',
            CountryEnum::Oman->getCapital()
        );
        self::assertEquals(
            'Islamabad',
            CountryEnum::Pakistan->getCapital()
        );
        self::assertEquals(
            'Melekeok',
            CountryEnum::Palau->getCapital()
        );
        self::assertEquals(
            'Ramallah',
            CountryEnum::Palestine->getCapital()
        );
        self::assertEquals(
            'Panama City',
            CountryEnum::Panama->getCapital()
        );
        self::assertEquals(
            'Port Moresby',
            CountryEnum::PapuaNewGuinea->getCapital()
        );
        self::assertEquals(
            'Asunción',
            CountryEnum::Paraguay->getCapital()
        );
        self::assertEquals(
            'Lima',
            CountryEnum::Peru->getCapital()
        );
        self::assertEquals(
            'Manila',
            CountryEnum::Philippines->getCapital()
        );
        self::assertEquals(
            'Adamstown',
            CountryEnum::Pitcairn->getCapital()
        );
        self::assertEquals(
            'Warsaw',
            CountryEnum::Poland->getCapital()
        );
        self::assertEquals(
            'Lisbon',
            CountryEnum::Portugal->getCapital()
        );
        self::assertEquals(
            'San Juan',
            CountryEnum::PuertoRico->getCapital()
        );
        self::assertEquals(
            'Doha',
            CountryEnum::Qatar->getCapital()
        );
        self::assertEquals(
            'Saint-Denis',
            CountryEnum::Reunion->getCapital()
        );
        self::assertEquals(
            'Bucharest',
            CountryEnum::Romania->getCapital()
        );
        self::assertEquals(
            'Moscow',
            CountryEnum::RussianFederation->getCapital()
        );
        self::assertEquals(
            'Kigali',
            CountryEnum::Rwanda->getCapital()
        );
        self::assertEquals(
            'Gustavia',
            CountryEnum::SaintBarthelemy->getCapital()
        );
        self::assertEquals(
            'Jamestown',
            CountryEnum::SaintHelena->getCapital()
        );
        self::assertEquals(
            'Basseterre',
            CountryEnum::SaintKittsandNevis->getCapital()
        );
        self::assertEquals(
            'Castries',
            CountryEnum::SaintLucia->getCapital()
        );
        self::assertEquals(
            'Marigot',
            CountryEnum::SaintMartinFrench->getCapital()
        );
        self::assertEquals(
            'Saint-Pierre',
            CountryEnum::SaintPierreandMiquelon->getCapital()
        );
        self::assertEquals(
            'Kingstown',
            CountryEnum::SaintVincentandtheGrenadines->getCapital()
        );
        self::assertEquals(
            'Apia',
            CountryEnum::Samoa->getCapital()
        );
        self::assertEquals(
            'San Marino',
            CountryEnum::SanMarino->getCapital()
        );
        self::assertEquals(
            'São Tomé',
            CountryEnum::SaoTomeandPrincipe->getCapital()
        );
        self::assertEquals(
            'Riyadh',
            CountryEnum::SaudiArabia->getCapital()
        );
        self::assertEquals(
            'Dakar',
            CountryEnum::Senegal->getCapital()
        );
        self::assertEquals(
            'Belgrade',
            CountryEnum::Serbia->getCapital()
        );
        self::assertEquals(
            'Victoria',
            CountryEnum::Seychelles->getCapital()
        );
        self::assertEquals(
            'Freetown',
            CountryEnum::SierraLeone->getCapital()
        );
        self::assertEquals(
            'Singapore',
            CountryEnum::Singapore->getCapital()
        );
        self::assertEquals(
            'Philipsburg',
            CountryEnum::SintMaartenDutch->getCapital()
        );
        self::assertEquals(
            'Bratislava',
            CountryEnum::Slovakia->getCapital()
        );
        self::assertEquals(
            'Ljubljana',
            CountryEnum::Slovenia->getCapital()
        );
        self::assertEquals(
            'Honiara',
            CountryEnum::SolomonIslands->getCapital()
        );
        self::assertEquals(
            'Mogadishu',
            CountryEnum::Somalia->getCapital()
        );
        self::assertEquals(
            'Pretoria (ZA1)',
            CountryEnum::SouthAfrica->getCapital()
        );
        self::assertEquals(
            'King Edward Point (Grytviken)',
            CountryEnum::SouthGeorgiaandtheSouthSandwichIslands->getCapital()
        );
        self::assertEquals(
            'Juba',
            CountryEnum::SouthSudan->getCapital()
        );
        self::assertEquals(
            'Madrid',
            CountryEnum::Spain->getCapital()
        );
        self::assertEquals(
            'Colombo',
            CountryEnum::SriLanka->getCapital()
        );
        self::assertEquals(
            'Khartoum',
            CountryEnum::Sudan->getCapital()
        );
        self::assertEquals(
            'Paramaribo',
            CountryEnum::Suriname->getCapital()
        );
        self::assertEquals(
            'Longyearbyen',
            CountryEnum::SvalbardandJanMayen->getCapital()
        );
        self::assertEquals(
            'Mbabane',
            CountryEnum::Swaziland->getCapital()
        );
        self::assertEquals(
            'Stockholm',
            CountryEnum::Sweden->getCapital()
        );
        self::assertEquals(
            'Berne',
            CountryEnum::Switzerland->getCapital()
        );
        self::assertEquals(
            'Damascus',
            CountryEnum::SyrianArabRepublic->getCapital()
        );
        self::assertEquals(
            'Taipei',
            CountryEnum::Taiwan->getCapital()
        );
        self::assertEquals(
            'Dushanbe',
            CountryEnum::Tajikistan->getCapital()
        );
        self::assertEquals(
            'Dodoma (TZ1)',
            CountryEnum::Tanzania->getCapital()
        );
        self::assertEquals(
            'Bangkok',
            CountryEnum::Thailand->getCapital()
        );
        self::assertEquals(
            'Dili',
            CountryEnum::TimorLeste->getCapital()
        );
        self::assertEquals(
            'Lomé',
            CountryEnum::Togo->getCapital()
        );
        self::assertEquals(
            '(TK2)',
            CountryEnum::Tokelau->getCapital()
        );
        self::assertEquals(
            'Nuku’alofa',
            CountryEnum::Tonga->getCapital()
        );
        self::assertEquals(
            'Port of Spain',
            CountryEnum::TrinidadandTobago->getCapital()
        );
        self::assertEquals(
            'Tunis',
            CountryEnum::Tunisia->getCapital()
        );
        self::assertEquals(
            'Ankara',
            CountryEnum::Turkey->getCapital()
        );
        self::assertEquals(
            'Ashgabat',
            CountryEnum::Turkmenistan->getCapital()
        );
        self::assertEquals(
            'Cockburn Town',
            CountryEnum::TurksandCaicosIslands->getCapital()
        );
        self::assertEquals(
            'Funafuti',
            CountryEnum::Tuvalu->getCapital()
        );
        self::assertEquals(
            'Kampala',
            CountryEnum::Uganda->getCapital()
        );
        self::assertEquals(
            'Kiev',
            CountryEnum::Ukraine->getCapital()
        );
        self::assertEquals(
            'Abu Dhabi',
            CountryEnum::UnitedArabEmirates->getCapital()
        );
        self::assertEquals(
            'London',
            CountryEnum::UnitedKingdom->getCapital()
        );
        self::assertEquals(
            'Washington DC',
            CountryEnum::UnitedStates->getCapital()
        );
        self::assertEquals(
            'United States Minor Outlying Islands',
            CountryEnum::UnitedStatesMinorOutlyingIslands->getCapital()
        );
        self::assertEquals(
            'Montevideo',
            CountryEnum::Uruguay->getCapital()
        );
        self::assertEquals(
            'Tashkent',
            CountryEnum::Uzbekistan->getCapital()
        );
        self::assertEquals(
            'Port Vila',
            CountryEnum::Vanuatu->getCapital()
        );
        self::assertEquals(
            'Caracas',
            CountryEnum::Venezuela->getCapital()
        );
        self::assertEquals(
            'Hanoi',
            CountryEnum::VietNam->getCapital()
        );
        self::assertEquals(
            'Charlotte Amalie',
            CountryEnum::VirginIslands->getCapital()
        );
        self::assertEquals(
            'Mata-Utu',
            CountryEnum::WallisandFutuna->getCapital()
        );
        self::assertEquals(
            'Al aaiun',
            CountryEnum::WesternSahara->getCapital()
        );
        self::assertEquals(
            'San’a',
            CountryEnum::Yemen->getCapital()
        );
        self::assertEquals(
            'Lusaka',
            CountryEnum::Zambia->getCapital()
        );
        self::assertEquals(
            'Harare',
            CountryEnum::Zimbabwe->getCapital()
        );
    }

    public function testGetExpectedCitizenship(): void
    {
        self::assertEquals(
            'Afghan',
            CountryEnum::Afghanistan->getCitizenShip()
        );
        self::assertEquals(
            'Åland Islander',
            CountryEnum::AlandIslands->getCitizenShip()
        );
        self::assertEquals(
            'Albanian',
            CountryEnum::Albania->getCitizenShip()
        );
        self::assertEquals(
            'Algerian',
            CountryEnum::Algeria->getCitizenShip()
        );
        self::assertEquals(
            'American Samoan',
            CountryEnum::AmericanSamoa->getCitizenShip()
        );
        self::assertEquals(
            'Andorran',
            CountryEnum::Andorra->getCitizenShip()
        );
        self::assertEquals(
            'Angolan',
            CountryEnum::Angola->getCitizenShip()
        );
        self::assertEquals(
            'Anguillan',
            CountryEnum::Anguilla->getCitizenShip()
        );
        self::assertEquals(
            'of Antartica',
            CountryEnum::Antarctica->getCitizenShip()
        );
        self::assertEquals(
            'of Antigua and Barbuda',
            CountryEnum::AntiguaandBarbuda->getCitizenShip()
        );
        self::assertEquals(
            'Argentinian',
            CountryEnum::Argentina->getCitizenShip()
        );
        self::assertEquals(
            'Armenian',
            CountryEnum::Armenia->getCitizenShip()
        );
        self::assertEquals(
            'Aruban',
            CountryEnum::Aruba->getCitizenShip()
        );
        self::assertEquals(
            'Australian',
            CountryEnum::Australia->getCitizenShip()
        );
        self::assertEquals(
            'Austrian',
            CountryEnum::Austria->getCitizenShip()
        );
        self::assertEquals(
            'Azerbaijani',
            CountryEnum::Azerbaijan->getCitizenShip()
        );
        self::assertEquals(
            'Bahamian',
            CountryEnum::Bahamas->getCitizenShip()
        );
        self::assertEquals(
            'Bahraini',
            CountryEnum::Bahrain->getCitizenShip()
        );
        self::assertEquals(
            'Bangladeshi',
            CountryEnum::Bangladesh->getCitizenShip()
        );
        self::assertEquals(
            'Barbadian',
            CountryEnum::Barbados->getCitizenShip()
        );
        self::assertEquals(
            'Belarusian',
            CountryEnum::Belarus->getCitizenShip()
        );
        self::assertEquals(
            'Belgian',
            CountryEnum::Belgium->getCitizenShip()
        );
        self::assertEquals(
            'Belizean',
            CountryEnum::Belize->getCitizenShip()
        );
        self::assertEquals(
            'Beninese',
            CountryEnum::Benin->getCitizenShip()
        );
        self::assertEquals(
            'Bermudian',
            CountryEnum::Bermuda->getCitizenShip()
        );
        self::assertEquals(
            'Bhutanese',
            CountryEnum::Bhutan->getCitizenShip()
        );
        self::assertEquals(
            'Bolivian',
            CountryEnum::Bolivia->getCitizenShip()
        );
        self::assertEquals(
            'of Bonaire, Sint Eustatius and Saba',
            CountryEnum::Bonaire->getCitizenShip()
        );
        self::assertEquals(
            'of Bosnia and Herzegovina',
            CountryEnum::BosniaandHerzegovina->getCitizenShip()
        );
        self::assertEquals(
            'Botswanan',
            CountryEnum::Botswana->getCitizenShip()
        );
        self::assertEquals(
            'of Bouvet island',
            CountryEnum::BouvetIsland->getCitizenShip()
        );
        self::assertEquals(
            'Brazilian',
            CountryEnum::Brazil->getCitizenShip()
        );
        self::assertEquals(
            'Changosian',
            CountryEnum::BritishIndianOceanTerritory->getCitizenShip()
        );
        self::assertEquals(
            'British Virgin Islander;',
            CountryEnum::BritishVirginIslands->getCitizenShip()
        );
        self::assertEquals(
            'Bruneian',
            CountryEnum::BruneiDarussalam->getCitizenShip()
        );
        self::assertEquals(
            'Bulgarian',
            CountryEnum::Bulgaria->getCitizenShip()
        );
        self::assertEquals(
            'Burkinabe',
            CountryEnum::BurkinaFaso->getCitizenShip()
        );
        self::assertEquals(
            'Burundian',
            CountryEnum::Burundi->getCitizenShip()
        );
        self::assertEquals(
            'Cambodian',
            CountryEnum::Cambodia->getCitizenShip()
        );
        self::assertEquals(
            'Cameroonian',
            CountryEnum::Cameroon->getCitizenShip()
        );
        self::assertEquals(
            'Canadian',
            CountryEnum::Canada->getCitizenShip()
        );
        self::assertEquals(
            'Cape Verdean',
            CountryEnum::CapeVerde->getCitizenShip()
        );
        self::assertEquals(
            'Caymanian',
            CountryEnum::CaymanIslands->getCitizenShip()
        );
        self::assertEquals(
            'Central African',
            CountryEnum::CentralAfricanRepublic->getCitizenShip()
        );
        self::assertEquals(
            'Chadian',
            CountryEnum::Chad->getCitizenShip()
        );
        self::assertEquals(
            'Chilean',
            CountryEnum::Chile->getCitizenShip()
        );
        self::assertEquals(
            'Chinese',
            CountryEnum::China->getCitizenShip()
        );
        self::assertEquals(
            'Christmas Islander',
            CountryEnum::ChristmasIsland->getCitizenShip()
        );
        self::assertEquals(
            'Cocos Islander',
            CountryEnum::CocosIslands->getCitizenShip()
        );
        self::assertEquals(
            'Colombian',
            CountryEnum::Colombia->getCitizenShip()
        );
        self::assertEquals(
            'Comorian',
            CountryEnum::Comoros->getCitizenShip()
        );
        self::assertEquals(
            'Congolese',
            CountryEnum::Congo->getCitizenShip()
        );
        self::assertEquals(
            'Congolese',
            CountryEnum::CongoDR->getCitizenShip()
        );
        self::assertEquals(
            'Cook Islander',
            CountryEnum::CookIslands->getCitizenShip()
        );
        self::assertEquals(
            'Costa Rican',
            CountryEnum::CostaRica->getCitizenShip()
        );
        self::assertEquals(
            'Ivorian',
            CountryEnum::CotedIvoire->getCitizenShip()
        );
        self::assertEquals(
            'Croatian',
            CountryEnum::Croatia->getCitizenShip()
        );
        self::assertEquals(
            'Cuban',
            CountryEnum::Cuba->getCitizenShip()
        );
        self::assertEquals(
            'Curaçaoan',
            CountryEnum::Curacao->getCitizenShip()
        );
        self::assertEquals(
            'Cypriot',
            CountryEnum::Cyprus->getCitizenShip()
        );
        self::assertEquals(
            'Czech',
            CountryEnum::Czechia->getCitizenShip()
        );
        self::assertEquals(
            'Danish',
            CountryEnum::Denmark->getCitizenShip()
        );
        self::assertEquals(
            'Djiboutian',
            CountryEnum::Djibouti->getCitizenShip()
        );
        self::assertEquals(
            'Dominican',
            CountryEnum::Dominica->getCitizenShip()
        );
        self::assertEquals(
            'Dominican',
            CountryEnum::DominicanRepublic->getCitizenShip()
        );
        self::assertEquals(
            'Ecuadorian',
            CountryEnum::Ecuador->getCitizenShip()
        );
        self::assertEquals(
            'Egyptian',
            CountryEnum::Egypt->getCitizenShip()
        );
        self::assertEquals(
            'Salvadoran',
            CountryEnum::ElSalvador->getCitizenShip()
        );
        self::assertEquals(
            'Equatorial Guinean',
            CountryEnum::EquatorialGuinea->getCitizenShip()
        );
        self::assertEquals(
            'Eritrean',
            CountryEnum::Eritrea->getCitizenShip()
        );
        self::assertEquals(
            'Estonian',
            CountryEnum::Estonia->getCitizenShip()
        );
        self::assertEquals(
            'Ethiopian',
            CountryEnum::Ethiopia->getCitizenShip()
        );
        self::assertEquals(
            'Falkland Islander',
            CountryEnum::FalklandIslands->getCitizenShip()
        );
        self::assertEquals(
            'Faeroese',
            CountryEnum::FaroeIslands->getCitizenShip()
        );
        self::assertEquals(
            'Fijian',
            CountryEnum::Fiji->getCitizenShip()
        );
        self::assertEquals(
            'Finnish',
            CountryEnum::Finland->getCitizenShip()
        );
        self::assertEquals(
            'French',
            CountryEnum::France->getCitizenShip()
        );
        self::assertEquals(
            'Guianese',
            CountryEnum::FrenchGuiana->getCitizenShip()
        );
        self::assertEquals(
            'Polynesian',
            CountryEnum::FrenchPolynesia->getCitizenShip()
        );
        self::assertEquals(
            'of French Southern and Antarctic Lands',
            CountryEnum::FrenchSouthernTerritories->getCitizenShip()
        );
        self::assertEquals(
            'Gabonese',
            CountryEnum::Gabon->getCitizenShip()
        );
        self::assertEquals(
            'Gambian',
            CountryEnum::Gambia->getCitizenShip()
        );
        self::assertEquals(
            'Georgian',
            CountryEnum::Georgia->getCitizenShip()
        );
        self::assertEquals(
            'German',
            CountryEnum::Germany->getCitizenShip()
        );
        self::assertEquals(
            'Ghanaian',
            CountryEnum::Ghana->getCitizenShip()
        );
        self::assertEquals(
            'Gibraltarian',
            CountryEnum::Gibraltar->getCitizenShip()
        );
        self::assertEquals(
            'Greek',
            CountryEnum::Greece->getCitizenShip()
        );
        self::assertEquals(
            'Greenlander',
            CountryEnum::Greenland->getCitizenShip()
        );
        self::assertEquals(
            'Grenadian',
            CountryEnum::Grenada->getCitizenShip()
        );
        self::assertEquals(
            'Guadeloupean',
            CountryEnum::Guadeloupe->getCitizenShip()
        );
        self::assertEquals(
            'Guamanian',
            CountryEnum::Guam->getCitizenShip()
        );
        self::assertEquals(
            'Guatemalan',
            CountryEnum::Guatemala->getCitizenShip()
        );
        self::assertEquals(
            'of Guernsey',
            CountryEnum::Guernsey->getCitizenShip()
        );
        self::assertEquals(
            'Guinean',
            CountryEnum::Guinea->getCitizenShip()
        );
        self::assertEquals(
            'Guinea-Bissau national',
            CountryEnum::GuineaBissau->getCitizenShip()
        );
        self::assertEquals(
            'Guyanese',
            CountryEnum::Guyana->getCitizenShip()
        );
        self::assertEquals(
            'Haitian',
            CountryEnum::Haiti->getCitizenShip()
        );
        self::assertEquals(
            'of Territory of Heard Island and McDonald Islands',
            CountryEnum::HeardIslandandMcDonaldIslands->getCitizenShip()
        );
        self::assertEquals(
            'of the Holy See/of the Vatican',
            CountryEnum::HolySee->getCitizenShip()
        );
        self::assertEquals(
            'Honduran',
            CountryEnum::Honduras->getCitizenShip()
        );
        self::assertEquals(
            'Hong Kong Chinese',
            CountryEnum::HongKong->getCitizenShip()
        );
        self::assertEquals(
            'Hungarian',
            CountryEnum::Hungary->getCitizenShip()
        );
        self::assertEquals(
            'Icelander',
            CountryEnum::Iceland->getCitizenShip()
        );
        self::assertEquals(
            'Indian',
            CountryEnum::India->getCitizenShip()
        );
        self::assertEquals(
            'Indonesian',
            CountryEnum::Indonesia->getCitizenShip()
        );
        self::assertEquals(
            'Iranian',
            CountryEnum::Iran->getCitizenShip()
        );
        self::assertEquals(
            'Iraqi',
            CountryEnum::Iraq->getCitizenShip()
        );
        self::assertEquals(
            'Irish',
            CountryEnum::Ireland->getCitizenShip()
        );
        self::assertEquals(
            'Manxman; Manxwoman',
            CountryEnum::IsleofMan->getCitizenShip()
        );
        self::assertEquals(
            'Israeli',
            CountryEnum::Israel->getCitizenShip()
        );
        self::assertEquals(
            'Italian',
            CountryEnum::Italy->getCitizenShip()
        );
        self::assertEquals(
            'Jamaican',
            CountryEnum::Jamaica->getCitizenShip()
        );
        self::assertEquals(
            'Japanese',
            CountryEnum::Japan->getCitizenShip()
        );
        self::assertEquals(
            'of Jersey',
            CountryEnum::Jersey->getCitizenShip()
        );
        self::assertEquals(
            'Jordanian',
            CountryEnum::Jordan->getCitizenShip()
        );
        self::assertEquals(
            'Kazakh',
            CountryEnum::Kazakhstan->getCitizenShip()
        );
        self::assertEquals(
            'Kenyan',
            CountryEnum::Kenya->getCitizenShip()
        );
        self::assertEquals(
            'Kiribatian',
            CountryEnum::Kiribati->getCitizenShip()
        );
        self::assertEquals(
            'South Korean',
            CountryEnum::Korea->getCitizenShip()
        );
        self::assertEquals(
            'North Korean',
            CountryEnum::KoreaDR->getCitizenShip()
        );
        self::assertEquals(
            'Kuwaiti',
            CountryEnum::Kuwait->getCitizenShip()
        );
        self::assertEquals(
            'Kyrgyz',
            CountryEnum::Kyrgyzstan->getCitizenShip()
        );
        self::assertEquals(
            'Lao',
            CountryEnum::LaoPeoplesDemocraticRepublic->getCitizenShip()
        );
        self::assertEquals(
            'Latvian',
            CountryEnum::Latvia->getCitizenShip()
        );
        self::assertEquals(
            'Lebanese',
            CountryEnum::Lebanon->getCitizenShip()
        );
        self::assertEquals(
            'Basotho',
            CountryEnum::Lesotho->getCitizenShip()
        );
        self::assertEquals(
            'Liberian',
            CountryEnum::Liberia->getCitizenShip()
        );
        self::assertEquals(
            'Libyan',
            CountryEnum::Libya->getCitizenShip()
        );
        self::assertEquals(
            'Liechtensteiner',
            CountryEnum::Liechtenstein->getCitizenShip()
        );
        self::assertEquals(
            'Lithuanian',
            CountryEnum::Lithuania->getCitizenShip()
        );
        self::assertEquals(
            'Luxembourger',
            CountryEnum::Luxembourg->getCitizenShip()
        );
        self::assertEquals(
            'Macanese',
            CountryEnum::Macao->getCitizenShip()
        );
        self::assertEquals(
            'of the former Yugoslav Republic of Macedonia',
            CountryEnum::Macedonia->getCitizenShip()
        );
        self::assertEquals(
            'Malagasy',
            CountryEnum::Madagascar->getCitizenShip()
        );
        self::assertEquals(
            'Malawian',
            CountryEnum::Malawi->getCitizenShip()
        );
        self::assertEquals(
            'Malaysian',
            CountryEnum::Malaysia->getCitizenShip()
        );
        self::assertEquals(
            'Maldivian',
            CountryEnum::Maldives->getCitizenShip()
        );
        self::assertEquals(
            'Malian',
            CountryEnum::Mali->getCitizenShip()
        );
        self::assertEquals(
            'Maltese',
            CountryEnum::Malta->getCitizenShip()
        );
        self::assertEquals(
            'Marshallese',
            CountryEnum::MarshallIslands->getCitizenShip()
        );
        self::assertEquals(
            'Martinican',
            CountryEnum::Martinique->getCitizenShip()
        );
        self::assertEquals(
            'Mauritanian',
            CountryEnum::Mauritania->getCitizenShip()
        );
        self::assertEquals(
            'Mauritian',
            CountryEnum::Mauritius->getCitizenShip()
        );
        self::assertEquals(
            'Mahorais',
            CountryEnum::Mayotte->getCitizenShip()
        );
        self::assertEquals(
            'Mexican',
            CountryEnum::Mexico->getCitizenShip()
        );
        self::assertEquals(
            'Micronesian',
            CountryEnum::Micronesia->getCitizenShip()
        );
        self::assertEquals(
            'Moldovan',
            CountryEnum::Moldova->getCitizenShip()
        );
        self::assertEquals(
            'Monegasque',
            CountryEnum::Monaco->getCitizenShip()
        );
        self::assertEquals(
            'Mongolian',
            CountryEnum::Mongolia->getCitizenShip()
        );
        self::assertEquals(
            'Montenegrin',
            CountryEnum::Montenegro->getCitizenShip()
        );
        self::assertEquals(
            'Montserratian',
            CountryEnum::Montserrat->getCitizenShip()
        );
        self::assertEquals(
            'Moroccan',
            CountryEnum::Morocco->getCitizenShip()
        );
        self::assertEquals(
            'Mozambican',
            CountryEnum::Mozambique->getCitizenShip()
        );
        self::assertEquals(
            'Burmese',
            CountryEnum::Myanmar->getCitizenShip()
        );
        self::assertEquals(
            'Namibian',
            CountryEnum::Namibia->getCitizenShip()
        );
        self::assertEquals(
            'Nauruan',
            CountryEnum::Nauru->getCitizenShip()
        );
        self::assertEquals(
            'Nepalese',
            CountryEnum::Nepal->getCitizenShip()
        );
        self::assertEquals(
            'Dutch',
            CountryEnum::Netherlands->getCitizenShip()
        );
        self::assertEquals(
            'New Caledonian',
            CountryEnum::NewCaledonia->getCitizenShip()
        );
        self::assertEquals(
            'New Zealander',
            CountryEnum::NewZealand->getCitizenShip()
        );
        self::assertEquals(
            'Nicaraguan',
            CountryEnum::Nicaragua->getCitizenShip()
        );
        self::assertEquals(
            'Nigerien',
            CountryEnum::Niger->getCitizenShip()
        );
        self::assertEquals(
            'Nigerian',
            CountryEnum::Nigeria->getCitizenShip()
        );
        self::assertEquals(
            'Niuean',
            CountryEnum::Niue->getCitizenShip()
        );
        self::assertEquals(
            'Norfolk Islander',
            CountryEnum::NorfolkIsland->getCitizenShip()
        );
        self::assertEquals(
            'Northern Mariana Islander',
            CountryEnum::NorthernMarianaIslands->getCitizenShip()
        );
        self::assertEquals(
            'Norwegian',
            CountryEnum::Norway->getCitizenShip()
        );
        self::assertEquals(
            'Omani',
            CountryEnum::Oman->getCitizenShip()
        );
        self::assertEquals(
            'Pakistani',
            CountryEnum::Pakistan->getCitizenShip()
        );
        self::assertEquals(
            'Palauan',
            CountryEnum::Palau->getCitizenShip()
        );
        self::assertEquals(
            'Palestinian',
            CountryEnum::Palestine->getCitizenShip()
        );
        self::assertEquals(
            'Panamanian',
            CountryEnum::Panama->getCitizenShip()
        );
        self::assertEquals(
            'Papua New Guinean',
            CountryEnum::PapuaNewGuinea->getCitizenShip()
        );
        self::assertEquals(
            'Paraguayan',
            CountryEnum::Paraguay->getCitizenShip()
        );
        self::assertEquals(
            'Peruvian',
            CountryEnum::Peru->getCitizenShip()
        );
        self::assertEquals(
            'Filipino',
            CountryEnum::Philippines->getCitizenShip()
        );
        self::assertEquals(
            'Pitcairner',
            CountryEnum::Pitcairn->getCitizenShip()
        );
        self::assertEquals(
            'Polish',
            CountryEnum::Poland->getCitizenShip()
        );
        self::assertEquals(
            'Portuguese',
            CountryEnum::Portugal->getCitizenShip()
        );
        self::assertEquals(
            'Puerto Rican',
            CountryEnum::PuertoRico->getCitizenShip()
        );
        self::assertEquals(
            'Qatari',
            CountryEnum::Qatar->getCitizenShip()
        );
        self::assertEquals(
            'Reunionese',
            CountryEnum::Reunion->getCitizenShip()
        );
        self::assertEquals(
            'Romanian',
            CountryEnum::Romania->getCitizenShip()
        );
        self::assertEquals(
            'Russian',
            CountryEnum::RussianFederation->getCitizenShip()
        );
        self::assertEquals(
            'Rwandan; Rwandese',
            CountryEnum::Rwanda->getCitizenShip()
        );
        self::assertEquals(
            'of Saint Barthélemy',
            CountryEnum::SaintBarthelemy->getCitizenShip()
        );
        self::assertEquals(
            'Saint Helenian',
            CountryEnum::SaintHelena->getCitizenShip()
        );
        self::assertEquals(
            'Kittsian; Nevisian',
            CountryEnum::SaintKittsandNevis->getCitizenShip()
        );
        self::assertEquals(
            'Saint Lucian',
            CountryEnum::SaintLucia->getCitizenShip()
        );
        self::assertEquals(
            'of Saint Martin',
            CountryEnum::SaintMartinFrench->getCitizenShip()
        );
        self::assertEquals(
            'St-Pierrais; Miquelonnais',
            CountryEnum::SaintPierreandMiquelon->getCitizenShip()
        );
        self::assertEquals(
            'Vincentian',
            CountryEnum::SaintVincentandtheGrenadines->getCitizenShip()
        );
        self::assertEquals(
            'Samoan',
            CountryEnum::Samoa->getCitizenShip()
        );
        self::assertEquals(
            'San Marinese',
            CountryEnum::SanMarino->getCitizenShip()
        );
        self::assertEquals(
            'São Toméan',
            CountryEnum::SaoTomeandPrincipe->getCitizenShip()
        );
        self::assertEquals(
            'Saudi Arabian',
            CountryEnum::SaudiArabia->getCitizenShip()
        );
        self::assertEquals(
            'Senegalese',
            CountryEnum::Senegal->getCitizenShip()
        );
        self::assertEquals(
            'Serb',
            CountryEnum::Serbia->getCitizenShip()
        );
        self::assertEquals(
            'Seychellois',
            CountryEnum::Seychelles->getCitizenShip()
        );
        self::assertEquals(
            'Sierra Leonean',
            CountryEnum::SierraLeone->getCitizenShip()
        );
        self::assertEquals(
            'Singaporean',
            CountryEnum::Singapore->getCitizenShip()
        );
        self::assertEquals(
            'Sint Maartener',
            CountryEnum::SintMaartenDutch->getCitizenShip()
        );
        self::assertEquals(
            'Slovak',
            CountryEnum::Slovakia->getCitizenShip()
        );
        self::assertEquals(
            'Slovene',
            CountryEnum::Slovenia->getCitizenShip()
        );
        self::assertEquals(
            'Solomon Islander',
            CountryEnum::SolomonIslands->getCitizenShip()
        );
        self::assertEquals(
            'Somali',
            CountryEnum::Somalia->getCitizenShip()
        );
        self::assertEquals(
            'South African',
            CountryEnum::SouthAfrica->getCitizenShip()
        );
        self::assertEquals(
            'of South Georgia and the South Sandwich Islands',
            CountryEnum::SouthGeorgiaandtheSouthSandwichIslands->getCitizenShip()
        );
        self::assertEquals(
            'South Sudanese',
            CountryEnum::SouthSudan->getCitizenShip()
        );
        self::assertEquals(
            'Spaniard',
            CountryEnum::Spain->getCitizenShip()
        );
        self::assertEquals(
            'Sri Lankan',
            CountryEnum::SriLanka->getCitizenShip()
        );
        self::assertEquals(
            'Sudanese',
            CountryEnum::Sudan->getCitizenShip()
        );
        self::assertEquals(
            'Surinamese',
            CountryEnum::Suriname->getCitizenShip()
        );
        self::assertEquals(
            'of Svalbard',
            CountryEnum::SvalbardandJanMayen->getCitizenShip()
        );
        self::assertEquals(
            'Swazi',
            CountryEnum::Swaziland->getCitizenShip()
        );
        self::assertEquals(
            'Swedish',
            CountryEnum::Sweden->getCitizenShip()
        );
        self::assertEquals(
            'Swiss',
            CountryEnum::Switzerland->getCitizenShip()
        );
        self::assertEquals(
            'Syrian',
            CountryEnum::SyrianArabRepublic->getCitizenShip()
        );
        self::assertEquals(
            'Taiwanese',
            CountryEnum::Taiwan->getCitizenShip()
        );
        self::assertEquals(
            'Tajik',
            CountryEnum::Tajikistan->getCitizenShip()
        );
        self::assertEquals(
            'Tanzanian',
            CountryEnum::Tanzania->getCitizenShip()
        );
        self::assertEquals(
            'Thai',
            CountryEnum::Thailand->getCitizenShip()
        );
        self::assertEquals(
            'East Timorese',
            CountryEnum::TimorLeste->getCitizenShip()
        );
        self::assertEquals(
            'Togolese',
            CountryEnum::Togo->getCitizenShip()
        );
        self::assertEquals(
            'Tokelauan',
            CountryEnum::Tokelau->getCitizenShip()
        );
        self::assertEquals(
            'Tongan',
            CountryEnum::Tonga->getCitizenShip()
        );
        self::assertEquals(
            'Trinidadian; Tobagonian',
            CountryEnum::TrinidadandTobago->getCitizenShip()
        );
        self::assertEquals(
            'Tunisian',
            CountryEnum::Tunisia->getCitizenShip()
        );
        self::assertEquals(
            'Turk',
            CountryEnum::Turkey->getCitizenShip()
        );
        self::assertEquals(
            'Turkmen',
            CountryEnum::Turkmenistan->getCitizenShip()
        );
        self::assertEquals(
            'Turks and Caicos Islander',
            CountryEnum::TurksandCaicosIslands->getCitizenShip()
        );
        self::assertEquals(
            'Tuvaluan',
            CountryEnum::Tuvalu->getCitizenShip()
        );
        self::assertEquals(
            'Ugandan',
            CountryEnum::Uganda->getCitizenShip()
        );
        self::assertEquals(
            'Ukrainian',
            CountryEnum::Ukraine->getCitizenShip()
        );
        self::assertEquals(
            'Emirian',
            CountryEnum::UnitedArabEmirates->getCitizenShip()
        );
        self::assertEquals(
            'British',
            CountryEnum::UnitedKingdom->getCitizenShip()
        );
        self::assertEquals(
            'American',
            CountryEnum::UnitedStates->getCitizenShip()
        );
        self::assertEquals(
            'of United States Minor Outlying Islands',
            CountryEnum::UnitedStatesMinorOutlyingIslands->getCitizenShip()
        );
        self::assertEquals(
            'Uruguayan',
            CountryEnum::Uruguay->getCitizenShip()
        );
        self::assertEquals(
            'Uzbek',
            CountryEnum::Uzbekistan->getCitizenShip()
        );
        self::assertEquals(
            'Vanuatuan',
            CountryEnum::Vanuatu->getCitizenShip()
        );
        self::assertEquals(
            'Venezuelan',
            CountryEnum::Venezuela->getCitizenShip()
        );
        self::assertEquals(
            'Vietnamese',
            CountryEnum::VietNam->getCitizenShip()
        );
        self::assertEquals(
            'US Virgin Islander',
            CountryEnum::VirginIslands->getCitizenShip()
        );
        self::assertEquals(
            'Wallisian; Futunan; Wallis and Futuna Islander',
            CountryEnum::WallisandFutuna->getCitizenShip()
        );
        self::assertEquals(
            'Sahrawi',
            CountryEnum::WesternSahara->getCitizenShip()
        );
        self::assertEquals(
            'Yemenite',
            CountryEnum::Yemen->getCitizenShip()
        );
        self::assertEquals(
            'Zambian',
            CountryEnum::Zambia->getCitizenShip()
        );
        self::assertEquals(
            'Zimbabwean',
            CountryEnum::Zimbabwe->getCitizenShip()
        );
    }

    public function testGetExpectedCurrency(): void
    {
        self::assertEquals(
            'afghani',
            CountryEnum::Afghanistan->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::AlandIslands->getCurrency()
        );
        self::assertEquals(
            'lek',
            CountryEnum::Albania->getCurrency()
        );
        self::assertEquals(
            'Algerian dinar',
            CountryEnum::Algeria->getCurrency()
        );
        self::assertEquals(
            'US dollar',
            CountryEnum::AmericanSamoa->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Andorra->getCurrency()
        );
        self::assertEquals(
            'kwanza',
            CountryEnum::Angola->getCurrency()
        );
        self::assertEquals(
            'East Caribbean dollar',
            CountryEnum::Anguilla->getCurrency()
        );
        self::assertEquals(
            '',
            CountryEnum::Antarctica->getCurrency()
        );
        self::assertEquals(
            'East Caribbean dollar',
            CountryEnum::AntiguaandBarbuda->getCurrency()
        );
        self::assertEquals(
            'Argentine peso',
            CountryEnum::Argentina->getCurrency()
        );
        self::assertEquals(
            'dram (inv.)',
            CountryEnum::Armenia->getCurrency()
        );
        self::assertEquals(
            'Aruban guilder',
            CountryEnum::Aruba->getCurrency()
        );
        self::assertEquals(
            'Australian dollar',
            CountryEnum::Australia->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Austria->getCurrency()
        );
        self::assertEquals(
            'Azerbaijani manat',
            CountryEnum::Azerbaijan->getCurrency()
        );
        self::assertEquals(
            'Bahamian dollar',
            CountryEnum::Bahamas->getCurrency()
        );
        self::assertEquals(
            'Bahraini dinar',
            CountryEnum::Bahrain->getCurrency()
        );
        self::assertEquals(
            'taka (inv.)',
            CountryEnum::Bangladesh->getCurrency()
        );
        self::assertEquals(
            'Barbados dollar',
            CountryEnum::Barbados->getCurrency()
        );
        self::assertEquals(
            'Belarusian rouble',
            CountryEnum::Belarus->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Belgium->getCurrency()
        );
        self::assertEquals(
            'Belize dollar',
            CountryEnum::Belize->getCurrency()
        );
        self::assertEquals(
            'CFA franc (BCEAO)',
            CountryEnum::Benin->getCurrency()
        );
        self::assertEquals(
            'Bermuda dollar',
            CountryEnum::Bermuda->getCurrency()
        );
        self::assertEquals(
            'ngultrum (inv.)',
            CountryEnum::Bhutan->getCurrency()
        );
        self::assertEquals(
            'boliviano',
            CountryEnum::Bolivia->getCurrency()
        );
        self::assertEquals(
            'US dollar',
            CountryEnum::Bonaire->getCurrency()
        );
        self::assertEquals(
            'convertible mark',
            CountryEnum::BosniaandHerzegovina->getCurrency()
        );
        self::assertEquals(
            'pula (inv.)',
            CountryEnum::Botswana->getCurrency()
        );
        self::assertEquals(
            '',
            CountryEnum::BouvetIsland->getCurrency()
        );
        self::assertEquals(
            'real (pl. reais)',
            CountryEnum::Brazil->getCurrency()
        );
        self::assertEquals(
            'US dollar',
            CountryEnum::BritishIndianOceanTerritory->getCurrency()
        );
        self::assertEquals(
            'US dollar',
            CountryEnum::BritishVirginIslands->getCurrency()
        );
        self::assertEquals(
            'Brunei dollar',
            CountryEnum::BruneiDarussalam->getCurrency()
        );
        self::assertEquals(
            'lev (pl. leva)',
            CountryEnum::Bulgaria->getCurrency()
        );
        self::assertEquals(
            'CFA franc (BCEAO)',
            CountryEnum::BurkinaFaso->getCurrency()
        );
        self::assertEquals(
            'Burundi franc',
            CountryEnum::Burundi->getCurrency()
        );
        self::assertEquals(
            'riel',
            CountryEnum::Cambodia->getCurrency()
        );
        self::assertEquals(
            'CFA franc (BEAC)',
            CountryEnum::Cameroon->getCurrency()
        );
        self::assertEquals(
            'Canadian dollar',
            CountryEnum::Canada->getCurrency()
        );
        self::assertEquals(
            'Cape Verde escudo',
            CountryEnum::CapeVerde->getCurrency()
        );
        self::assertEquals(
            'Cayman Islands dollar',
            CountryEnum::CaymanIslands->getCurrency()
        );
        self::assertEquals(
            'CFA franc (BEAC)',
            CountryEnum::CentralAfricanRepublic->getCurrency()
        );
        self::assertEquals(
            'CFA franc (BEAC)',
            CountryEnum::Chad->getCurrency()
        );
        self::assertEquals(
            'Chilean peso',
            CountryEnum::Chile->getCurrency()
        );
        self::assertEquals(
            'renminbi-yuan (inv.)',
            CountryEnum::China->getCurrency()
        );
        self::assertEquals(
            'Australian dollar',
            CountryEnum::ChristmasIsland->getCurrency()
        );
        self::assertEquals(
            'Australian dollar',
            CountryEnum::CocosIslands->getCurrency()
        );
        self::assertEquals(
            'Colombian peso',
            CountryEnum::Colombia->getCurrency()
        );
        self::assertEquals(
            'Comorian franc',
            CountryEnum::Comoros->getCurrency()
        );
        self::assertEquals(
            'CFA franc (BEAC)',
            CountryEnum::Congo->getCurrency()
        );
        self::assertEquals(
            'Congolese franc',
            CountryEnum::CongoDR->getCurrency()
        );
        self::assertEquals(
            'New Zealand dollar',
            CountryEnum::CookIslands->getCurrency()
        );
        self::assertEquals(
            'Costa Rican colón (pl. colones)',
            CountryEnum::CostaRica->getCurrency()
        );
        self::assertEquals(
            'CFA franc (BCEAO)',
            CountryEnum::CotedIvoire->getCurrency()
        );
        self::assertEquals(
            'kuna (inv.)',
            CountryEnum::Croatia->getCurrency()
        );
        self::assertEquals(
            'Cuban peso',
            CountryEnum::Cuba->getCurrency()
        );
        self::assertEquals(
            'Netherlands Antillean guilder (CW1)',
            CountryEnum::Curacao->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Cyprus->getCurrency()
        );
        self::assertEquals(
            'Czech koruna (pl. koruny)',
            CountryEnum::Czechia->getCurrency()
        );
        self::assertEquals(
            'Danish krone',
            CountryEnum::Denmark->getCurrency()
        );
        self::assertEquals(
            'Djibouti franc',
            CountryEnum::Djibouti->getCurrency()
        );
        self::assertEquals(
            'East Caribbean dollar',
            CountryEnum::Dominica->getCurrency()
        );
        self::assertEquals(
            'Dominican peso',
            CountryEnum::DominicanRepublic->getCurrency()
        );
        self::assertEquals(
            'US dollar',
            CountryEnum::Ecuador->getCurrency()
        );
        self::assertEquals(
            'Egyptian pound',
            CountryEnum::Egypt->getCurrency()
        );
        self::assertEquals(
            'Salvadorian colón (pl. colones)',
            CountryEnum::ElSalvador->getCurrency()
        );
        self::assertEquals(
            'CFA franc (BEAC)',
            CountryEnum::EquatorialGuinea->getCurrency()
        );
        self::assertEquals(
            'nakfa',
            CountryEnum::Eritrea->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Estonia->getCurrency()
        );
        self::assertEquals(
            'birr (inv.)',
            CountryEnum::Ethiopia->getCurrency()
        );
        self::assertEquals(
            'Falkland Islands pound',
            CountryEnum::FalklandIslands->getCurrency()
        );
        self::assertEquals(
            'Danish krone',
            CountryEnum::FaroeIslands->getCurrency()
        );
        self::assertEquals(
            'Fiji dollar',
            CountryEnum::Fiji->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Finland->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::France->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::FrenchGuiana->getCurrency()
        );
        self::assertEquals(
            'CFP franc',
            CountryEnum::FrenchPolynesia->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::FrenchSouthernTerritories->getCurrency()
        );
        self::assertEquals(
            'CFA franc (BEAC)',
            CountryEnum::Gabon->getCurrency()
        );
        self::assertEquals(
            'dalasi (inv.)',
            CountryEnum::Gambia->getCurrency()
        );
        self::assertEquals(
            'lari',
            CountryEnum::Georgia->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Germany->getCurrency()
        );
        self::assertEquals(
            'Ghana cedi',
            CountryEnum::Ghana->getCurrency()
        );
        self::assertEquals(
            'Gibraltar pound',
            CountryEnum::Gibraltar->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Greece->getCurrency()
        );
        self::assertEquals(
            'Danish krone',
            CountryEnum::Greenland->getCurrency()
        );
        self::assertEquals(
            'East Caribbean dollar',
            CountryEnum::Grenada->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Guadeloupe->getCurrency()
        );
        self::assertEquals(
            'US dollar',
            CountryEnum::Guam->getCurrency()
        );
        self::assertEquals(
            'quetzal (pl. quetzales)',
            CountryEnum::Guatemala->getCurrency()
        );
        self::assertEquals(
            'Guernsey pound (GG2)',
            CountryEnum::Guernsey->getCurrency()
        );
        self::assertEquals(
            'Guinean franc',
            CountryEnum::Guinea->getCurrency()
        );
        self::assertEquals(
            'CFA franc (BCEAO)',
            CountryEnum::GuineaBissau->getCurrency()
        );
        self::assertEquals(
            'Guyana dollar',
            CountryEnum::Guyana->getCurrency()
        );
        self::assertEquals(
            'gourde',
            CountryEnum::Haiti->getCurrency()
        );
        self::assertEquals(
            '',
            CountryEnum::HeardIslandandMcDonaldIslands->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::HolySee->getCurrency()
        );
        self::assertEquals(
            'lempira',
            CountryEnum::Honduras->getCurrency()
        );
        self::assertEquals(
            'Hong Kong dollar',
            CountryEnum::HongKong->getCurrency()
        );
        self::assertEquals(
            'forint (inv.)',
            CountryEnum::Hungary->getCurrency()
        );
        self::assertEquals(
            'króna (pl. krónur)',
            CountryEnum::Iceland->getCurrency()
        );
        self::assertEquals(
            'Indian rupee',
            CountryEnum::India->getCurrency()
        );
        self::assertEquals(
            'Indonesian rupiah (inv.)',
            CountryEnum::Indonesia->getCurrency()
        );
        self::assertEquals(
            'Iranian rial',
            CountryEnum::Iran->getCurrency()
        );
        self::assertEquals(
            'Iraqi dinar',
            CountryEnum::Iraq->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Ireland->getCurrency()
        );
        self::assertEquals(
            'Manx pound (IM2)',
            CountryEnum::IsleofMan->getCurrency()
        );
        self::assertEquals(
            'shekel',
            CountryEnum::Israel->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Italy->getCurrency()
        );
        self::assertEquals(
            'Jamaica dollar',
            CountryEnum::Jamaica->getCurrency()
        );
        self::assertEquals(
            'yen (inv.)',
            CountryEnum::Japan->getCurrency()
        );
        self::assertEquals(
            'Jersey pound (JE2)',
            CountryEnum::Jersey->getCurrency()
        );
        self::assertEquals(
            'Jordanian dinar',
            CountryEnum::Jordan->getCurrency()
        );
        self::assertEquals(
            'tenge (inv.)',
            CountryEnum::Kazakhstan->getCurrency()
        );
        self::assertEquals(
            'Kenyan shilling',
            CountryEnum::Kenya->getCurrency()
        );
        self::assertEquals(
            'Australian dollar',
            CountryEnum::Kiribati->getCurrency()
        );
        self::assertEquals(
            'South Korean won (inv.)',
            CountryEnum::Korea->getCurrency()
        );
        self::assertEquals(
            'North Korean won (inv.)',
            CountryEnum::KoreaDR->getCurrency()
        );
        self::assertEquals(
            'Kuwaiti dinar',
            CountryEnum::Kuwait->getCurrency()
        );
        self::assertEquals(
            'som',
            CountryEnum::Kyrgyzstan->getCurrency()
        );
        self::assertEquals(
            'kip (inv.)',
            CountryEnum::LaoPeoplesDemocraticRepublic->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Latvia->getCurrency()
        );
        self::assertEquals(
            'Lebanese pound',
            CountryEnum::Lebanon->getCurrency()
        );
        self::assertEquals(
            'loti (pl. maloti)',
            CountryEnum::Lesotho->getCurrency()
        );
        self::assertEquals(
            'Liberian dollar',
            CountryEnum::Liberia->getCurrency()
        );
        self::assertEquals(
            'Libyan dinar',
            CountryEnum::Libya->getCurrency()
        );
        self::assertEquals(
            'Swiss franc',
            CountryEnum::Liechtenstein->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Lithuania->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Luxembourg->getCurrency()
        );
        self::assertEquals(
            'pataca',
            CountryEnum::Macao->getCurrency()
        );
        self::assertEquals(
            'denar (pl. denars)',
            CountryEnum::Macedonia->getCurrency()
        );
        self::assertEquals(
            'ariary',
            CountryEnum::Madagascar->getCurrency()
        );
        self::assertEquals(
            'Malawian kwacha (inv.)',
            CountryEnum::Malawi->getCurrency()
        );
        self::assertEquals(
            'ringgit (inv.)',
            CountryEnum::Malaysia->getCurrency()
        );
        self::assertEquals(
            'rufiyaa',
            CountryEnum::Maldives->getCurrency()
        );
        self::assertEquals(
            'CFA franc (BCEAO)',
            CountryEnum::Mali->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Malta->getCurrency()
        );
        self::assertEquals(
            'US dollar',
            CountryEnum::MarshallIslands->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Martinique->getCurrency()
        );
        self::assertEquals(
            'ouguiya',
            CountryEnum::Mauritania->getCurrency()
        );
        self::assertEquals(
            'Mauritian rupee',
            CountryEnum::Mauritius->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Mayotte->getCurrency()
        );
        self::assertEquals(
            'Mexican peso',
            CountryEnum::Mexico->getCurrency()
        );
        self::assertEquals(
            'US dollar',
            CountryEnum::Micronesia->getCurrency()
        );
        self::assertEquals(
            'Moldovan leu (pl. lei)',
            CountryEnum::Moldova->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Monaco->getCurrency()
        );
        self::assertEquals(
            'tugrik',
            CountryEnum::Mongolia->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Montenegro->getCurrency()
        );
        self::assertEquals(
            'East Caribbean dollar',
            CountryEnum::Montserrat->getCurrency()
        );
        self::assertEquals(
            'Moroccan dirham',
            CountryEnum::Morocco->getCurrency()
        );
        self::assertEquals(
            'metical',
            CountryEnum::Mozambique->getCurrency()
        );
        self::assertEquals(
            'kyat',
            CountryEnum::Myanmar->getCurrency()
        );
        self::assertEquals(
            'Namibian dollar',
            CountryEnum::Namibia->getCurrency()
        );
        self::assertEquals(
            'Australian dollar',
            CountryEnum::Nauru->getCurrency()
        );
        self::assertEquals(
            'Nepalese rupee',
            CountryEnum::Nepal->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Netherlands->getCurrency()
        );
        self::assertEquals(
            'CFP franc',
            CountryEnum::NewCaledonia->getCurrency()
        );
        self::assertEquals(
            'New Zealand dollar',
            CountryEnum::NewZealand->getCurrency()
        );
        self::assertEquals(
            'córdoba oro',
            CountryEnum::Nicaragua->getCurrency()
        );
        self::assertEquals(
            'CFA franc (BCEAO)',
            CountryEnum::Niger->getCurrency()
        );
        self::assertEquals(
            'naira (inv.)',
            CountryEnum::Nigeria->getCurrency()
        );
        self::assertEquals(
            'New Zealand dollar',
            CountryEnum::Niue->getCurrency()
        );
        self::assertEquals(
            'Australian dollar',
            CountryEnum::NorfolkIsland->getCurrency()
        );
        self::assertEquals(
            'US dollar',
            CountryEnum::NorthernMarianaIslands->getCurrency()
        );
        self::assertEquals(
            'Norwegian krone (pl. kroner)',
            CountryEnum::Norway->getCurrency()
        );
        self::assertEquals(
            'Omani rial',
            CountryEnum::Oman->getCurrency()
        );
        self::assertEquals(
            'Pakistani rupee',
            CountryEnum::Pakistan->getCurrency()
        );
        self::assertEquals(
            'US dollar',
            CountryEnum::Palau->getCurrency()
        );
        self::assertEquals(
            'shekel',
            CountryEnum::Palestine->getCurrency()
        );
        self::assertEquals(
            'balboa',
            CountryEnum::Panama->getCurrency()
        );
        self::assertEquals(
            'kina (inv.)',
            CountryEnum::PapuaNewGuinea->getCurrency()
        );
        self::assertEquals(
            'guaraní',
            CountryEnum::Paraguay->getCurrency()
        );
        self::assertEquals(
            'new sol',
            CountryEnum::Peru->getCurrency()
        );
        self::assertEquals(
            'Philippine peso',
            CountryEnum::Philippines->getCurrency()
        );
        self::assertEquals(
            'New Zealand dollar',
            CountryEnum::Pitcairn->getCurrency()
        );
        self::assertEquals(
            'zloty',
            CountryEnum::Poland->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Portugal->getCurrency()
        );
        self::assertEquals(
            'US dollar',
            CountryEnum::PuertoRico->getCurrency()
        );
        self::assertEquals(
            'Qatari riyal',
            CountryEnum::Qatar->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Reunion->getCurrency()
        );
        self::assertEquals(
            'Romanian leu (pl. lei)',
            CountryEnum::Romania->getCurrency()
        );
        self::assertEquals(
            'Russian rouble',
            CountryEnum::RussianFederation->getCurrency()
        );
        self::assertEquals(
            'Rwandese franc',
            CountryEnum::Rwanda->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::SaintBarthelemy->getCurrency()
        );
        self::assertEquals(
            'Saint Helena pound',
            CountryEnum::SaintHelena->getCurrency()
        );
        self::assertEquals(
            'East Caribbean dollar',
            CountryEnum::SaintKittsandNevis->getCurrency()
        );
        self::assertEquals(
            'East Caribbean dollar',
            CountryEnum::SaintLucia->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::SaintMartinFrench->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::SaintPierreandMiquelon->getCurrency()
        );
        self::assertEquals(
            'East Caribbean dollar',
            CountryEnum::SaintVincentandtheGrenadines->getCurrency()
        );
        self::assertEquals(
            'tala (inv.)',
            CountryEnum::Samoa->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::SanMarino->getCurrency()
        );
        self::assertEquals(
            'dobra',
            CountryEnum::SaoTomeandPrincipe->getCurrency()
        );
        self::assertEquals(
            'riyal',
            CountryEnum::SaudiArabia->getCurrency()
        );
        self::assertEquals(
            'CFA franc (BCEAO)',
            CountryEnum::Senegal->getCurrency()
        );
        self::assertEquals(
            'Serbian dinar',
            CountryEnum::Serbia->getCurrency()
        );
        self::assertEquals(
            'Seychelles rupee',
            CountryEnum::Seychelles->getCurrency()
        );
        self::assertEquals(
            'leone',
            CountryEnum::SierraLeone->getCurrency()
        );
        self::assertEquals(
            'Singapore dollar',
            CountryEnum::Singapore->getCurrency()
        );
        self::assertEquals(
            'Netherlands Antillean guilder (SX1)',
            CountryEnum::SintMaartenDutch->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Slovakia->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Slovenia->getCurrency()
        );
        self::assertEquals(
            'Solomon Islands dollar',
            CountryEnum::SolomonIslands->getCurrency()
        );
        self::assertEquals(
            'Somali shilling',
            CountryEnum::Somalia->getCurrency()
        );
        self::assertEquals(
            'rand',
            CountryEnum::SouthAfrica->getCurrency()
        );
        self::assertEquals(
            '',
            CountryEnum::SouthGeorgiaandtheSouthSandwichIslands->getCurrency()
        );
        self::assertEquals(
            'South Sudanese pound',
            CountryEnum::SouthSudan->getCurrency()
        );
        self::assertEquals(
            'euro',
            CountryEnum::Spain->getCurrency()
        );
        self::assertEquals(
            'Sri Lankan rupee',
            CountryEnum::SriLanka->getCurrency()
        );
        self::assertEquals(
            'Sudanese pound',
            CountryEnum::Sudan->getCurrency()
        );
        self::assertEquals(
            'Surinamese dollar',
            CountryEnum::Suriname->getCurrency()
        );
        self::assertEquals(
            'Norwegian krone (pl. kroner)',
            CountryEnum::SvalbardandJanMayen->getCurrency()
        );
        self::assertEquals(
            'lilangeni',
            CountryEnum::Swaziland->getCurrency()
        );
        self::assertEquals(
            'krona (pl. kronor)',
            CountryEnum::Sweden->getCurrency()
        );
        self::assertEquals(
            'Swiss franc',
            CountryEnum::Switzerland->getCurrency()
        );
        self::assertEquals(
            'Syrian pound',
            CountryEnum::SyrianArabRepublic->getCurrency()
        );
        self::assertEquals(
            'new Taiwan dollar',
            CountryEnum::Taiwan->getCurrency()
        );
        self::assertEquals(
            'somoni',
            CountryEnum::Tajikistan->getCurrency()
        );
        self::assertEquals(
            'Tanzanian shilling',
            CountryEnum::Tanzania->getCurrency()
        );
        self::assertEquals(
            'baht (inv.)',
            CountryEnum::Thailand->getCurrency()
        );
        self::assertEquals(
            'US dollar',
            CountryEnum::TimorLeste->getCurrency()
        );
        self::assertEquals(
            'CFA franc (BCEAO)',
            CountryEnum::Togo->getCurrency()
        );
        self::assertEquals(
            'New Zealand dollar',
            CountryEnum::Tokelau->getCurrency()
        );
        self::assertEquals(
            'pa’anga (inv.)',
            CountryEnum::Tonga->getCurrency()
        );
        self::assertEquals(
            'Trinidad and Tobago dollar',
            CountryEnum::TrinidadandTobago->getCurrency()
        );
        self::assertEquals(
            'Tunisian dinar',
            CountryEnum::Tunisia->getCurrency()
        );
        self::assertEquals(
            'Turkish lira (inv.)',
            CountryEnum::Turkey->getCurrency()
        );
        self::assertEquals(
            'Turkmen manat (inv.)',
            CountryEnum::Turkmenistan->getCurrency()
        );
        self::assertEquals(
            'US dollar',
            CountryEnum::TurksandCaicosIslands->getCurrency()
        );
        self::assertEquals(
            'Australian dollar',
            CountryEnum::Tuvalu->getCurrency()
        );
        self::assertEquals(
            'Uganda shilling',
            CountryEnum::Uganda->getCurrency()
        );
        self::assertEquals(
            'hryvnia',
            CountryEnum::Ukraine->getCurrency()
        );
        self::assertEquals(
            'UAE dirham',
            CountryEnum::UnitedArabEmirates->getCurrency()
        );
        self::assertEquals(
            'pound sterling',
            CountryEnum::UnitedKingdom->getCurrency()
        );
        self::assertEquals(
            'US dollar',
            CountryEnum::UnitedStates->getCurrency()
        );
        self::assertEquals(
            'US dollar',
            CountryEnum::UnitedStatesMinorOutlyingIslands->getCurrency()
        );
        self::assertEquals(
            'Uruguayan peso',
            CountryEnum::Uruguay->getCurrency()
        );
        self::assertEquals(
            'sum (inv.)',
            CountryEnum::Uzbekistan->getCurrency()
        );
        self::assertEquals(
            'vatu (inv.)',
            CountryEnum::Vanuatu->getCurrency()
        );
        self::assertEquals(
            'bolívar fuerte (pl. bolívares fuertes)',
            CountryEnum::Venezuela->getCurrency()
        );
        self::assertEquals(
            'dong',
            CountryEnum::VietNam->getCurrency()
        );
        self::assertEquals(
            'US dollar',
            CountryEnum::VirginIslands->getCurrency()
        );
        self::assertEquals(
            'CFP franc',
            CountryEnum::WallisandFutuna->getCurrency()
        );
        self::assertEquals(
            'Moroccan dirham',
            CountryEnum::WesternSahara->getCurrency()
        );
        self::assertEquals(
            'Yemeni rial',
            CountryEnum::Yemen->getCurrency()
        );
        self::assertEquals(
            'Zambian kwacha (inv.)',
            CountryEnum::Zambia->getCurrency()
        );
        self::assertEquals(
            'Zimbabwe dollar (ZW1)',
            CountryEnum::Zimbabwe->getCurrency()
        );
    }
}
